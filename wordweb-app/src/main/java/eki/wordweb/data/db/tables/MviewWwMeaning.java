/*
 * This file is generated by jOOQ.
 */
package eki.wordweb.data.db.tables;


import eki.wordweb.data.db.Public;
import eki.wordweb.data.db.tables.records.MviewWwMeaningRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MviewWwMeaning extends TableImpl<MviewWwMeaningRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mview_ww_meaning</code>
     */
    public static final MviewWwMeaning MVIEW_WW_MEANING = new MviewWwMeaning();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MviewWwMeaningRecord> getRecordType() {
        return MviewWwMeaningRecord.class;
    }

    /**
     * The column <code>public.mview_ww_meaning.meaning_id</code>.
     */
    public final TableField<MviewWwMeaningRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mview_ww_meaning.manual_event_on</code>.
     */
    public final TableField<MviewWwMeaningRecord, LocalDateTime> MANUAL_EVENT_ON = createField(DSL.name("manual_event_on"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>public.mview_ww_meaning.last_approve_or_edit_event_on</code>.
     */
    public final TableField<MviewWwMeaningRecord, LocalDateTime> LAST_APPROVE_OR_EDIT_EVENT_ON = createField(DSL.name("last_approve_or_edit_event_on"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>public.mview_ww_meaning.domain_codes</code>.
     */
    public final TableField<MviewWwMeaningRecord, JSON> DOMAIN_CODES = createField(DSL.name("domain_codes"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.mview_ww_meaning.meaning_images</code>.
     */
    public final TableField<MviewWwMeaningRecord, JSON> MEANING_IMAGES = createField(DSL.name("meaning_images"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.mview_ww_meaning.media_files</code>.
     */
    public final TableField<MviewWwMeaningRecord, JSON> MEDIA_FILES = createField(DSL.name("media_files"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.mview_ww_meaning.systematic_polysemy_patterns</code>.
     */
    public final TableField<MviewWwMeaningRecord, String[]> SYSTEMATIC_POLYSEMY_PATTERNS = createField(DSL.name("systematic_polysemy_patterns"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.semantic_types</code>.
     */
    public final TableField<MviewWwMeaningRecord, String[]> SEMANTIC_TYPES = createField(DSL.name("semantic_types"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.learner_comments</code>.
     */
    public final TableField<MviewWwMeaningRecord, String[]> LEARNER_COMMENTS = createField(DSL.name("learner_comments"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.notes</code>.
     */
    public final TableField<MviewWwMeaningRecord, JSON> NOTES = createField(DSL.name("notes"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.mview_ww_meaning.definitions</code>.
     */
    public final TableField<MviewWwMeaningRecord, JSON> DEFINITIONS = createField(DSL.name("definitions"), SQLDataType.JSON, this, "");

    private MviewWwMeaning(Name alias, Table<MviewWwMeaningRecord> aliased) {
        this(alias, aliased, null);
    }

    private MviewWwMeaning(Name alias, Table<MviewWwMeaningRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.materializedView());
    }

    /**
     * Create an aliased <code>public.mview_ww_meaning</code> table reference
     */
    public MviewWwMeaning(String alias) {
        this(DSL.name(alias), MVIEW_WW_MEANING);
    }

    /**
     * Create an aliased <code>public.mview_ww_meaning</code> table reference
     */
    public MviewWwMeaning(Name alias) {
        this(alias, MVIEW_WW_MEANING);
    }

    /**
     * Create a <code>public.mview_ww_meaning</code> table reference
     */
    public MviewWwMeaning() {
        this(DSL.name("mview_ww_meaning"), null);
    }

    public <O extends Record> MviewWwMeaning(Table<O> child, ForeignKey<O, MviewWwMeaningRecord> key) {
        super(child, key, MVIEW_WW_MEANING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public MviewWwMeaning as(String alias) {
        return new MviewWwMeaning(DSL.name(alias), this);
    }

    @Override
    public MviewWwMeaning as(Name alias) {
        return new MviewWwMeaning(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MviewWwMeaning rename(String name) {
        return new MviewWwMeaning(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MviewWwMeaning rename(Name name) {
        return new MviewWwMeaning(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, LocalDateTime, LocalDateTime, JSON, JSON, JSON, String[], String[], String[], JSON, JSON> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
