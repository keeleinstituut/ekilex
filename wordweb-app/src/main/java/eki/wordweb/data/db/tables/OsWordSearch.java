/*
 * This file is generated by jOOQ.
 */
package eki.wordweb.data.db.tables;


import eki.wordweb.data.db.Public;
import eki.wordweb.data.db.tables.records.OsWordSearchRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OsWordSearch extends TableImpl<OsWordSearchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.os_word_search</code>
     */
    public static final OsWordSearch OS_WORD_SEARCH = new OsWordSearch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OsWordSearchRecord> getRecordType() {
        return OsWordSearchRecord.class;
    }

    /**
     * The column <code>public.os_word_search.sgroup</code>.
     */
    public final TableField<OsWordSearchRecord, String> SGROUP = createField(DSL.name("sgroup"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.os_word_search.word_value</code>.
     */
    public final TableField<OsWordSearchRecord, String> WORD_VALUE = createField(DSL.name("word_value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.os_word_search.crit</code>.
     */
    public final TableField<OsWordSearchRecord, String> CRIT = createField(DSL.name("crit"), SQLDataType.CLOB.nullable(false), this, "");

    private OsWordSearch(Name alias, Table<OsWordSearchRecord> aliased) {
        this(alias, aliased, null);
    }

    private OsWordSearch(Name alias, Table<OsWordSearchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.os_word_search</code> table reference
     */
    public OsWordSearch(String alias) {
        this(DSL.name(alias), OS_WORD_SEARCH);
    }

    /**
     * Create an aliased <code>public.os_word_search</code> table reference
     */
    public OsWordSearch(Name alias) {
        this(alias, OS_WORD_SEARCH);
    }

    /**
     * Create a <code>public.os_word_search</code> table reference
     */
    public OsWordSearch() {
        this(DSL.name("os_word_search"), null);
    }

    public <O extends Record> OsWordSearch(Table<O> child, ForeignKey<O, OsWordSearchRecord> key) {
        super(child, key, OS_WORD_SEARCH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public OsWordSearch as(String alias) {
        return new OsWordSearch(DSL.name(alias), this);
    }

    @Override
    public OsWordSearch as(Name alias) {
        return new OsWordSearch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OsWordSearch rename(String name) {
        return new OsWordSearch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OsWordSearch rename(Name name) {
        return new OsWordSearch(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
