/*
 * This file is generated by jOOQ.
 */
package eki.wordweb.data.db.tables;


import eki.wordweb.data.db.Public;
import eki.wordweb.data.db.tables.records.MviewOdWordRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MviewOdWord extends TableImpl<MviewOdWordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mview_od_word</code>
     */
    public static final MviewOdWord MVIEW_OD_WORD = new MviewOdWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MviewOdWordRecord> getRecordType() {
        return MviewOdWordRecord.class;
    }

    /**
     * The column <code>public.mview_od_word.word_id</code>.
     */
    public final TableField<MviewOdWordRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mview_od_word.value</code>.
     */
    public final TableField<MviewOdWordRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mview_od_word.value_prese</code>.
     */
    public final TableField<MviewOdWordRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mview_od_word.value_as_word</code>.
     */
    public final TableField<MviewOdWordRecord, String> VALUE_AS_WORD = createField(DSL.name("value_as_word"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mview_od_word.homonym_nr</code>.
     */
    public final TableField<MviewOdWordRecord, Integer> HOMONYM_NR = createField(DSL.name("homonym_nr"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mview_od_word.vocal_form</code>.
     */
    public final TableField<MviewOdWordRecord, String> VOCAL_FORM = createField(DSL.name("vocal_form"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mview_od_word.word_type_codes</code>.
     */
    public final TableField<MviewOdWordRecord, String[]> WORD_TYPE_CODES = createField(DSL.name("word_type_codes"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

    private MviewOdWord(Name alias, Table<MviewOdWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private MviewOdWord(Name alias, Table<MviewOdWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.materializedView());
    }

    /**
     * Create an aliased <code>public.mview_od_word</code> table reference
     */
    public MviewOdWord(String alias) {
        this(DSL.name(alias), MVIEW_OD_WORD);
    }

    /**
     * Create an aliased <code>public.mview_od_word</code> table reference
     */
    public MviewOdWord(Name alias) {
        this(alias, MVIEW_OD_WORD);
    }

    /**
     * Create a <code>public.mview_od_word</code> table reference
     */
    public MviewOdWord() {
        this(DSL.name("mview_od_word"), null);
    }

    public <O extends Record> MviewOdWord(Table<O> child, ForeignKey<O, MviewOdWordRecord> key) {
        super(child, key, MVIEW_OD_WORD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public MviewOdWord as(String alias) {
        return new MviewOdWord(DSL.name(alias), this);
    }

    @Override
    public MviewOdWord as(Name alias) {
        return new MviewOdWord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MviewOdWord rename(String name) {
        return new MviewOdWord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MviewOdWord rename(Name name) {
        return new MviewOdWord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, Integer, String, String[]> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
