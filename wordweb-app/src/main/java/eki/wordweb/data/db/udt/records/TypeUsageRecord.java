/*
 * This file is generated by jOOQ.
 */
package eki.wordweb.data.db.udt.records;


import eki.wordweb.data.db.udt.TypeUsage;

import org.jooq.Field;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeUsageRecord extends UDTRecordImpl<TypeUsageRecord> implements Record8<Long, String, String, String, String, String, String[], String[]> {

    private static final long serialVersionUID = -157074159;

    /**
     * Setter for <code>public.type_usage.usage_id</code>.
     */
    public void setUsageId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.type_usage.usage_id</code>.
     */
    public Long getUsageId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.type_usage.usage</code>.
     */
    public void setUsage(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.type_usage.usage</code>.
     */
    public String getUsage() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.type_usage.usage_prese</code>.
     */
    public void setUsagePrese(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.type_usage.usage_prese</code>.
     */
    public String getUsagePrese() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.type_usage.usage_lang</code>.
     */
    public void setUsageLang(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.type_usage.usage_lang</code>.
     */
    public String getUsageLang() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.type_usage.complexity</code>.
     */
    public void setComplexity(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.type_usage.complexity</code>.
     */
    public String getComplexity() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.type_usage.usage_type_code</code>.
     */
    public void setUsageTypeCode(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.type_usage.usage_type_code</code>.
     */
    public String getUsageTypeCode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.type_usage.usage_translations</code>.
     */
    public void setUsageTranslations(String[] value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.type_usage.usage_translations</code>.
     */
    public String[] getUsageTranslations() {
        return (String[]) get(6);
    }

    /**
     * Setter for <code>public.type_usage.usage_definitions</code>.
     */
    public void setUsageDefinitions(String[] value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.type_usage.usage_definitions</code>.
     */
    public String[] getUsageDefinitions() {
        return (String[]) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, String, String[], String[]> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, String, String, String, String[], String[]> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TypeUsage.USAGE_ID;
    }

    @Override
    public Field<String> field2() {
        return TypeUsage.USAGE;
    }

    @Override
    public Field<String> field3() {
        return TypeUsage.USAGE_PRESE;
    }

    @Override
    public Field<String> field4() {
        return TypeUsage.USAGE_LANG;
    }

    @Override
    public Field<String> field5() {
        return TypeUsage.COMPLEXITY;
    }

    @Override
    public Field<String> field6() {
        return TypeUsage.USAGE_TYPE_CODE;
    }

    @Override
    public Field<String[]> field7() {
        return TypeUsage.USAGE_TRANSLATIONS;
    }

    @Override
    public Field<String[]> field8() {
        return TypeUsage.USAGE_DEFINITIONS;
    }

    @Override
    public Long component1() {
        return getUsageId();
    }

    @Override
    public String component2() {
        return getUsage();
    }

    @Override
    public String component3() {
        return getUsagePrese();
    }

    @Override
    public String component4() {
        return getUsageLang();
    }

    @Override
    public String component5() {
        return getComplexity();
    }

    @Override
    public String component6() {
        return getUsageTypeCode();
    }

    @Override
    public String[] component7() {
        return getUsageTranslations();
    }

    @Override
    public String[] component8() {
        return getUsageDefinitions();
    }

    @Override
    public Long value1() {
        return getUsageId();
    }

    @Override
    public String value2() {
        return getUsage();
    }

    @Override
    public String value3() {
        return getUsagePrese();
    }

    @Override
    public String value4() {
        return getUsageLang();
    }

    @Override
    public String value5() {
        return getComplexity();
    }

    @Override
    public String value6() {
        return getUsageTypeCode();
    }

    @Override
    public String[] value7() {
        return getUsageTranslations();
    }

    @Override
    public String[] value8() {
        return getUsageDefinitions();
    }

    @Override
    public TypeUsageRecord value1(Long value) {
        setUsageId(value);
        return this;
    }

    @Override
    public TypeUsageRecord value2(String value) {
        setUsage(value);
        return this;
    }

    @Override
    public TypeUsageRecord value3(String value) {
        setUsagePrese(value);
        return this;
    }

    @Override
    public TypeUsageRecord value4(String value) {
        setUsageLang(value);
        return this;
    }

    @Override
    public TypeUsageRecord value5(String value) {
        setComplexity(value);
        return this;
    }

    @Override
    public TypeUsageRecord value6(String value) {
        setUsageTypeCode(value);
        return this;
    }

    @Override
    public TypeUsageRecord value7(String[] value) {
        setUsageTranslations(value);
        return this;
    }

    @Override
    public TypeUsageRecord value8(String[] value) {
        setUsageDefinitions(value);
        return this;
    }

    @Override
    public TypeUsageRecord values(Long value1, String value2, String value3, String value4, String value5, String value6, String[] value7, String[] value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypeUsageRecord
     */
    public TypeUsageRecord() {
        super(TypeUsage.TYPE_USAGE);
    }

    /**
     * Create a detached, initialised TypeUsageRecord
     */
    public TypeUsageRecord(Long usageId, String usage, String usagePrese, String usageLang, String complexity, String usageTypeCode, String[] usageTranslations, String[] usageDefinitions) {
        super(TypeUsage.TYPE_USAGE);

        set(0, usageId);
        set(1, usage);
        set(2, usagePrese);
        set(3, usageLang);
        set(4, complexity);
        set(5, usageTypeCode);
        set(6, usageTranslations);
        set(7, usageDefinitions);
    }
}
