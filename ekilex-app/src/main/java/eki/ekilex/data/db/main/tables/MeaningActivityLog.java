/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.MeaningActivityLogRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeaningActivityLog extends TableImpl<MeaningActivityLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.meaning_activity_log</code>
     */
    public static final MeaningActivityLog MEANING_ACTIVITY_LOG = new MeaningActivityLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeaningActivityLogRecord> getRecordType() {
        return MeaningActivityLogRecord.class;
    }

    /**
     * The column <code>public.meaning_activity_log.id</code>.
     */
    public final TableField<MeaningActivityLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.meaning_activity_log.meaning_id</code>.
     */
    public final TableField<MeaningActivityLogRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.meaning_activity_log.activity_log_id</code>.
     */
    public final TableField<MeaningActivityLogRecord, Long> ACTIVITY_LOG_ID = createField(DSL.name("activity_log_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private MeaningActivityLog(Name alias, Table<MeaningActivityLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private MeaningActivityLog(Name alias, Table<MeaningActivityLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.meaning_activity_log</code> table reference
     */
    public MeaningActivityLog(String alias) {
        this(DSL.name(alias), MEANING_ACTIVITY_LOG);
    }

    /**
     * Create an aliased <code>public.meaning_activity_log</code> table reference
     */
    public MeaningActivityLog(Name alias) {
        this(alias, MEANING_ACTIVITY_LOG);
    }

    /**
     * Create a <code>public.meaning_activity_log</code> table reference
     */
    public MeaningActivityLog() {
        this(DSL.name("meaning_activity_log"), null);
    }

    public <O extends Record> MeaningActivityLog(Table<O> child, ForeignKey<O, MeaningActivityLogRecord> key) {
        super(child, key, MEANING_ACTIVITY_LOG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MeaningActivityLogRecord, Long> getIdentity() {
        return (Identity<MeaningActivityLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeaningActivityLogRecord> getPrimaryKey() {
        return Keys.MEANING_ACTIVITY_LOG_PKEY;
    }

    @Override
    public List<UniqueKey<MeaningActivityLogRecord>> getKeys() {
        return Arrays.<UniqueKey<MeaningActivityLogRecord>>asList(Keys.MEANING_ACTIVITY_LOG_PKEY, Keys.MEANING_ACTIVITY_LOG_MEANING_ID_ACTIVITY_LOG_ID_KEY);
    }

    @Override
    public List<ForeignKey<MeaningActivityLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MeaningActivityLogRecord, ?>>asList(Keys.MEANING_ACTIVITY_LOG__MEANING_ACTIVITY_LOG_MEANING_ID_FKEY, Keys.MEANING_ACTIVITY_LOG__MEANING_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY);
    }

    private transient Meaning _meaning;
    private transient ActivityLog _activityLog;

    public Meaning meaning() {
        if (_meaning == null)
            _meaning = new Meaning(this, Keys.MEANING_ACTIVITY_LOG__MEANING_ACTIVITY_LOG_MEANING_ID_FKEY);

        return _meaning;
    }

    public ActivityLog activityLog() {
        if (_activityLog == null)
            _activityLog = new ActivityLog(this, Keys.MEANING_ACTIVITY_LOG__MEANING_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY);

        return _activityLog;
    }

    @Override
    public MeaningActivityLog as(String alias) {
        return new MeaningActivityLog(DSL.name(alias), this);
    }

    @Override
    public MeaningActivityLog as(Name alias) {
        return new MeaningActivityLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MeaningActivityLog rename(String name) {
        return new MeaningActivityLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MeaningActivityLog rename(Name name) {
        return new MeaningActivityLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
