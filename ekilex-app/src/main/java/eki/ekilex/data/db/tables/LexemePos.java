/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.LexemePosRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemePos extends TableImpl<LexemePosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lexeme_pos</code>
     */
    public static final LexemePos LEXEME_POS = new LexemePos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemePosRecord> getRecordType() {
        return LexemePosRecord.class;
    }

    /**
     * The column <code>public.lexeme_pos.id</code>.
     */
    public final TableField<LexemePosRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lexeme_pos.lexeme_id</code>.
     */
    public final TableField<LexemePosRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_pos.pos_code</code>.
     */
    public final TableField<LexemePosRecord, String> POS_CODE = createField(DSL.name("pos_code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.lexeme_pos.order_by</code>.
     */
    public final TableField<LexemePosRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private LexemePos(Name alias, Table<LexemePosRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexemePos(Name alias, Table<LexemePosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lexeme_pos</code> table reference
     */
    public LexemePos(String alias) {
        this(DSL.name(alias), LEXEME_POS);
    }

    /**
     * Create an aliased <code>public.lexeme_pos</code> table reference
     */
    public LexemePos(Name alias) {
        this(alias, LEXEME_POS);
    }

    /**
     * Create a <code>public.lexeme_pos</code> table reference
     */
    public LexemePos() {
        this(DSL.name("lexeme_pos"), null);
    }

    public <O extends Record> LexemePos(Table<O> child, ForeignKey<O, LexemePosRecord> key) {
        super(child, key, LEXEME_POS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LexemePosRecord, Long> getIdentity() {
        return (Identity<LexemePosRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LexemePosRecord> getPrimaryKey() {
        return Keys.LEXEME_POS_PKEY;
    }

    @Override
    public List<UniqueKey<LexemePosRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemePosRecord>>asList(Keys.LEXEME_POS_PKEY, Keys.LEXEME_POS_LEXEME_ID_POS_CODE_KEY);
    }

    @Override
    public List<ForeignKey<LexemePosRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemePosRecord, ?>>asList(Keys.LEXEME_POS__LEXEME_POS_LEXEME_ID_FKEY, Keys.LEXEME_POS__LEXEME_POS_POS_CODE_FKEY);
    }

    private transient Lexeme _lexeme;
    private transient Pos _pos;

    public Lexeme lexeme() {
        if (_lexeme == null)
            _lexeme = new Lexeme(this, Keys.LEXEME_POS__LEXEME_POS_LEXEME_ID_FKEY);

        return _lexeme;
    }

    public Pos pos() {
        if (_pos == null)
            _pos = new Pos(this, Keys.LEXEME_POS__LEXEME_POS_POS_CODE_FKEY);

        return _pos;
    }

    @Override
    public LexemePos as(String alias) {
        return new LexemePos(DSL.name(alias), this);
    }

    @Override
    public LexemePos as(Name alias) {
        return new LexemePos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemePos rename(String name) {
        return new LexemePos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemePos rename(Name name) {
        return new LexemePos(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
