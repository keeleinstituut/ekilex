/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.PostgresFdwGetConnectionsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostgresFdwGetConnections extends TableImpl<PostgresFdwGetConnectionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.postgres_fdw_get_connections</code>
     */
    public static final PostgresFdwGetConnections POSTGRES_FDW_GET_CONNECTIONS = new PostgresFdwGetConnections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostgresFdwGetConnectionsRecord> getRecordType() {
        return PostgresFdwGetConnectionsRecord.class;
    }

    /**
     * The column <code>public.postgres_fdw_get_connections.server_name</code>.
     */
    public final TableField<PostgresFdwGetConnectionsRecord, String> SERVER_NAME = createField(DSL.name("server_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.postgres_fdw_get_connections.valid</code>.
     */
    public final TableField<PostgresFdwGetConnectionsRecord, Boolean> VALID = createField(DSL.name("valid"), SQLDataType.BOOLEAN, this, "");

    private PostgresFdwGetConnections(Name alias, Table<PostgresFdwGetConnectionsRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private PostgresFdwGetConnections(Name alias, Table<PostgresFdwGetConnectionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.postgres_fdw_get_connections</code> table reference
     */
    public PostgresFdwGetConnections(String alias) {
        this(DSL.name(alias), POSTGRES_FDW_GET_CONNECTIONS);
    }

    /**
     * Create an aliased <code>public.postgres_fdw_get_connections</code> table reference
     */
    public PostgresFdwGetConnections(Name alias) {
        this(alias, POSTGRES_FDW_GET_CONNECTIONS);
    }

    /**
     * Create a <code>public.postgres_fdw_get_connections</code> table reference
     */
    public PostgresFdwGetConnections() {
        this(DSL.name("postgres_fdw_get_connections"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public PostgresFdwGetConnections as(String alias) {
        return new PostgresFdwGetConnections(DSL.name(alias), this, parameters);
    }

    @Override
    public PostgresFdwGetConnections as(Name alias) {
        return new PostgresFdwGetConnections(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PostgresFdwGetConnections rename(String name) {
        return new PostgresFdwGetConnections(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PostgresFdwGetConnections rename(Name name) {
        return new PostgresFdwGetConnections(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PostgresFdwGetConnections call() {
        PostgresFdwGetConnections result = new PostgresFdwGetConnections(DSL.name("postgres_fdw_get_connections"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
