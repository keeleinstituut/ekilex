/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.udt;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.udt.records.TypeNoteRecord;

import java.time.LocalDateTime;

import org.jooq.JSON;
import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeNote extends UDTImpl<TypeNoteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.type_note</code>
     */
    public static final TypeNote TYPE_NOTE = new TypeNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeNoteRecord> getRecordType() {
        return TypeNoteRecord.class;
    }

    /**
     * The attribute <code>public.type_note.note_id</code>.
     */
    public static final UDTField<TypeNoteRecord, Long> NOTE_ID = createField(DSL.name("note_id"), SQLDataType.BIGINT, TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.value</code>.
     */
    public static final UDTField<TypeNoteRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.value_prese</code>.
     */
    public static final UDTField<TypeNoteRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB, TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.lang</code>.
     */
    public static final UDTField<TypeNoteRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3), TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.complexity</code>.
     */
    public static final UDTField<TypeNoteRecord, String> COMPLEXITY = createField(DSL.name("complexity"), SQLDataType.VARCHAR(100), TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.created_by</code>.
     */
    public static final UDTField<TypeNoteRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.created_on</code>.
     */
    public static final UDTField<TypeNoteRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0), TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.modified_by</code>.
     */
    public static final UDTField<TypeNoteRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.CLOB, TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.modified_on</code>.
     */
    public static final UDTField<TypeNoteRecord, LocalDateTime> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.LOCALDATETIME(0), TYPE_NOTE, "");

    /**
     * The attribute <code>public.type_note.source_links</code>.
     */
    public static final UDTField<TypeNoteRecord, JSON> SOURCE_LINKS = createField(DSL.name("source_links"), SQLDataType.JSON, TYPE_NOTE, "");

    /**
     * No further instances allowed
     */
    private TypeNote() {
        super("type_note", null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
