/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.TermsOfUseRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TermsOfUse extends TableImpl<TermsOfUseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.terms_of_use</code>
     */
    public static final TermsOfUse TERMS_OF_USE = new TermsOfUse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TermsOfUseRecord> getRecordType() {
        return TermsOfUseRecord.class;
    }

    /**
     * The column <code>public.terms_of_use.id</code>.
     */
    public final TableField<TermsOfUseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.terms_of_use.version</code>.
     */
    public final TableField<TermsOfUseRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.terms_of_use.value</code>.
     */
    public final TableField<TermsOfUseRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.terms_of_use.is_active</code>.
     */
    public final TableField<TermsOfUseRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private TermsOfUse(Name alias, Table<TermsOfUseRecord> aliased) {
        this(alias, aliased, null);
    }

    private TermsOfUse(Name alias, Table<TermsOfUseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.terms_of_use</code> table reference
     */
    public TermsOfUse(String alias) {
        this(DSL.name(alias), TERMS_OF_USE);
    }

    /**
     * Create an aliased <code>public.terms_of_use</code> table reference
     */
    public TermsOfUse(Name alias) {
        this(alias, TERMS_OF_USE);
    }

    /**
     * Create a <code>public.terms_of_use</code> table reference
     */
    public TermsOfUse() {
        this(DSL.name("terms_of_use"), null);
    }

    public <O extends Record> TermsOfUse(Table<O> child, ForeignKey<O, TermsOfUseRecord> key) {
        super(child, key, TERMS_OF_USE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TermsOfUseRecord, Long> getIdentity() {
        return (Identity<TermsOfUseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TermsOfUseRecord> getPrimaryKey() {
        return Keys.TERMS_OF_USE_PKEY;
    }

    @Override
    public List<UniqueKey<TermsOfUseRecord>> getKeys() {
        return Arrays.<UniqueKey<TermsOfUseRecord>>asList(Keys.TERMS_OF_USE_PKEY, Keys.TERMS_OF_USE_VERSION_KEY);
    }

    @Override
    public TermsOfUse as(String alias) {
        return new TermsOfUse(DSL.name(alias), this);
    }

    @Override
    public TermsOfUse as(Name alias) {
        return new TermsOfUse(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TermsOfUse rename(String name) {
        return new TermsOfUse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TermsOfUse rename(Name name) {
        return new TermsOfUse(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
