/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.EkiUserApplicationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EkiUserApplication extends TableImpl<EkiUserApplicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eki_user_application</code>
     */
    public static final EkiUserApplication EKI_USER_APPLICATION = new EkiUserApplication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EkiUserApplicationRecord> getRecordType() {
        return EkiUserApplicationRecord.class;
    }

    /**
     * The column <code>public.eki_user_application.id</code>.
     */
    public final TableField<EkiUserApplicationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.eki_user_application.user_id</code>.
     */
    public final TableField<EkiUserApplicationRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.eki_user_application.dataset_code</code>.
     */
    public final TableField<EkiUserApplicationRecord, String> DATASET_CODE = createField(DSL.name("dataset_code"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.eki_user_application.auth_operation</code>.
     */
    public final TableField<EkiUserApplicationRecord, String> AUTH_OPERATION = createField(DSL.name("auth_operation"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.eki_user_application.lang</code>.
     */
    public final TableField<EkiUserApplicationRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3), this, "");

    /**
     * The column <code>public.eki_user_application.comment</code>.
     */
    public final TableField<EkiUserApplicationRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eki_user_application.status</code>.
     */
    public final TableField<EkiUserApplicationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.eki_user_application.created</code>.
     */
    public final TableField<EkiUserApplicationRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private EkiUserApplication(Name alias, Table<EkiUserApplicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private EkiUserApplication(Name alias, Table<EkiUserApplicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eki_user_application</code> table reference
     */
    public EkiUserApplication(String alias) {
        this(DSL.name(alias), EKI_USER_APPLICATION);
    }

    /**
     * Create an aliased <code>public.eki_user_application</code> table reference
     */
    public EkiUserApplication(Name alias) {
        this(alias, EKI_USER_APPLICATION);
    }

    /**
     * Create a <code>public.eki_user_application</code> table reference
     */
    public EkiUserApplication() {
        this(DSL.name("eki_user_application"), null);
    }

    public <O extends Record> EkiUserApplication(Table<O> child, ForeignKey<O, EkiUserApplicationRecord> key) {
        super(child, key, EKI_USER_APPLICATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<EkiUserApplicationRecord, Long> getIdentity() {
        return (Identity<EkiUserApplicationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EkiUserApplicationRecord> getPrimaryKey() {
        return Keys.EKI_USER_APPLICATION_PKEY1;
    }

    @Override
    public List<UniqueKey<EkiUserApplicationRecord>> getKeys() {
        return Arrays.<UniqueKey<EkiUserApplicationRecord>>asList(Keys.EKI_USER_APPLICATION_PKEY1);
    }

    @Override
    public List<ForeignKey<EkiUserApplicationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EkiUserApplicationRecord, ?>>asList(Keys.EKI_USER_APPLICATION__EKI_USER_APPLICATION_USER_ID_FKEY1, Keys.EKI_USER_APPLICATION__EKI_USER_APPLICATION_DATASET_CODE_FKEY, Keys.EKI_USER_APPLICATION__EKI_USER_APPLICATION_LANG_FKEY);
    }

    private transient EkiUser _ekiUser;
    private transient Dataset _dataset;
    private transient Language _language;

    public EkiUser ekiUser() {
        if (_ekiUser == null)
            _ekiUser = new EkiUser(this, Keys.EKI_USER_APPLICATION__EKI_USER_APPLICATION_USER_ID_FKEY1);

        return _ekiUser;
    }

    public Dataset dataset() {
        if (_dataset == null)
            _dataset = new Dataset(this, Keys.EKI_USER_APPLICATION__EKI_USER_APPLICATION_DATASET_CODE_FKEY);

        return _dataset;
    }

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.EKI_USER_APPLICATION__EKI_USER_APPLICATION_LANG_FKEY);

        return _language;
    }

    @Override
    public EkiUserApplication as(String alias) {
        return new EkiUserApplication(DSL.name(alias), this);
    }

    @Override
    public EkiUserApplication as(Name alias) {
        return new EkiUserApplication(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EkiUserApplication rename(String name) {
        return new EkiUserApplication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EkiUserApplication rename(Name name) {
        return new EkiUserApplication(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
