/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.WordOsHomonymNrRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordOsHomonymNr extends TableImpl<WordOsHomonymNrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.word_os_homonym_nr</code>
     */
    public static final WordOsHomonymNr WORD_OS_HOMONYM_NR = new WordOsHomonymNr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordOsHomonymNrRecord> getRecordType() {
        return WordOsHomonymNrRecord.class;
    }

    /**
     * The column <code>public.word_os_homonym_nr.id</code>.
     */
    public final TableField<WordOsHomonymNrRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.word_os_homonym_nr.word_id</code>.
     */
    public final TableField<WordOsHomonymNrRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_os_homonym_nr.homonym_nr</code>.
     */
    public final TableField<WordOsHomonymNrRecord, Integer> HOMONYM_NR = createField(DSL.name("homonym_nr"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    private WordOsHomonymNr(Name alias, Table<WordOsHomonymNrRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordOsHomonymNr(Name alias, Table<WordOsHomonymNrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.word_os_homonym_nr</code> table reference
     */
    public WordOsHomonymNr(String alias) {
        this(DSL.name(alias), WORD_OS_HOMONYM_NR);
    }

    /**
     * Create an aliased <code>public.word_os_homonym_nr</code> table reference
     */
    public WordOsHomonymNr(Name alias) {
        this(alias, WORD_OS_HOMONYM_NR);
    }

    /**
     * Create a <code>public.word_os_homonym_nr</code> table reference
     */
    public WordOsHomonymNr() {
        this(DSL.name("word_os_homonym_nr"), null);
    }

    public <O extends Record> WordOsHomonymNr(Table<O> child, ForeignKey<O, WordOsHomonymNrRecord> key) {
        super(child, key, WORD_OS_HOMONYM_NR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<WordOsHomonymNrRecord, Long> getIdentity() {
        return (Identity<WordOsHomonymNrRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WordOsHomonymNrRecord> getPrimaryKey() {
        return Keys.WORD_OS_HOMONYM_NR_PKEY;
    }

    @Override
    public List<UniqueKey<WordOsHomonymNrRecord>> getKeys() {
        return Arrays.<UniqueKey<WordOsHomonymNrRecord>>asList(Keys.WORD_OS_HOMONYM_NR_PKEY, Keys.WORD_OS_HOMONYM_NR_WORD_ID_KEY);
    }

    @Override
    public List<ForeignKey<WordOsHomonymNrRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordOsHomonymNrRecord, ?>>asList(Keys.WORD_OS_HOMONYM_NR__WORD_OS_HOMONYM_NR_WORD_ID_FKEY);
    }

    private transient Word _word;

    public Word word() {
        if (_word == null)
            _word = new Word(this, Keys.WORD_OS_HOMONYM_NR__WORD_OS_HOMONYM_NR_WORD_ID_FKEY);

        return _word;
    }

    @Override
    public WordOsHomonymNr as(String alias) {
        return new WordOsHomonymNr(DSL.name(alias), this);
    }

    @Override
    public WordOsHomonymNr as(Name alias) {
        return new WordOsHomonymNr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordOsHomonymNr rename(String name) {
        return new WordOsHomonymNr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordOsHomonymNr rename(Name name) {
        return new WordOsHomonymNr(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
