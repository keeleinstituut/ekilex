/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.MeaningRelationRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeaningRelation extends TableImpl<MeaningRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.meaning_relation</code>
     */
    public static final MeaningRelation MEANING_RELATION = new MeaningRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeaningRelationRecord> getRecordType() {
        return MeaningRelationRecord.class;
    }

    /**
     * The column <code>public.meaning_relation.id</code>.
     */
    public final TableField<MeaningRelationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.meaning_relation.meaning1_id</code>.
     */
    public final TableField<MeaningRelationRecord, Long> MEANING1_ID = createField(DSL.name("meaning1_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.meaning_relation.meaning2_id</code>.
     */
    public final TableField<MeaningRelationRecord, Long> MEANING2_ID = createField(DSL.name("meaning2_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.meaning_relation.meaning_rel_type_code</code>.
     */
    public final TableField<MeaningRelationRecord, String> MEANING_REL_TYPE_CODE = createField(DSL.name("meaning_rel_type_code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.meaning_relation.order_by</code>.
     */
    public final TableField<MeaningRelationRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.meaning_relation.weight</code>.
     */
    public final TableField<MeaningRelationRecord, BigDecimal> WEIGHT = createField(DSL.name("weight"), SQLDataType.NUMERIC(5, 4), this, "");

    private MeaningRelation(Name alias, Table<MeaningRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private MeaningRelation(Name alias, Table<MeaningRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.meaning_relation</code> table reference
     */
    public MeaningRelation(String alias) {
        this(DSL.name(alias), MEANING_RELATION);
    }

    /**
     * Create an aliased <code>public.meaning_relation</code> table reference
     */
    public MeaningRelation(Name alias) {
        this(alias, MEANING_RELATION);
    }

    /**
     * Create a <code>public.meaning_relation</code> table reference
     */
    public MeaningRelation() {
        this(DSL.name("meaning_relation"), null);
    }

    public <O extends Record> MeaningRelation(Table<O> child, ForeignKey<O, MeaningRelationRecord> key) {
        super(child, key, MEANING_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MeaningRelationRecord, Long> getIdentity() {
        return (Identity<MeaningRelationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeaningRelationRecord> getPrimaryKey() {
        return Keys.MEANING_RELATION_PKEY;
    }

    @Override
    public List<UniqueKey<MeaningRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<MeaningRelationRecord>>asList(Keys.MEANING_RELATION_PKEY, Keys.MEANING_RELATION_MEANING1_ID_MEANING2_ID_MEANING_REL_TYPE_C_KEY);
    }

    @Override
    public List<ForeignKey<MeaningRelationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MeaningRelationRecord, ?>>asList(Keys.MEANING_RELATION__MEANING_RELATION_MEANING1_ID_FKEY, Keys.MEANING_RELATION__MEANING_RELATION_MEANING2_ID_FKEY, Keys.MEANING_RELATION__MEANING_RELATION_MEANING_REL_TYPE_CODE_FKEY);
    }

    private transient Meaning _meaningRelationMeaning1IdFkey;
    private transient Meaning _meaningRelationMeaning2IdFkey;
    private transient MeaningRelType _meaningRelType;

    public Meaning meaningRelationMeaning1IdFkey() {
        if (_meaningRelationMeaning1IdFkey == null)
            _meaningRelationMeaning1IdFkey = new Meaning(this, Keys.MEANING_RELATION__MEANING_RELATION_MEANING1_ID_FKEY);

        return _meaningRelationMeaning1IdFkey;
    }

    public Meaning meaningRelationMeaning2IdFkey() {
        if (_meaningRelationMeaning2IdFkey == null)
            _meaningRelationMeaning2IdFkey = new Meaning(this, Keys.MEANING_RELATION__MEANING_RELATION_MEANING2_ID_FKEY);

        return _meaningRelationMeaning2IdFkey;
    }

    public MeaningRelType meaningRelType() {
        if (_meaningRelType == null)
            _meaningRelType = new MeaningRelType(this, Keys.MEANING_RELATION__MEANING_RELATION_MEANING_REL_TYPE_CODE_FKEY);

        return _meaningRelType;
    }

    @Override
    public MeaningRelation as(String alias) {
        return new MeaningRelation(DSL.name(alias), this);
    }

    @Override
    public MeaningRelation as(Name alias) {
        return new MeaningRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MeaningRelation rename(String name) {
        return new MeaningRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MeaningRelation rename(Name name) {
        return new MeaningRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, String, Long, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
