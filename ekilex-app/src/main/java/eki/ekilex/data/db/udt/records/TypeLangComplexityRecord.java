/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt.records;


import eki.ekilex.data.db.udt.TypeLangComplexity;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeLangComplexityRecord extends UDTRecordImpl<TypeLangComplexityRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.type_lang_complexity.lang</code>.
     */
    public void setLang(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.type_lang_complexity.lang</code>.
     */
    public String getLang() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.type_lang_complexity.dataset_code</code>.
     */
    public void setDatasetCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.type_lang_complexity.dataset_code</code>.
     */
    public String getDatasetCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.type_lang_complexity.lex_complexity</code>.
     */
    public void setLexComplexity(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.type_lang_complexity.lex_complexity</code>.
     */
    public String getLexComplexity() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.type_lang_complexity.data_complexity</code>.
     */
    public void setDataComplexity(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.type_lang_complexity.data_complexity</code>.
     */
    public String getDataComplexity() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TypeLangComplexity.LANG;
    }

    @Override
    public Field<String> field2() {
        return TypeLangComplexity.DATASET_CODE;
    }

    @Override
    public Field<String> field3() {
        return TypeLangComplexity.LEX_COMPLEXITY;
    }

    @Override
    public Field<String> field4() {
        return TypeLangComplexity.DATA_COMPLEXITY;
    }

    @Override
    public String component1() {
        return getLang();
    }

    @Override
    public String component2() {
        return getDatasetCode();
    }

    @Override
    public String component3() {
        return getLexComplexity();
    }

    @Override
    public String component4() {
        return getDataComplexity();
    }

    @Override
    public String value1() {
        return getLang();
    }

    @Override
    public String value2() {
        return getDatasetCode();
    }

    @Override
    public String value3() {
        return getLexComplexity();
    }

    @Override
    public String value4() {
        return getDataComplexity();
    }

    @Override
    public TypeLangComplexityRecord value1(String value) {
        setLang(value);
        return this;
    }

    @Override
    public TypeLangComplexityRecord value2(String value) {
        setDatasetCode(value);
        return this;
    }

    @Override
    public TypeLangComplexityRecord value3(String value) {
        setLexComplexity(value);
        return this;
    }

    @Override
    public TypeLangComplexityRecord value4(String value) {
        setDataComplexity(value);
        return this;
    }

    @Override
    public TypeLangComplexityRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypeLangComplexityRecord
     */
    public TypeLangComplexityRecord() {
        super(TypeLangComplexity.TYPE_LANG_COMPLEXITY);
    }

    /**
     * Create a detached, initialised TypeLangComplexityRecord
     */
    public TypeLangComplexityRecord(String lang, String datasetCode, String lexComplexity, String dataComplexity) {
        super(TypeLangComplexity.TYPE_LANG_COMPLEXITY);

        setLang(lang);
        setDatasetCode(datasetCode);
        setLexComplexity(lexComplexity);
        setDataComplexity(dataComplexity);
    }
}
