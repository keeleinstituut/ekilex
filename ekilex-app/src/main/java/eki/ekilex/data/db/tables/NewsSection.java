/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.NewsSectionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewsSection extends TableImpl<NewsSectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.news_section</code>
     */
    public static final NewsSection NEWS_SECTION = new NewsSection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewsSectionRecord> getRecordType() {
        return NewsSectionRecord.class;
    }

    /**
     * The column <code>public.news_section.id</code>.
     */
    public final TableField<NewsSectionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.news_section.news_article_id</code>.
     */
    public final TableField<NewsSectionRecord, Long> NEWS_ARTICLE_ID = createField(DSL.name("news_article_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.news_section.content</code>.
     */
    public final TableField<NewsSectionRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    private NewsSection(Name alias, Table<NewsSectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewsSection(Name alias, Table<NewsSectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.news_section</code> table reference
     */
    public NewsSection(String alias) {
        this(DSL.name(alias), NEWS_SECTION);
    }

    /**
     * Create an aliased <code>public.news_section</code> table reference
     */
    public NewsSection(Name alias) {
        this(alias, NEWS_SECTION);
    }

    /**
     * Create a <code>public.news_section</code> table reference
     */
    public NewsSection() {
        this(DSL.name("news_section"), null);
    }

    public <O extends Record> NewsSection(Table<O> child, ForeignKey<O, NewsSectionRecord> key) {
        super(child, key, NEWS_SECTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<NewsSectionRecord, Long> getIdentity() {
        return (Identity<NewsSectionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewsSectionRecord> getPrimaryKey() {
        return Keys.NEWS_SECTION_PKEY;
    }

    @Override
    public List<UniqueKey<NewsSectionRecord>> getKeys() {
        return Arrays.<UniqueKey<NewsSectionRecord>>asList(Keys.NEWS_SECTION_PKEY);
    }

    @Override
    public List<ForeignKey<NewsSectionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NewsSectionRecord, ?>>asList(Keys.NEWS_SECTION__NEWS_SECTION_NEWS_ARTICLE_ID_FKEY);
    }

    private transient NewsArticle _newsArticle;

    public NewsArticle newsArticle() {
        if (_newsArticle == null)
            _newsArticle = new NewsArticle(this, Keys.NEWS_SECTION__NEWS_SECTION_NEWS_ARTICLE_ID_FKEY);

        return _newsArticle;
    }

    @Override
    public NewsSection as(String alias) {
        return new NewsSection(DSL.name(alias), this);
    }

    @Override
    public NewsSection as(Name alias) {
        return new NewsSection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsSection rename(String name) {
        return new NewsSection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsSection rename(Name name) {
        return new NewsSection(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
