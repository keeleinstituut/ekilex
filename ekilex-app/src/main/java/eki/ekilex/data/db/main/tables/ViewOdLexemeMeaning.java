/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewOdLexemeMeaningRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOdLexemeMeaning extends TableImpl<ViewOdLexemeMeaningRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_od_lexeme_meaning</code>
     */
    public static final ViewOdLexemeMeaning VIEW_OD_LEXEME_MEANING = new ViewOdLexemeMeaning();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOdLexemeMeaningRecord> getRecordType() {
        return ViewOdLexemeMeaningRecord.class;
    }

    /**
     * The column <code>public.view_od_lexeme_meaning.word_id</code>.
     */
    public final TableField<ViewOdLexemeMeaningRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_od_lexeme_meaning.lexeme_id</code>.
     */
    public final TableField<ViewOdLexemeMeaningRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_od_lexeme_meaning.meaning_id</code>.
     */
    public final TableField<ViewOdLexemeMeaningRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_od_lexeme_meaning.value_state_code</code>.
     */
    public final TableField<ViewOdLexemeMeaningRecord, String> VALUE_STATE_CODE = createField(DSL.name("value_state_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.view_od_lexeme_meaning.register_codes</code>.
     */
    public final TableField<ViewOdLexemeMeaningRecord, String[]> REGISTER_CODES = createField(DSL.name("register_codes"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

    private ViewOdLexemeMeaning(Name alias, Table<ViewOdLexemeMeaningRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewOdLexemeMeaning(Name alias, Table<ViewOdLexemeMeaningRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_od_lexeme_meaning\" as  SELECT l.word_id,\n    l.id AS lexeme_id,\n    l.meaning_id,\n    l.value_state_code,\n    ( SELECT array_agg(lr.register_code) AS array_agg\n           FROM lexeme_register lr\n          WHERE (lr.lexeme_id = l.id)) AS register_codes\n   FROM lexeme l,\n    meaning m\n  WHERE ((l.meaning_id = m.id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text) AND (EXISTS ( SELECT 1\n           FROM word w\n          WHERE ((w.id = l.word_id) AND (w.lang = 'est'::bpchar)))) AND (EXISTS ( SELECT 1\n           FROM publishing p\n          WHERE (((p.target_name)::text = 'ww_od'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))))\n  ORDER BY l.id, m.id;"));
    }

    /**
     * Create an aliased <code>public.view_od_lexeme_meaning</code> table reference
     */
    public ViewOdLexemeMeaning(String alias) {
        this(DSL.name(alias), VIEW_OD_LEXEME_MEANING);
    }

    /**
     * Create an aliased <code>public.view_od_lexeme_meaning</code> table reference
     */
    public ViewOdLexemeMeaning(Name alias) {
        this(alias, VIEW_OD_LEXEME_MEANING);
    }

    /**
     * Create a <code>public.view_od_lexeme_meaning</code> table reference
     */
    public ViewOdLexemeMeaning() {
        this(DSL.name("view_od_lexeme_meaning"), null);
    }

    public <O extends Record> ViewOdLexemeMeaning(Table<O> child, ForeignKey<O, ViewOdLexemeMeaningRecord> key) {
        super(child, key, VIEW_OD_LEXEME_MEANING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewOdLexemeMeaning as(String alias) {
        return new ViewOdLexemeMeaning(DSL.name(alias), this);
    }

    @Override
    public ViewOdLexemeMeaning as(Name alias) {
        return new ViewOdLexemeMeaning(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOdLexemeMeaning rename(String name) {
        return new ViewOdLexemeMeaning(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOdLexemeMeaning rename(Name name) {
        return new ViewOdLexemeMeaning(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, String, String[]> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
