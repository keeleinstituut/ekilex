/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables.records;


import eki.ekilex.data.db.main.tables.Definition;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefinitionRecord extends UpdatableRecordImpl<DefinitionRecord> implements Record8<Long, Long, String, String, String, String, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.definition.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.definition.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.definition.meaning_id</code>.
     */
    public void setMeaningId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.definition.meaning_id</code>.
     */
    public Long getMeaningId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.definition.definition_type_code</code>.
     */
    public void setDefinitionTypeCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.definition.definition_type_code</code>.
     */
    public String getDefinitionTypeCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.definition.value</code>.
     */
    public void setValue(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.definition.value</code>.
     */
    public String getValue() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.definition.value_prese</code>.
     */
    public void setValuePrese(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.definition.value_prese</code>.
     */
    public String getValuePrese() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.definition.lang</code>.
     */
    public void setLang(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.definition.lang</code>.
     */
    public String getLang() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.definition.order_by</code>.
     */
    public void setOrderBy(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.definition.order_by</code>.
     */
    public Long getOrderBy() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.definition.is_public</code>.
     */
    public void setIsPublic(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.definition.is_public</code>.
     */
    public Boolean getIsPublic() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, String, String, Long, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, String, String, String, String, Long, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Definition.DEFINITION.ID;
    }

    @Override
    public Field<Long> field2() {
        return Definition.DEFINITION.MEANING_ID;
    }

    @Override
    public Field<String> field3() {
        return Definition.DEFINITION.DEFINITION_TYPE_CODE;
    }

    @Override
    public Field<String> field4() {
        return Definition.DEFINITION.VALUE;
    }

    @Override
    public Field<String> field5() {
        return Definition.DEFINITION.VALUE_PRESE;
    }

    @Override
    public Field<String> field6() {
        return Definition.DEFINITION.LANG;
    }

    @Override
    public Field<Long> field7() {
        return Definition.DEFINITION.ORDER_BY;
    }

    @Override
    public Field<Boolean> field8() {
        return Definition.DEFINITION.IS_PUBLIC;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getMeaningId();
    }

    @Override
    public String component3() {
        return getDefinitionTypeCode();
    }

    @Override
    public String component4() {
        return getValue();
    }

    @Override
    public String component5() {
        return getValuePrese();
    }

    @Override
    public String component6() {
        return getLang();
    }

    @Override
    public Long component7() {
        return getOrderBy();
    }

    @Override
    public Boolean component8() {
        return getIsPublic();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getMeaningId();
    }

    @Override
    public String value3() {
        return getDefinitionTypeCode();
    }

    @Override
    public String value4() {
        return getValue();
    }

    @Override
    public String value5() {
        return getValuePrese();
    }

    @Override
    public String value6() {
        return getLang();
    }

    @Override
    public Long value7() {
        return getOrderBy();
    }

    @Override
    public Boolean value8() {
        return getIsPublic();
    }

    @Override
    public DefinitionRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DefinitionRecord value2(Long value) {
        setMeaningId(value);
        return this;
    }

    @Override
    public DefinitionRecord value3(String value) {
        setDefinitionTypeCode(value);
        return this;
    }

    @Override
    public DefinitionRecord value4(String value) {
        setValue(value);
        return this;
    }

    @Override
    public DefinitionRecord value5(String value) {
        setValuePrese(value);
        return this;
    }

    @Override
    public DefinitionRecord value6(String value) {
        setLang(value);
        return this;
    }

    @Override
    public DefinitionRecord value7(Long value) {
        setOrderBy(value);
        return this;
    }

    @Override
    public DefinitionRecord value8(Boolean value) {
        setIsPublic(value);
        return this;
    }

    @Override
    public DefinitionRecord values(Long value1, Long value2, String value3, String value4, String value5, String value6, Long value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DefinitionRecord
     */
    public DefinitionRecord() {
        super(Definition.DEFINITION);
    }

    /**
     * Create a detached, initialised DefinitionRecord
     */
    public DefinitionRecord(Long id, Long meaningId, String definitionTypeCode, String value, String valuePrese, String lang, Long orderBy, Boolean isPublic) {
        super(Definition.DEFINITION);

        setId(id);
        setMeaningId(meaningId);
        setDefinitionTypeCode(definitionTypeCode);
        setValue(value);
        setValuePrese(valuePrese);
        setLang(lang);
        setOrderBy(orderBy);
        setIsPublic(isPublic);
    }
}
