/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.DatasetFreeformTypeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetFreeformType extends TableImpl<DatasetFreeformTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dataset_freeform_type</code>
     */
    public static final DatasetFreeformType DATASET_FREEFORM_TYPE = new DatasetFreeformType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetFreeformTypeRecord> getRecordType() {
        return DatasetFreeformTypeRecord.class;
    }

    /**
     * The column <code>public.dataset_freeform_type.id</code>.
     */
    public final TableField<DatasetFreeformTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.dataset_freeform_type.dataset_code</code>.
     */
    public final TableField<DatasetFreeformTypeRecord, String> DATASET_CODE = createField(DSL.name("dataset_code"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.dataset_freeform_type.freeform_owner</code>.
     */
    public final TableField<DatasetFreeformTypeRecord, String> FREEFORM_OWNER = createField(DSL.name("freeform_owner"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.dataset_freeform_type.freeform_type_code</code>.
     */
    public final TableField<DatasetFreeformTypeRecord, String> FREEFORM_TYPE_CODE = createField(DSL.name("freeform_type_code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private DatasetFreeformType(Name alias, Table<DatasetFreeformTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatasetFreeformType(Name alias, Table<DatasetFreeformTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dataset_freeform_type</code> table reference
     */
    public DatasetFreeformType(String alias) {
        this(DSL.name(alias), DATASET_FREEFORM_TYPE);
    }

    /**
     * Create an aliased <code>public.dataset_freeform_type</code> table reference
     */
    public DatasetFreeformType(Name alias) {
        this(alias, DATASET_FREEFORM_TYPE);
    }

    /**
     * Create a <code>public.dataset_freeform_type</code> table reference
     */
    public DatasetFreeformType() {
        this(DSL.name("dataset_freeform_type"), null);
    }

    public <O extends Record> DatasetFreeformType(Table<O> child, ForeignKey<O, DatasetFreeformTypeRecord> key) {
        super(child, key, DATASET_FREEFORM_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DatasetFreeformTypeRecord, Long> getIdentity() {
        return (Identity<DatasetFreeformTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DatasetFreeformTypeRecord> getPrimaryKey() {
        return Keys.DATASET_FREEFORM_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<DatasetFreeformTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetFreeformTypeRecord>>asList(Keys.DATASET_FREEFORM_TYPE_PKEY, Keys.DATASET_FREEFORM_TYPE_DATASET_CODE_FREEFORM_OWNER_FREEFORM__KEY);
    }

    @Override
    public List<ForeignKey<DatasetFreeformTypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DatasetFreeformTypeRecord, ?>>asList(Keys.DATASET_FREEFORM_TYPE__DATASET_FREEFORM_TYPE_DATASET_CODE_FKEY, Keys.DATASET_FREEFORM_TYPE__DATASET_FREEFORM_TYPE_FREEFORM_TYPE_CODE_FKEY);
    }

    private transient Dataset _dataset;
    private transient FreeformType _freeformType;

    public Dataset dataset() {
        if (_dataset == null)
            _dataset = new Dataset(this, Keys.DATASET_FREEFORM_TYPE__DATASET_FREEFORM_TYPE_DATASET_CODE_FKEY);

        return _dataset;
    }

    public FreeformType freeformType() {
        if (_freeformType == null)
            _freeformType = new FreeformType(this, Keys.DATASET_FREEFORM_TYPE__DATASET_FREEFORM_TYPE_FREEFORM_TYPE_CODE_FKEY);

        return _freeformType;
    }

    @Override
    public DatasetFreeformType as(String alias) {
        return new DatasetFreeformType(DSL.name(alias), this);
    }

    @Override
    public DatasetFreeformType as(Name alias) {
        return new DatasetFreeformType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetFreeformType rename(String name) {
        return new DatasetFreeformType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatasetFreeformType rename(Name name) {
        return new DatasetFreeformType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
