/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables.records;


import eki.ekilex.data.db.main.tables.Form;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormRecord extends UpdatableRecordImpl<FormRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.form.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.form.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.form.morph_code</code>.
     */
    public void setMorphCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.form.morph_code</code>.
     */
    public String getMorphCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.form.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.form.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.form.value_prese</code>.
     */
    public void setValuePrese(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.form.value_prese</code>.
     */
    public String getValuePrese() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Form.FORM.ID;
    }

    @Override
    public Field<String> field2() {
        return Form.FORM.MORPH_CODE;
    }

    @Override
    public Field<String> field3() {
        return Form.FORM.VALUE;
    }

    @Override
    public Field<String> field4() {
        return Form.FORM.VALUE_PRESE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getMorphCode();
    }

    @Override
    public String component3() {
        return getValue();
    }

    @Override
    public String component4() {
        return getValuePrese();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getMorphCode();
    }

    @Override
    public String value3() {
        return getValue();
    }

    @Override
    public String value4() {
        return getValuePrese();
    }

    @Override
    public FormRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FormRecord value2(String value) {
        setMorphCode(value);
        return this;
    }

    @Override
    public FormRecord value3(String value) {
        setValue(value);
        return this;
    }

    @Override
    public FormRecord value4(String value) {
        setValuePrese(value);
        return this;
    }

    @Override
    public FormRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FormRecord
     */
    public FormRecord() {
        super(Form.FORM);
    }

    /**
     * Create a detached, initialised FormRecord
     */
    public FormRecord(Long id, String morphCode, String value, String valuePrese) {
        super(Form.FORM);

        setId(id);
        setMorphCode(morphCode);
        setValue(value);
        setValuePrese(valuePrese);
    }
}
