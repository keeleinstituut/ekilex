/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables.records;


import eki.ekilex.data.db.tables.ViewWwLexicalDecisionData;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwLexicalDecisionDataRecord extends TableRecordImpl<ViewWwLexicalDecisionDataRecord> implements Record3<String, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.view_ww_lexical_decision_data.word</code>.
     */
    public void setWord(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.view_ww_lexical_decision_data.word</code>.
     */
    public String getWord() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.view_ww_lexical_decision_data.lang</code>.
     */
    public void setLang(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.view_ww_lexical_decision_data.lang</code>.
     */
    public String getLang() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.view_ww_lexical_decision_data.is_word</code>.
     */
    public void setIsWord(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.view_ww_lexical_decision_data.is_word</code>.
     */
    public Boolean getIsWord() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ViewWwLexicalDecisionData.VIEW_WW_LEXICAL_DECISION_DATA.WORD;
    }

    @Override
    public Field<String> field2() {
        return ViewWwLexicalDecisionData.VIEW_WW_LEXICAL_DECISION_DATA.LANG;
    }

    @Override
    public Field<Boolean> field3() {
        return ViewWwLexicalDecisionData.VIEW_WW_LEXICAL_DECISION_DATA.IS_WORD;
    }

    @Override
    public String component1() {
        return getWord();
    }

    @Override
    public String component2() {
        return getLang();
    }

    @Override
    public Boolean component3() {
        return getIsWord();
    }

    @Override
    public String value1() {
        return getWord();
    }

    @Override
    public String value2() {
        return getLang();
    }

    @Override
    public Boolean value3() {
        return getIsWord();
    }

    @Override
    public ViewWwLexicalDecisionDataRecord value1(String value) {
        setWord(value);
        return this;
    }

    @Override
    public ViewWwLexicalDecisionDataRecord value2(String value) {
        setLang(value);
        return this;
    }

    @Override
    public ViewWwLexicalDecisionDataRecord value3(Boolean value) {
        setIsWord(value);
        return this;
    }

    @Override
    public ViewWwLexicalDecisionDataRecord values(String value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewWwLexicalDecisionDataRecord
     */
    public ViewWwLexicalDecisionDataRecord() {
        super(ViewWwLexicalDecisionData.VIEW_WW_LEXICAL_DECISION_DATA);
    }

    /**
     * Create a detached, initialised ViewWwLexicalDecisionDataRecord
     */
    public ViewWwLexicalDecisionDataRecord(String word, String lang, Boolean isWord) {
        super(ViewWwLexicalDecisionData.VIEW_WW_LEXICAL_DECISION_DATA);

        setWord(word);
        setLang(lang);
        setIsWord(isWord);
    }
}
