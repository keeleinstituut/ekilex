/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables.records;


import eki.ekilex.data.db.main.tables.Lexeme;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeRecord extends UpdatableRecordImpl<LexemeRecord> implements Record13<Long, Long, Long, String, Integer, Integer, String, String, Long, BigDecimal, Boolean, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.lexeme.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.lexeme.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.lexeme.word_id</code>.
     */
    public void setWordId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.lexeme.word_id</code>.
     */
    public Long getWordId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.lexeme.meaning_id</code>.
     */
    public void setMeaningId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.lexeme.meaning_id</code>.
     */
    public Long getMeaningId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.lexeme.dataset_code</code>.
     */
    public void setDatasetCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.lexeme.dataset_code</code>.
     */
    public String getDatasetCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.lexeme.level1</code>.
     */
    public void setLevel1(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.lexeme.level1</code>.
     */
    public Integer getLevel1() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.lexeme.level2</code>.
     */
    public void setLevel2(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.lexeme.level2</code>.
     */
    public Integer getLevel2() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.lexeme.value_state_code</code>.
     */
    public void setValueStateCode(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.lexeme.value_state_code</code>.
     */
    public String getValueStateCode() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.lexeme.complexity</code>.
     */
    public void setComplexity(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.lexeme.complexity</code>.
     */
    public String getComplexity() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.lexeme.order_by</code>.
     */
    public void setOrderBy(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.lexeme.order_by</code>.
     */
    public Long getOrderBy() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>public.lexeme.weight</code>.
     */
    public void setWeight(BigDecimal value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.lexeme.weight</code>.
     */
    public BigDecimal getWeight() {
        return (BigDecimal) get(9);
    }

    /**
     * Setter for <code>public.lexeme.is_public</code>.
     */
    public void setIsPublic(Boolean value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.lexeme.is_public</code>.
     */
    public Boolean getIsPublic() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>public.lexeme.reliability</code>.
     */
    public void setReliability(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.lexeme.reliability</code>.
     */
    public Integer getReliability() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>public.lexeme.proficiency_level_code</code>.
     */
    public void setProficiencyLevelCode(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.lexeme.proficiency_level_code</code>.
     */
    public String getProficiencyLevelCode() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Long, String, Integer, Integer, String, String, Long, BigDecimal, Boolean, Integer, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Long, Long, Long, String, Integer, Integer, String, String, Long, BigDecimal, Boolean, Integer, String> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Lexeme.LEXEME.ID;
    }

    @Override
    public Field<Long> field2() {
        return Lexeme.LEXEME.WORD_ID;
    }

    @Override
    public Field<Long> field3() {
        return Lexeme.LEXEME.MEANING_ID;
    }

    @Override
    public Field<String> field4() {
        return Lexeme.LEXEME.DATASET_CODE;
    }

    @Override
    public Field<Integer> field5() {
        return Lexeme.LEXEME.LEVEL1;
    }

    @Override
    public Field<Integer> field6() {
        return Lexeme.LEXEME.LEVEL2;
    }

    @Override
    public Field<String> field7() {
        return Lexeme.LEXEME.VALUE_STATE_CODE;
    }

    @Override
    public Field<String> field8() {
        return Lexeme.LEXEME.COMPLEXITY;
    }

    @Override
    public Field<Long> field9() {
        return Lexeme.LEXEME.ORDER_BY;
    }

    @Override
    public Field<BigDecimal> field10() {
        return Lexeme.LEXEME.WEIGHT;
    }

    @Override
    public Field<Boolean> field11() {
        return Lexeme.LEXEME.IS_PUBLIC;
    }

    @Override
    public Field<Integer> field12() {
        return Lexeme.LEXEME.RELIABILITY;
    }

    @Override
    public Field<String> field13() {
        return Lexeme.LEXEME.PROFICIENCY_LEVEL_CODE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getWordId();
    }

    @Override
    public Long component3() {
        return getMeaningId();
    }

    @Override
    public String component4() {
        return getDatasetCode();
    }

    @Override
    public Integer component5() {
        return getLevel1();
    }

    @Override
    public Integer component6() {
        return getLevel2();
    }

    @Override
    public String component7() {
        return getValueStateCode();
    }

    @Override
    public String component8() {
        return getComplexity();
    }

    @Override
    public Long component9() {
        return getOrderBy();
    }

    @Override
    public BigDecimal component10() {
        return getWeight();
    }

    @Override
    public Boolean component11() {
        return getIsPublic();
    }

    @Override
    public Integer component12() {
        return getReliability();
    }

    @Override
    public String component13() {
        return getProficiencyLevelCode();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getWordId();
    }

    @Override
    public Long value3() {
        return getMeaningId();
    }

    @Override
    public String value4() {
        return getDatasetCode();
    }

    @Override
    public Integer value5() {
        return getLevel1();
    }

    @Override
    public Integer value6() {
        return getLevel2();
    }

    @Override
    public String value7() {
        return getValueStateCode();
    }

    @Override
    public String value8() {
        return getComplexity();
    }

    @Override
    public Long value9() {
        return getOrderBy();
    }

    @Override
    public BigDecimal value10() {
        return getWeight();
    }

    @Override
    public Boolean value11() {
        return getIsPublic();
    }

    @Override
    public Integer value12() {
        return getReliability();
    }

    @Override
    public String value13() {
        return getProficiencyLevelCode();
    }

    @Override
    public LexemeRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public LexemeRecord value2(Long value) {
        setWordId(value);
        return this;
    }

    @Override
    public LexemeRecord value3(Long value) {
        setMeaningId(value);
        return this;
    }

    @Override
    public LexemeRecord value4(String value) {
        setDatasetCode(value);
        return this;
    }

    @Override
    public LexemeRecord value5(Integer value) {
        setLevel1(value);
        return this;
    }

    @Override
    public LexemeRecord value6(Integer value) {
        setLevel2(value);
        return this;
    }

    @Override
    public LexemeRecord value7(String value) {
        setValueStateCode(value);
        return this;
    }

    @Override
    public LexemeRecord value8(String value) {
        setComplexity(value);
        return this;
    }

    @Override
    public LexemeRecord value9(Long value) {
        setOrderBy(value);
        return this;
    }

    @Override
    public LexemeRecord value10(BigDecimal value) {
        setWeight(value);
        return this;
    }

    @Override
    public LexemeRecord value11(Boolean value) {
        setIsPublic(value);
        return this;
    }

    @Override
    public LexemeRecord value12(Integer value) {
        setReliability(value);
        return this;
    }

    @Override
    public LexemeRecord value13(String value) {
        setProficiencyLevelCode(value);
        return this;
    }

    @Override
    public LexemeRecord values(Long value1, Long value2, Long value3, String value4, Integer value5, Integer value6, String value7, String value8, Long value9, BigDecimal value10, Boolean value11, Integer value12, String value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LexemeRecord
     */
    public LexemeRecord() {
        super(Lexeme.LEXEME);
    }

    /**
     * Create a detached, initialised LexemeRecord
     */
    public LexemeRecord(Long id, Long wordId, Long meaningId, String datasetCode, Integer level1, Integer level2, String valueStateCode, String complexity, Long orderBy, BigDecimal weight, Boolean isPublic, Integer reliability, String proficiencyLevelCode) {
        super(Lexeme.LEXEME);

        setId(id);
        setWordId(wordId);
        setMeaningId(meaningId);
        setDatasetCode(datasetCode);
        setLevel1(level1);
        setLevel2(level2);
        setValueStateCode(valueStateCode);
        setComplexity(complexity);
        setOrderBy(orderBy);
        setWeight(weight);
        setIsPublic(isPublic);
        setReliability(reliability);
        setProficiencyLevelCode(proficiencyLevelCode);
    }
}
