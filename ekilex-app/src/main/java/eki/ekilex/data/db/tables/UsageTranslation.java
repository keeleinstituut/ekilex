/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.UsageTranslationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsageTranslation extends TableImpl<UsageTranslationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.usage_translation</code>
     */
    public static final UsageTranslation USAGE_TRANSLATION = new UsageTranslation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsageTranslationRecord> getRecordType() {
        return UsageTranslationRecord.class;
    }

    /**
     * The column <code>public.usage_translation.id</code>.
     */
    public final TableField<UsageTranslationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.usage_translation.original_freeform_id</code>.
     */
    public final TableField<UsageTranslationRecord, Long> ORIGINAL_FREEFORM_ID = createField(DSL.name("original_freeform_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.usage_translation.usage_id</code>.
     */
    public final TableField<UsageTranslationRecord, Long> USAGE_ID = createField(DSL.name("usage_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.usage_translation.value</code>.
     */
    public final TableField<UsageTranslationRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.usage_translation.value_prese</code>.
     */
    public final TableField<UsageTranslationRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.usage_translation.lang</code>.
     */
    public final TableField<UsageTranslationRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.usage_translation.created_by</code>.
     */
    public final TableField<UsageTranslationRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.usage_translation.created_on</code>.
     */
    public final TableField<UsageTranslationRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.usage_translation.modified_by</code>.
     */
    public final TableField<UsageTranslationRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.usage_translation.modified_on</code>.
     */
    public final TableField<UsageTranslationRecord, Timestamp> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.usage_translation.order_by</code>.
     */
    public final TableField<UsageTranslationRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private UsageTranslation(Name alias, Table<UsageTranslationRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsageTranslation(Name alias, Table<UsageTranslationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.usage_translation</code> table reference
     */
    public UsageTranslation(String alias) {
        this(DSL.name(alias), USAGE_TRANSLATION);
    }

    /**
     * Create an aliased <code>public.usage_translation</code> table reference
     */
    public UsageTranslation(Name alias) {
        this(alias, USAGE_TRANSLATION);
    }

    /**
     * Create a <code>public.usage_translation</code> table reference
     */
    public UsageTranslation() {
        this(DSL.name("usage_translation"), null);
    }

    public <O extends Record> UsageTranslation(Table<O> child, ForeignKey<O, UsageTranslationRecord> key) {
        super(child, key, USAGE_TRANSLATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UsageTranslationRecord, Long> getIdentity() {
        return (Identity<UsageTranslationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsageTranslationRecord> getPrimaryKey() {
        return Keys.USAGE_TRANSLATION_PKEY;
    }

    @Override
    public List<UniqueKey<UsageTranslationRecord>> getKeys() {
        return Arrays.<UniqueKey<UsageTranslationRecord>>asList(Keys.USAGE_TRANSLATION_PKEY);
    }

    @Override
    public List<ForeignKey<UsageTranslationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsageTranslationRecord, ?>>asList(Keys.USAGE_TRANSLATION__USAGE_TRANSLATION_USAGE_ID_FKEY, Keys.USAGE_TRANSLATION__USAGE_TRANSLATION_LANG_FKEY);
    }

    private transient Usage _usage;
    private transient Language _language;

    public Usage usage() {
        if (_usage == null)
            _usage = new Usage(this, Keys.USAGE_TRANSLATION__USAGE_TRANSLATION_USAGE_ID_FKEY);

        return _usage;
    }

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.USAGE_TRANSLATION__USAGE_TRANSLATION_LANG_FKEY);

        return _language;
    }

    @Override
    public UsageTranslation as(String alias) {
        return new UsageTranslation(DSL.name(alias), this);
    }

    @Override
    public UsageTranslation as(Name alias) {
        return new UsageTranslation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageTranslation rename(String name) {
        return new UsageTranslation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageTranslation rename(Name name) {
        return new UsageTranslation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, String, String, String, String, Timestamp, String, Timestamp, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
