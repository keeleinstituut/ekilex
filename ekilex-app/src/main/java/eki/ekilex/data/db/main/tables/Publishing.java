/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.PublishingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publishing extends TableImpl<PublishingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.publishing</code>
     */
    public static final Publishing PUBLISHING = new Publishing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublishingRecord> getRecordType() {
        return PublishingRecord.class;
    }

    /**
     * The column <code>public.publishing.id</code>.
     */
    public final TableField<PublishingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.publishing.event_by</code>.
     */
    public final TableField<PublishingRecord, String> EVENT_BY = createField(DSL.name("event_by"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.publishing.event_on</code>.
     */
    public final TableField<PublishingRecord, LocalDateTime> EVENT_ON = createField(DSL.name("event_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.publishing.target_name</code>.
     */
    public final TableField<PublishingRecord, String> TARGET_NAME = createField(DSL.name("target_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.publishing.entity_name</code>.
     */
    public final TableField<PublishingRecord, String> ENTITY_NAME = createField(DSL.name("entity_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.publishing.entity_id</code>.
     */
    public final TableField<PublishingRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Publishing(Name alias, Table<PublishingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publishing(Name alias, Table<PublishingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.publishing</code> table reference
     */
    public Publishing(String alias) {
        this(DSL.name(alias), PUBLISHING);
    }

    /**
     * Create an aliased <code>public.publishing</code> table reference
     */
    public Publishing(Name alias) {
        this(alias, PUBLISHING);
    }

    /**
     * Create a <code>public.publishing</code> table reference
     */
    public Publishing() {
        this(DSL.name("publishing"), null);
    }

    public <O extends Record> Publishing(Table<O> child, ForeignKey<O, PublishingRecord> key) {
        super(child, key, PUBLISHING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PublishingRecord, Long> getIdentity() {
        return (Identity<PublishingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PublishingRecord> getPrimaryKey() {
        return Keys.PUBLISHING_PKEY;
    }

    @Override
    public List<UniqueKey<PublishingRecord>> getKeys() {
        return Arrays.<UniqueKey<PublishingRecord>>asList(Keys.PUBLISHING_PKEY, Keys.PUBLISHING_TARGET_NAME_ENTITY_NAME_ENTITY_ID_KEY);
    }

    @Override
    public Publishing as(String alias) {
        return new Publishing(DSL.name(alias), this);
    }

    @Override
    public Publishing as(Name alias) {
        return new Publishing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publishing rename(String name) {
        return new Publishing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publishing rename(Name name) {
        return new Publishing(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, LocalDateTime, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
