/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ProficiencyLevelLabelRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProficiencyLevelLabel extends TableImpl<ProficiencyLevelLabelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.proficiency_level_label</code>
     */
    public static final ProficiencyLevelLabel PROFICIENCY_LEVEL_LABEL = new ProficiencyLevelLabel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProficiencyLevelLabelRecord> getRecordType() {
        return ProficiencyLevelLabelRecord.class;
    }

    /**
     * The column <code>public.proficiency_level_label.code</code>.
     */
    public final TableField<ProficiencyLevelLabelRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.proficiency_level_label.value</code>.
     */
    public final TableField<ProficiencyLevelLabelRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.proficiency_level_label.lang</code>.
     */
    public final TableField<ProficiencyLevelLabelRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.proficiency_level_label.type</code>.
     */
    public final TableField<ProficiencyLevelLabelRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private ProficiencyLevelLabel(Name alias, Table<ProficiencyLevelLabelRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProficiencyLevelLabel(Name alias, Table<ProficiencyLevelLabelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.proficiency_level_label</code> table reference
     */
    public ProficiencyLevelLabel(String alias) {
        this(DSL.name(alias), PROFICIENCY_LEVEL_LABEL);
    }

    /**
     * Create an aliased <code>public.proficiency_level_label</code> table reference
     */
    public ProficiencyLevelLabel(Name alias) {
        this(alias, PROFICIENCY_LEVEL_LABEL);
    }

    /**
     * Create a <code>public.proficiency_level_label</code> table reference
     */
    public ProficiencyLevelLabel() {
        this(DSL.name("proficiency_level_label"), null);
    }

    public <O extends Record> ProficiencyLevelLabel(Table<O> child, ForeignKey<O, ProficiencyLevelLabelRecord> key) {
        super(child, key, PROFICIENCY_LEVEL_LABEL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<ProficiencyLevelLabelRecord>> getKeys() {
        return Arrays.<UniqueKey<ProficiencyLevelLabelRecord>>asList(Keys.PROFICIENCY_LEVEL_LABEL_CODE_LANG_TYPE_KEY);
    }

    @Override
    public List<ForeignKey<ProficiencyLevelLabelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProficiencyLevelLabelRecord, ?>>asList(Keys.PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_CODE_FKEY, Keys.PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_LANG_FKEY, Keys.PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_TYPE_FKEY);
    }

    private transient ProficiencyLevel _proficiencyLevel;
    private transient Language _language;
    private transient LabelType _labelType;

    public ProficiencyLevel proficiencyLevel() {
        if (_proficiencyLevel == null)
            _proficiencyLevel = new ProficiencyLevel(this, Keys.PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_CODE_FKEY);

        return _proficiencyLevel;
    }

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_LANG_FKEY);

        return _language;
    }

    public LabelType labelType() {
        if (_labelType == null)
            _labelType = new LabelType(this, Keys.PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_TYPE_FKEY);

        return _labelType;
    }

    @Override
    public ProficiencyLevelLabel as(String alias) {
        return new ProficiencyLevelLabel(DSL.name(alias), this);
    }

    @Override
    public ProficiencyLevelLabel as(Name alias) {
        return new ProficiencyLevelLabel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProficiencyLevelLabel rename(String name) {
        return new ProficiencyLevelLabel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProficiencyLevelLabel rename(Name name) {
        return new ProficiencyLevelLabel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
