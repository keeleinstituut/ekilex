/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.arch.tables;


import eki.ekilex.data.db.arch.Public;
import eki.ekilex.data.db.arch.tables.records.DblinkGetNotifyRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DblinkGetNotify extends TableImpl<DblinkGetNotifyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dblink_get_notify</code>
     */
    public static final DblinkGetNotify DBLINK_GET_NOTIFY = new DblinkGetNotify();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DblinkGetNotifyRecord> getRecordType() {
        return DblinkGetNotifyRecord.class;
    }

    /**
     * The column <code>public.dblink_get_notify.notify_name</code>.
     */
    public final TableField<DblinkGetNotifyRecord, String> NOTIFY_NAME = createField(DSL.name("notify_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dblink_get_notify.be_pid</code>.
     */
    public final TableField<DblinkGetNotifyRecord, Integer> BE_PID = createField(DSL.name("be_pid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dblink_get_notify.extra</code>.
     */
    public final TableField<DblinkGetNotifyRecord, String> EXTRA = createField(DSL.name("extra"), SQLDataType.CLOB, this, "");

    private DblinkGetNotify(Name alias, Table<DblinkGetNotifyRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private DblinkGetNotify(Name alias, Table<DblinkGetNotifyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.dblink_get_notify</code> table reference
     */
    public DblinkGetNotify(String alias) {
        this(DSL.name(alias), DBLINK_GET_NOTIFY);
    }

    /**
     * Create an aliased <code>public.dblink_get_notify</code> table reference
     */
    public DblinkGetNotify(Name alias) {
        this(alias, DBLINK_GET_NOTIFY);
    }

    /**
     * Create a <code>public.dblink_get_notify</code> table reference
     */
    public DblinkGetNotify() {
        this(DSL.name("dblink_get_notify"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public DblinkGetNotify as(String alias) {
        return new DblinkGetNotify(DSL.name(alias), this, parameters);
    }

    @Override
    public DblinkGetNotify as(Name alias) {
        return new DblinkGetNotify(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public DblinkGetNotify rename(String name) {
        return new DblinkGetNotify(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public DblinkGetNotify rename(Name name) {
        return new DblinkGetNotify(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public DblinkGetNotify call() {
        DblinkGetNotify result = new DblinkGetNotify(DSL.name("dblink_get_notify"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
