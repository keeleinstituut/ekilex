/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeDomainRecord;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeDomain extends UDTImpl<TypeDomainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.type_domain</code>
     */
    public static final TypeDomain TYPE_DOMAIN = new TypeDomain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeDomainRecord> getRecordType() {
        return TypeDomainRecord.class;
    }

    /**
     * The attribute <code>public.type_domain.origin</code>.
     */
    public static final UDTField<TypeDomainRecord, String> ORIGIN = createField(DSL.name("origin"), SQLDataType.VARCHAR(100), TYPE_DOMAIN, "");

    /**
     * The attribute <code>public.type_domain.code</code>.
     */
    public static final UDTField<TypeDomainRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(100), TYPE_DOMAIN, "");

    /**
     * No further instances allowed
     */
    private TypeDomain() {
        super("type_domain", null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
