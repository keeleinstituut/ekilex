/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.TempDsImportPkMapRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TempDsImportPkMap extends TableImpl<TempDsImportPkMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.temp_ds_import_pk_map</code>
     */
    public static final TempDsImportPkMap TEMP_DS_IMPORT_PK_MAP = new TempDsImportPkMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TempDsImportPkMapRecord> getRecordType() {
        return TempDsImportPkMapRecord.class;
    }

    /**
     * The column <code>public.temp_ds_import_pk_map.id</code>.
     */
    public final TableField<TempDsImportPkMapRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.import_code</code>.
     */
    public final TableField<TempDsImportPkMapRecord, String> IMPORT_CODE = createField(DSL.name("import_code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.created_on</code>.
     */
    public final TableField<TempDsImportPkMapRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.table_name</code>.
     */
    public final TableField<TempDsImportPkMapRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.source_pk</code>.
     */
    public final TableField<TempDsImportPkMapRecord, Long> SOURCE_PK = createField(DSL.name("source_pk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.target_pk</code>.
     */
    public final TableField<TempDsImportPkMapRecord, Long> TARGET_PK = createField(DSL.name("target_pk"), SQLDataType.BIGINT.nullable(false), this, "");

    private TempDsImportPkMap(Name alias, Table<TempDsImportPkMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private TempDsImportPkMap(Name alias, Table<TempDsImportPkMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.temp_ds_import_pk_map</code> table reference
     */
    public TempDsImportPkMap(String alias) {
        this(DSL.name(alias), TEMP_DS_IMPORT_PK_MAP);
    }

    /**
     * Create an aliased <code>public.temp_ds_import_pk_map</code> table reference
     */
    public TempDsImportPkMap(Name alias) {
        this(alias, TEMP_DS_IMPORT_PK_MAP);
    }

    /**
     * Create a <code>public.temp_ds_import_pk_map</code> table reference
     */
    public TempDsImportPkMap() {
        this(DSL.name("temp_ds_import_pk_map"), null);
    }

    public <O extends Record> TempDsImportPkMap(Table<O> child, ForeignKey<O, TempDsImportPkMapRecord> key) {
        super(child, key, TEMP_DS_IMPORT_PK_MAP);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TempDsImportPkMapRecord, Long> getIdentity() {
        return (Identity<TempDsImportPkMapRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TempDsImportPkMapRecord> getPrimaryKey() {
        return Keys.TEMP_DS_IMPORT_PK_MAP_PKEY;
    }

    @Override
    public List<UniqueKey<TempDsImportPkMapRecord>> getKeys() {
        return Arrays.<UniqueKey<TempDsImportPkMapRecord>>asList(Keys.TEMP_DS_IMPORT_PK_MAP_PKEY);
    }

    @Override
    public TempDsImportPkMap as(String alias) {
        return new TempDsImportPkMap(DSL.name(alias), this);
    }

    @Override
    public TempDsImportPkMap as(Name alias) {
        return new TempDsImportPkMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TempDsImportPkMap rename(String name) {
        return new TempDsImportPkMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TempDsImportPkMap rename(Name name) {
        return new TempDsImportPkMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, LocalDateTime, String, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
