/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables.records;


import eki.ekilex.data.db.main.tables.ViewOsLexemeMeaning;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOsLexemeMeaningRecord extends TableRecordImpl<ViewOsLexemeMeaningRecord> implements Record2<Long, JSON> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.view_os_lexeme_meaning.word_id</code>.
     */
    public void setWordId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.view_os_lexeme_meaning.word_id</code>.
     */
    public Long getWordId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.view_os_lexeme_meaning.lexeme_meanings</code>.
     */
    public void setLexemeMeanings(JSON value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.view_os_lexeme_meaning.lexeme_meanings</code>.
     */
    public JSON getLexemeMeanings() {
        return (JSON) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, JSON> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ViewOsLexemeMeaning.VIEW_OS_LEXEME_MEANING.WORD_ID;
    }

    @Override
    public Field<JSON> field2() {
        return ViewOsLexemeMeaning.VIEW_OS_LEXEME_MEANING.LEXEME_MEANINGS;
    }

    @Override
    public Long component1() {
        return getWordId();
    }

    @Override
    public JSON component2() {
        return getLexemeMeanings();
    }

    @Override
    public Long value1() {
        return getWordId();
    }

    @Override
    public JSON value2() {
        return getLexemeMeanings();
    }

    @Override
    public ViewOsLexemeMeaningRecord value1(Long value) {
        setWordId(value);
        return this;
    }

    @Override
    public ViewOsLexemeMeaningRecord value2(JSON value) {
        setLexemeMeanings(value);
        return this;
    }

    @Override
    public ViewOsLexemeMeaningRecord values(Long value1, JSON value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewOsLexemeMeaningRecord
     */
    public ViewOsLexemeMeaningRecord() {
        super(ViewOsLexemeMeaning.VIEW_OS_LEXEME_MEANING);
    }

    /**
     * Create a detached, initialised ViewOsLexemeMeaningRecord
     */
    public ViewOsLexemeMeaningRecord(Long wordId, JSON lexemeMeanings) {
        super(ViewOsLexemeMeaning.VIEW_OS_LEXEME_MEANING);

        setWordId(wordId);
        setLexemeMeanings(lexemeMeanings);
    }
}
