/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.LexemeNoteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeNote extends TableImpl<LexemeNoteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lexeme_note</code>
     */
    public static final LexemeNote LEXEME_NOTE = new LexemeNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemeNoteRecord> getRecordType() {
        return LexemeNoteRecord.class;
    }

    /**
     * The column <code>public.lexeme_note.id</code>.
     */
    public final TableField<LexemeNoteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lexeme_note.original_freeform_id</code>.
     */
    public final TableField<LexemeNoteRecord, Long> ORIGINAL_FREEFORM_ID = createField(DSL.name("original_freeform_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lexeme_note.lexeme_id</code>.
     */
    public final TableField<LexemeNoteRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_note.value</code>.
     */
    public final TableField<LexemeNoteRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_note.value_prese</code>.
     */
    public final TableField<LexemeNoteRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_note.lang</code>.
     */
    public final TableField<LexemeNoteRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.lexeme_note.complexity</code>.
     */
    public final TableField<LexemeNoteRecord, String> COMPLEXITY = createField(DSL.name("complexity"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.lexeme_note.is_public</code>.
     */
    public final TableField<LexemeNoteRecord, Boolean> IS_PUBLIC = createField(DSL.name("is_public"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.lexeme_note.created_by</code>.
     */
    public final TableField<LexemeNoteRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lexeme_note.created_on</code>.
     */
    public final TableField<LexemeNoteRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.lexeme_note.modified_by</code>.
     */
    public final TableField<LexemeNoteRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lexeme_note.modified_on</code>.
     */
    public final TableField<LexemeNoteRecord, Timestamp> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.lexeme_note.order_by</code>.
     */
    public final TableField<LexemeNoteRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private LexemeNote(Name alias, Table<LexemeNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexemeNote(Name alias, Table<LexemeNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lexeme_note</code> table reference
     */
    public LexemeNote(String alias) {
        this(DSL.name(alias), LEXEME_NOTE);
    }

    /**
     * Create an aliased <code>public.lexeme_note</code> table reference
     */
    public LexemeNote(Name alias) {
        this(alias, LEXEME_NOTE);
    }

    /**
     * Create a <code>public.lexeme_note</code> table reference
     */
    public LexemeNote() {
        this(DSL.name("lexeme_note"), null);
    }

    public <O extends Record> LexemeNote(Table<O> child, ForeignKey<O, LexemeNoteRecord> key) {
        super(child, key, LEXEME_NOTE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LexemeNoteRecord, Long> getIdentity() {
        return (Identity<LexemeNoteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LexemeNoteRecord> getPrimaryKey() {
        return Keys.LEXEME_NOTE_PKEY;
    }

    @Override
    public List<UniqueKey<LexemeNoteRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemeNoteRecord>>asList(Keys.LEXEME_NOTE_PKEY);
    }

    @Override
    public List<ForeignKey<LexemeNoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemeNoteRecord, ?>>asList(Keys.LEXEME_NOTE__LEXEME_NOTE_ORIGINAL_FREEFORM_ID_FKEY, Keys.LEXEME_NOTE__LEXEME_NOTE_LEXEME_ID_FKEY, Keys.LEXEME_NOTE__LEXEME_NOTE_LANG_FKEY);
    }

    private transient Freeform _freeform;
    private transient Lexeme _lexeme;
    private transient Language _language;

    public Freeform freeform() {
        if (_freeform == null)
            _freeform = new Freeform(this, Keys.LEXEME_NOTE__LEXEME_NOTE_ORIGINAL_FREEFORM_ID_FKEY);

        return _freeform;
    }

    public Lexeme lexeme() {
        if (_lexeme == null)
            _lexeme = new Lexeme(this, Keys.LEXEME_NOTE__LEXEME_NOTE_LEXEME_ID_FKEY);

        return _lexeme;
    }

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.LEXEME_NOTE__LEXEME_NOTE_LANG_FKEY);

        return _language;
    }

    @Override
    public LexemeNote as(String alias) {
        return new LexemeNote(DSL.name(alias), this);
    }

    @Override
    public LexemeNote as(Name alias) {
        return new LexemeNote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeNote rename(String name) {
        return new LexemeNote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeNote rename(Name name) {
        return new LexemeNote(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Long, String, String, String, String, Boolean, String, Timestamp, String, Timestamp, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
