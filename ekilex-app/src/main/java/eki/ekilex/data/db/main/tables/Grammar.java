/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.GrammarRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Grammar extends TableImpl<GrammarRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.grammar</code>
     */
    public static final Grammar GRAMMAR = new Grammar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GrammarRecord> getRecordType() {
        return GrammarRecord.class;
    }

    /**
     * The column <code>public.grammar.id</code>.
     */
    public final TableField<GrammarRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.grammar.original_freeform_id</code>.
     */
    public final TableField<GrammarRecord, Long> ORIGINAL_FREEFORM_ID = createField(DSL.name("original_freeform_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.grammar.lexeme_id</code>.
     */
    public final TableField<GrammarRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.grammar.value</code>.
     */
    public final TableField<GrammarRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.grammar.value_prese</code>.
     */
    public final TableField<GrammarRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.grammar.lang</code>.
     */
    public final TableField<GrammarRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.grammar.created_by</code>.
     */
    public final TableField<GrammarRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.grammar.created_on</code>.
     */
    public final TableField<GrammarRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.grammar.modified_by</code>.
     */
    public final TableField<GrammarRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.grammar.modified_on</code>.
     */
    public final TableField<GrammarRecord, LocalDateTime> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.grammar.order_by</code>.
     */
    public final TableField<GrammarRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private Grammar(Name alias, Table<GrammarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Grammar(Name alias, Table<GrammarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.grammar</code> table reference
     */
    public Grammar(String alias) {
        this(DSL.name(alias), GRAMMAR);
    }

    /**
     * Create an aliased <code>public.grammar</code> table reference
     */
    public Grammar(Name alias) {
        this(alias, GRAMMAR);
    }

    /**
     * Create a <code>public.grammar</code> table reference
     */
    public Grammar() {
        this(DSL.name("grammar"), null);
    }

    public <O extends Record> Grammar(Table<O> child, ForeignKey<O, GrammarRecord> key) {
        super(child, key, GRAMMAR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<GrammarRecord, Long> getIdentity() {
        return (Identity<GrammarRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<GrammarRecord> getPrimaryKey() {
        return Keys.GRAMMAR_PKEY;
    }

    @Override
    public List<UniqueKey<GrammarRecord>> getKeys() {
        return Arrays.<UniqueKey<GrammarRecord>>asList(Keys.GRAMMAR_PKEY);
    }

    @Override
    public List<ForeignKey<GrammarRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GrammarRecord, ?>>asList(Keys.GRAMMAR__GRAMMAR_LEXEME_ID_FKEY, Keys.GRAMMAR__GRAMMAR_LANG_FKEY);
    }

    private transient Lexeme _lexeme;
    private transient Language _language;

    public Lexeme lexeme() {
        if (_lexeme == null)
            _lexeme = new Lexeme(this, Keys.GRAMMAR__GRAMMAR_LEXEME_ID_FKEY);

        return _lexeme;
    }

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.GRAMMAR__GRAMMAR_LANG_FKEY);

        return _language;
    }

    @Override
    public Grammar as(String alias) {
        return new Grammar(DSL.name(alias), this);
    }

    @Override
    public Grammar as(Name alias) {
        return new Grammar(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Grammar rename(String name) {
        return new Grammar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Grammar rename(Name name) {
        return new Grammar(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, String, String, String, String, LocalDateTime, String, LocalDateTime, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
