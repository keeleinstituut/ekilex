/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.EkiUserProfileRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EkiUserProfile extends TableImpl<EkiUserProfileRecord> {

    private static final long serialVersionUID = 128630028;

    /**
     * The reference instance of <code>public.eki_user_profile</code>
     */
    public static final EkiUserProfile EKI_USER_PROFILE = new EkiUserProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EkiUserProfileRecord> getRecordType() {
        return EkiUserProfileRecord.class;
    }

    /**
     * The column <code>public.eki_user_profile.id</code>.
     */
    public final TableField<EkiUserProfileRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('eki_user_profile_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.eki_user_profile.user_id</code>.
     */
    public final TableField<EkiUserProfileRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.eki_user_profile.recent_dataset_permission_id</code>.
     */
    public final TableField<EkiUserProfileRecord, Long> RECENT_DATASET_PERMISSION_ID = createField(DSL.name("recent_dataset_permission_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.eki_user_profile.preferred_datasets</code>.
     */
    public final TableField<EkiUserProfileRecord, String[]> PREFERRED_DATASETS = createField(DSL.name("preferred_datasets"), org.jooq.impl.SQLDataType.VARCHAR(10).getArrayDataType(), this, "");

    /**
     * The column <code>public.eki_user_profile.preferred_part_syn_candidate_langs</code>.
     */
    public final TableField<EkiUserProfileRecord, String[]> PREFERRED_PART_SYN_CANDIDATE_LANGS = createField(DSL.name("preferred_part_syn_candidate_langs"), org.jooq.impl.SQLDataType.CHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.eki_user_profile.preferred_syn_lex_meaning_word_langs</code>.
     */
    public final TableField<EkiUserProfileRecord, String[]> PREFERRED_SYN_LEX_MEANING_WORD_LANGS = createField(DSL.name("preferred_syn_lex_meaning_word_langs"), org.jooq.impl.SQLDataType.CHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.eki_user_profile.preferred_meaning_relation_word_langs</code>.
     */
    public final TableField<EkiUserProfileRecord, String[]> PREFERRED_MEANING_RELATION_WORD_LANGS = createField(DSL.name("preferred_meaning_relation_word_langs"), org.jooq.impl.SQLDataType.CHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.eki_user_profile.show_lex_meaning_relation_source_lang_words</code>.
     */
    public final TableField<EkiUserProfileRecord, Boolean> SHOW_LEX_MEANING_RELATION_SOURCE_LANG_WORDS = createField(DSL.name("show_lex_meaning_relation_source_lang_words"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.eki_user_profile.show_meaning_relation_first_word_only</code>.
     */
    public final TableField<EkiUserProfileRecord, Boolean> SHOW_MEANING_RELATION_FIRST_WORD_ONLY = createField(DSL.name("show_meaning_relation_first_word_only"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.eki_user_profile.show_meaning_relation_meaning_id</code>.
     */
    public final TableField<EkiUserProfileRecord, Boolean> SHOW_MEANING_RELATION_MEANING_ID = createField(DSL.name("show_meaning_relation_meaning_id"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.eki_user_profile.show_meaning_relation_word_datasets</code>.
     */
    public final TableField<EkiUserProfileRecord, Boolean> SHOW_MEANING_RELATION_WORD_DATASETS = createField(DSL.name("show_meaning_relation_word_datasets"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.eki_user_profile.preferred_tag_names</code>.
     */
    public final TableField<EkiUserProfileRecord, String[]> PREFERRED_TAG_NAMES = createField(DSL.name("preferred_tag_names"), org.jooq.impl.SQLDataType.VARCHAR(100).getArrayDataType(), this, "");

    /**
     * The column <code>public.eki_user_profile.active_tag_name</code>.
     */
    public final TableField<EkiUserProfileRecord, String> ACTIVE_TAG_NAME = createField(DSL.name("active_tag_name"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.eki_user_profile.is_approve_meaning_enabled</code>.
     */
    public final TableField<EkiUserProfileRecord, Boolean> IS_APPROVE_MEANING_ENABLED = createField(DSL.name("is_approve_meaning_enabled"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.eki_user_profile.preferred_full_syn_candidate_dataset_code</code>.
     */
    public final TableField<EkiUserProfileRecord, String> PREFERRED_FULL_SYN_CANDIDATE_DATASET_CODE = createField(DSL.name("preferred_full_syn_candidate_dataset_code"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.eki_user_profile.preferred_full_syn_candidate_lang</code>.
     */
    public final TableField<EkiUserProfileRecord, String> PREFERRED_FULL_SYN_CANDIDATE_LANG = createField(DSL.name("preferred_full_syn_candidate_lang"), org.jooq.impl.SQLDataType.CHAR(3), this, "");

    /**
     * Create a <code>public.eki_user_profile</code> table reference
     */
    public EkiUserProfile() {
        this(DSL.name("eki_user_profile"), null);
    }

    /**
     * Create an aliased <code>public.eki_user_profile</code> table reference
     */
    public EkiUserProfile(String alias) {
        this(DSL.name(alias), EKI_USER_PROFILE);
    }

    /**
     * Create an aliased <code>public.eki_user_profile</code> table reference
     */
    public EkiUserProfile(Name alias) {
        this(alias, EKI_USER_PROFILE);
    }

    private EkiUserProfile(Name alias, Table<EkiUserProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private EkiUserProfile(Name alias, Table<EkiUserProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EkiUserProfile(Table<O> child, ForeignKey<O, EkiUserProfileRecord> key) {
        super(child, key, EKI_USER_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EKI_USER_PROFILE_RECENT_DATASET_PERMISSION_ID_IDX, Indexes.EKI_USER_PROFILE_USER_ID_IDX);
    }

    @Override
    public Identity<EkiUserProfileRecord, Long> getIdentity() {
        return Keys.IDENTITY_EKI_USER_PROFILE;
    }

    @Override
    public UniqueKey<EkiUserProfileRecord> getPrimaryKey() {
        return Keys.EKI_USER_PROFILE_PKEY;
    }

    @Override
    public List<UniqueKey<EkiUserProfileRecord>> getKeys() {
        return Arrays.<UniqueKey<EkiUserProfileRecord>>asList(Keys.EKI_USER_PROFILE_PKEY);
    }

    @Override
    public List<ForeignKey<EkiUserProfileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EkiUserProfileRecord, ?>>asList(Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_USER_ID_FKEY, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_RECENT_DATASET_PERMISSION_ID_FKEY, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_ACTIVE_TAG_NAME_FKEY, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_PREFERRED_FULL_SYN_CANDIDATE_DATASET_CODE_FKEY, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_PREFERRED_FULL_SYN_CANDIDATE_LANG_FKEY);
    }

    public EkiUser ekiUser() {
        return new EkiUser(this, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_USER_ID_FKEY);
    }

    public DatasetPermission datasetPermission() {
        return new DatasetPermission(this, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_RECENT_DATASET_PERMISSION_ID_FKEY);
    }

    public Tag tag() {
        return new Tag(this, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_ACTIVE_TAG_NAME_FKEY);
    }

    public Dataset dataset() {
        return new Dataset(this, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_PREFERRED_FULL_SYN_CANDIDATE_DATASET_CODE_FKEY);
    }

    public Language language() {
        return new Language(this, Keys.EKI_USER_PROFILE__EKI_USER_PROFILE_PREFERRED_FULL_SYN_CANDIDATE_LANG_FKEY);
    }

    @Override
    public EkiUserProfile as(String alias) {
        return new EkiUserProfile(DSL.name(alias), this);
    }

    @Override
    public EkiUserProfile as(Name alias) {
        return new EkiUserProfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EkiUserProfile rename(String name) {
        return new EkiUserProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EkiUserProfile rename(Name name) {
        return new EkiUserProfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, Long, String[], String[], String[], String[], Boolean, Boolean, Boolean, Boolean, String[], String, Boolean, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
