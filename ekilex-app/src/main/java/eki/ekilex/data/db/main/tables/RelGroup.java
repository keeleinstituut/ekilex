/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.RelGroupRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelGroup extends TableImpl<RelGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rel_group</code>
     */
    public static final RelGroup REL_GROUP = new RelGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelGroupRecord> getRecordType() {
        return RelGroupRecord.class;
    }

    /**
     * The column <code>public.rel_group.code</code>.
     */
    public final TableField<RelGroupRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.rel_group.datasets</code>.
     */
    public final TableField<RelGroupRecord, String[]> DATASETS = createField(DSL.name("datasets"), SQLDataType.VARCHAR(10).getArrayDataType(), this, "");

    /**
     * The column <code>public.rel_group.order_by</code>.
     */
    public final TableField<RelGroupRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private RelGroup(Name alias, Table<RelGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private RelGroup(Name alias, Table<RelGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.rel_group</code> table reference
     */
    public RelGroup(String alias) {
        this(DSL.name(alias), REL_GROUP);
    }

    /**
     * Create an aliased <code>public.rel_group</code> table reference
     */
    public RelGroup(Name alias) {
        this(alias, REL_GROUP);
    }

    /**
     * Create a <code>public.rel_group</code> table reference
     */
    public RelGroup() {
        this(DSL.name("rel_group"), null);
    }

    public <O extends Record> RelGroup(Table<O> child, ForeignKey<O, RelGroupRecord> key) {
        super(child, key, REL_GROUP);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<RelGroupRecord, Long> getIdentity() {
        return (Identity<RelGroupRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RelGroupRecord> getPrimaryKey() {
        return Keys.REL_GROUP_PKEY;
    }

    @Override
    public List<UniqueKey<RelGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<RelGroupRecord>>asList(Keys.REL_GROUP_PKEY);
    }

    @Override
    public RelGroup as(String alias) {
        return new RelGroup(DSL.name(alias), this);
    }

    @Override
    public RelGroup as(Name alias) {
        return new RelGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RelGroup rename(String name) {
        return new RelGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelGroup rename(Name name) {
        return new RelGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String[], Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
