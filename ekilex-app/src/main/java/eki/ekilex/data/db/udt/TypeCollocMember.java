/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeCollocMemberRecord;

import java.math.BigDecimal;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeCollocMember extends UDTImpl<TypeCollocMemberRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.type_colloc_member</code>
     */
    public static final TypeCollocMember TYPE_COLLOC_MEMBER = new TypeCollocMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeCollocMemberRecord> getRecordType() {
        return TypeCollocMemberRecord.class;
    }

    /**
     * The attribute <code>public.type_colloc_member.lexeme_id</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT, TYPE_COLLOC_MEMBER, "");

    /**
     * The attribute <code>public.type_colloc_member.word_id</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, TYPE_COLLOC_MEMBER, "");

    /**
     * The attribute <code>public.type_colloc_member.word</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, String> WORD = createField(DSL.name("word"), SQLDataType.CLOB, TYPE_COLLOC_MEMBER, "");

    /**
     * The attribute <code>public.type_colloc_member.form</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, String> FORM = createField(DSL.name("form"), SQLDataType.CLOB, TYPE_COLLOC_MEMBER, "");

    /**
     * The attribute <code>public.type_colloc_member.homonym_nr</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, Integer> HOMONYM_NR = createField(DSL.name("homonym_nr"), SQLDataType.INTEGER, TYPE_COLLOC_MEMBER, "");

    /**
     * The attribute <code>public.type_colloc_member.lang</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3), TYPE_COLLOC_MEMBER, "");

    /**
     * The attribute <code>public.type_colloc_member.conjunct</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, String> CONJUNCT = createField(DSL.name("conjunct"), SQLDataType.VARCHAR(100), TYPE_COLLOC_MEMBER, "");

    /**
     * The attribute <code>public.type_colloc_member.weight</code>.
     */
    public static final UDTField<TypeCollocMemberRecord, BigDecimal> WEIGHT = createField(DSL.name("weight"), SQLDataType.NUMERIC(14, 4), TYPE_COLLOC_MEMBER, "");

    /**
     * No further instances allowed
     */
    private TypeCollocMember() {
        super("type_colloc_member", null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
