/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables.records;


import eki.ekilex.data.db.main.tables.ViewOdLexemeMeaning;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOdLexemeMeaningRecord extends TableRecordImpl<ViewOdLexemeMeaningRecord> implements Record5<Long, Long, Long, String, String[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.view_od_lexeme_meaning.word_id</code>.
     */
    public void setWordId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.view_od_lexeme_meaning.word_id</code>.
     */
    public Long getWordId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.view_od_lexeme_meaning.lexeme_id</code>.
     */
    public void setLexemeId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.view_od_lexeme_meaning.lexeme_id</code>.
     */
    public Long getLexemeId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.view_od_lexeme_meaning.meaning_id</code>.
     */
    public void setMeaningId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.view_od_lexeme_meaning.meaning_id</code>.
     */
    public Long getMeaningId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.view_od_lexeme_meaning.value_state_code</code>.
     */
    public void setValueStateCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.view_od_lexeme_meaning.value_state_code</code>.
     */
    public String getValueStateCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.view_od_lexeme_meaning.register_codes</code>.
     */
    public void setRegisterCodes(String[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.view_od_lexeme_meaning.register_codes</code>.
     */
    public String[] getRegisterCodes() {
        return (String[]) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, String, String[]> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Long, Long, String, String[]> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ViewOdLexemeMeaning.VIEW_OD_LEXEME_MEANING.WORD_ID;
    }

    @Override
    public Field<Long> field2() {
        return ViewOdLexemeMeaning.VIEW_OD_LEXEME_MEANING.LEXEME_ID;
    }

    @Override
    public Field<Long> field3() {
        return ViewOdLexemeMeaning.VIEW_OD_LEXEME_MEANING.MEANING_ID;
    }

    @Override
    public Field<String> field4() {
        return ViewOdLexemeMeaning.VIEW_OD_LEXEME_MEANING.VALUE_STATE_CODE;
    }

    @Override
    public Field<String[]> field5() {
        return ViewOdLexemeMeaning.VIEW_OD_LEXEME_MEANING.REGISTER_CODES;
    }

    @Override
    public Long component1() {
        return getWordId();
    }

    @Override
    public Long component2() {
        return getLexemeId();
    }

    @Override
    public Long component3() {
        return getMeaningId();
    }

    @Override
    public String component4() {
        return getValueStateCode();
    }

    @Override
    public String[] component5() {
        return getRegisterCodes();
    }

    @Override
    public Long value1() {
        return getWordId();
    }

    @Override
    public Long value2() {
        return getLexemeId();
    }

    @Override
    public Long value3() {
        return getMeaningId();
    }

    @Override
    public String value4() {
        return getValueStateCode();
    }

    @Override
    public String[] value5() {
        return getRegisterCodes();
    }

    @Override
    public ViewOdLexemeMeaningRecord value1(Long value) {
        setWordId(value);
        return this;
    }

    @Override
    public ViewOdLexemeMeaningRecord value2(Long value) {
        setLexemeId(value);
        return this;
    }

    @Override
    public ViewOdLexemeMeaningRecord value3(Long value) {
        setMeaningId(value);
        return this;
    }

    @Override
    public ViewOdLexemeMeaningRecord value4(String value) {
        setValueStateCode(value);
        return this;
    }

    @Override
    public ViewOdLexemeMeaningRecord value5(String[] value) {
        setRegisterCodes(value);
        return this;
    }

    @Override
    public ViewOdLexemeMeaningRecord values(Long value1, Long value2, Long value3, String value4, String[] value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewOdLexemeMeaningRecord
     */
    public ViewOdLexemeMeaningRecord() {
        super(ViewOdLexemeMeaning.VIEW_OD_LEXEME_MEANING);
    }

    /**
     * Create a detached, initialised ViewOdLexemeMeaningRecord
     */
    public ViewOdLexemeMeaningRecord(Long wordId, Long lexemeId, Long meaningId, String valueStateCode, String[] registerCodes) {
        super(ViewOdLexemeMeaning.VIEW_OD_LEXEME_MEANING);

        setWordId(wordId);
        setLexemeId(lexemeId);
        setMeaningId(meaningId);
        setValueStateCode(valueStateCode);
        setRegisterCodes(registerCodes);
    }
}
