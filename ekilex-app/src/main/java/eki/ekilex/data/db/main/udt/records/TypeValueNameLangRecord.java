/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.udt.records;


import eki.ekilex.data.db.main.udt.TypeValueNameLang;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeValueNameLangRecord extends UDTRecordImpl<TypeValueNameLangRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.type_value_name_lang.value_id</code>.
     */
    public void setValueId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.type_value_name_lang.value_id</code>.
     */
    public Long getValueId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.type_value_name_lang.value</code>.
     */
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.type_value_name_lang.value</code>.
     */
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.type_value_name_lang.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.type_value_name_lang.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.type_value_name_lang.lang</code>.
     */
    public void setLang(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.type_value_name_lang.lang</code>.
     */
    public String getLang() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TypeValueNameLang.VALUE_ID;
    }

    @Override
    public Field<String> field2() {
        return TypeValueNameLang.VALUE;
    }

    @Override
    public Field<String> field3() {
        return TypeValueNameLang.NAME;
    }

    @Override
    public Field<String> field4() {
        return TypeValueNameLang.LANG;
    }

    @Override
    public Long component1() {
        return getValueId();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getLang();
    }

    @Override
    public Long value1() {
        return getValueId();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getLang();
    }

    @Override
    public TypeValueNameLangRecord value1(Long value) {
        setValueId(value);
        return this;
    }

    @Override
    public TypeValueNameLangRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public TypeValueNameLangRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public TypeValueNameLangRecord value4(String value) {
        setLang(value);
        return this;
    }

    @Override
    public TypeValueNameLangRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypeValueNameLangRecord
     */
    public TypeValueNameLangRecord() {
        super(TypeValueNameLang.TYPE_VALUE_NAME_LANG);
    }

    /**
     * Create a detached, initialised TypeValueNameLangRecord
     */
    public TypeValueNameLangRecord(Long valueId, String value, String name, String lang) {
        super(TypeValueNameLang.TYPE_VALUE_NAME_LANG);

        setValueId(valueId);
        setValue(value);
        setName(name);
        setLang(lang);
    }
}
