/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main;


import eki.ekilex.data.db.main.tables.ActivityLog;
import eki.ekilex.data.db.main.tables.ApiErrorCount;
import eki.ekilex.data.db.main.tables.ApiRequestCount;
import eki.ekilex.data.db.main.tables.Aspect;
import eki.ekilex.data.db.main.tables.AspectLabel;
import eki.ekilex.data.db.main.tables.Collocation;
import eki.ekilex.data.db.main.tables.CollocationMember;
import eki.ekilex.data.db.main.tables.DataRequest;
import eki.ekilex.data.db.main.tables.Dataset;
import eki.ekilex.data.db.main.tables.DatasetFreeformType;
import eki.ekilex.data.db.main.tables.DatasetPermission;
import eki.ekilex.data.db.main.tables.Definition;
import eki.ekilex.data.db.main.tables.DefinitionDataset;
import eki.ekilex.data.db.main.tables.DefinitionFreeform;
import eki.ekilex.data.db.main.tables.DefinitionNote;
import eki.ekilex.data.db.main.tables.DefinitionNoteSourceLink;
import eki.ekilex.data.db.main.tables.DefinitionSourceLink;
import eki.ekilex.data.db.main.tables.DefinitionType;
import eki.ekilex.data.db.main.tables.DefinitionTypeLabel;
import eki.ekilex.data.db.main.tables.Deriv;
import eki.ekilex.data.db.main.tables.DerivLabel;
import eki.ekilex.data.db.main.tables.DisplayMorph;
import eki.ekilex.data.db.main.tables.DisplayMorphLabel;
import eki.ekilex.data.db.main.tables.Domain;
import eki.ekilex.data.db.main.tables.DomainLabel;
import eki.ekilex.data.db.main.tables.EkiUser;
import eki.ekilex.data.db.main.tables.EkiUserApplication;
import eki.ekilex.data.db.main.tables.EkiUserProfile;
import eki.ekilex.data.db.main.tables.EtymologyType;
import eki.ekilex.data.db.main.tables.FeedbackLog;
import eki.ekilex.data.db.main.tables.FeedbackLogComment;
import eki.ekilex.data.db.main.tables.Form;
import eki.ekilex.data.db.main.tables.FormFreq;
import eki.ekilex.data.db.main.tables.Freeform;
import eki.ekilex.data.db.main.tables.FreeformSourceLink;
import eki.ekilex.data.db.main.tables.FreeformType;
import eki.ekilex.data.db.main.tables.FreeformTypeLabel;
import eki.ekilex.data.db.main.tables.FreqCorp;
import eki.ekilex.data.db.main.tables.GameNonword;
import eki.ekilex.data.db.main.tables.Gender;
import eki.ekilex.data.db.main.tables.GenderLabel;
import eki.ekilex.data.db.main.tables.GovernmentType;
import eki.ekilex.data.db.main.tables.GovernmentTypeLabel;
import eki.ekilex.data.db.main.tables.LabelType;
import eki.ekilex.data.db.main.tables.Language;
import eki.ekilex.data.db.main.tables.LanguageLabel;
import eki.ekilex.data.db.main.tables.LexColloc;
import eki.ekilex.data.db.main.tables.LexCollocPosGroup;
import eki.ekilex.data.db.main.tables.LexCollocRelGroup;
import eki.ekilex.data.db.main.tables.LexRelMapping;
import eki.ekilex.data.db.main.tables.LexRelType;
import eki.ekilex.data.db.main.tables.LexRelTypeLabel;
import eki.ekilex.data.db.main.tables.LexRelation;
import eki.ekilex.data.db.main.tables.Lexeme;
import eki.ekilex.data.db.main.tables.LexemeActivityLog;
import eki.ekilex.data.db.main.tables.LexemeDeriv;
import eki.ekilex.data.db.main.tables.LexemeFreeform;
import eki.ekilex.data.db.main.tables.LexemeNote;
import eki.ekilex.data.db.main.tables.LexemeNoteSourceLink;
import eki.ekilex.data.db.main.tables.LexemePos;
import eki.ekilex.data.db.main.tables.LexemeRegion;
import eki.ekilex.data.db.main.tables.LexemeRegister;
import eki.ekilex.data.db.main.tables.LexemeSourceLink;
import eki.ekilex.data.db.main.tables.LexemeTag;
import eki.ekilex.data.db.main.tables.Meaning;
import eki.ekilex.data.db.main.tables.MeaningActivityLog;
import eki.ekilex.data.db.main.tables.MeaningDomain;
import eki.ekilex.data.db.main.tables.MeaningForum;
import eki.ekilex.data.db.main.tables.MeaningFreeform;
import eki.ekilex.data.db.main.tables.MeaningImage;
import eki.ekilex.data.db.main.tables.MeaningImageSourceLink;
import eki.ekilex.data.db.main.tables.MeaningLastActivityLog;
import eki.ekilex.data.db.main.tables.MeaningNote;
import eki.ekilex.data.db.main.tables.MeaningNoteSourceLink;
import eki.ekilex.data.db.main.tables.MeaningNr;
import eki.ekilex.data.db.main.tables.MeaningRelMapping;
import eki.ekilex.data.db.main.tables.MeaningRelType;
import eki.ekilex.data.db.main.tables.MeaningRelTypeLabel;
import eki.ekilex.data.db.main.tables.MeaningRelation;
import eki.ekilex.data.db.main.tables.MeaningSemanticType;
import eki.ekilex.data.db.main.tables.MeaningTag;
import eki.ekilex.data.db.main.tables.Morph;
import eki.ekilex.data.db.main.tables.MorphFreq;
import eki.ekilex.data.db.main.tables.MorphLabel;
import eki.ekilex.data.db.main.tables.NewsArticle;
import eki.ekilex.data.db.main.tables.Paradigm;
import eki.ekilex.data.db.main.tables.ParadigmForm;
import eki.ekilex.data.db.main.tables.Pos;
import eki.ekilex.data.db.main.tables.PosGroup;
import eki.ekilex.data.db.main.tables.PosGroupLabel;
import eki.ekilex.data.db.main.tables.PosLabel;
import eki.ekilex.data.db.main.tables.ProficiencyLevel;
import eki.ekilex.data.db.main.tables.ProficiencyLevelLabel;
import eki.ekilex.data.db.main.tables.Region;
import eki.ekilex.data.db.main.tables.Register;
import eki.ekilex.data.db.main.tables.RegisterLabel;
import eki.ekilex.data.db.main.tables.RelGroup;
import eki.ekilex.data.db.main.tables.RelGroupLabel;
import eki.ekilex.data.db.main.tables.SemanticType;
import eki.ekilex.data.db.main.tables.SemanticTypeLabel;
import eki.ekilex.data.db.main.tables.Source;
import eki.ekilex.data.db.main.tables.SourceActivityLog;
import eki.ekilex.data.db.main.tables.SourceFreeform;
import eki.ekilex.data.db.main.tables.Tag;
import eki.ekilex.data.db.main.tables.TempDsImportPkMap;
import eki.ekilex.data.db.main.tables.TempDsImportQueue;
import eki.ekilex.data.db.main.tables.TermsOfUse;
import eki.ekilex.data.db.main.tables.Usage;
import eki.ekilex.data.db.main.tables.UsageDefinition;
import eki.ekilex.data.db.main.tables.UsageSourceLink;
import eki.ekilex.data.db.main.tables.UsageTranslation;
import eki.ekilex.data.db.main.tables.UsageType;
import eki.ekilex.data.db.main.tables.UsageTypeLabel;
import eki.ekilex.data.db.main.tables.ValueState;
import eki.ekilex.data.db.main.tables.ValueStateLabel;
import eki.ekilex.data.db.main.tables.Word;
import eki.ekilex.data.db.main.tables.WordActivityLog;
import eki.ekilex.data.db.main.tables.WordEtymology;
import eki.ekilex.data.db.main.tables.WordEtymologyRelation;
import eki.ekilex.data.db.main.tables.WordEtymologySourceLink;
import eki.ekilex.data.db.main.tables.WordForum;
import eki.ekilex.data.db.main.tables.WordFreeform;
import eki.ekilex.data.db.main.tables.WordFreq;
import eki.ekilex.data.db.main.tables.WordGroup;
import eki.ekilex.data.db.main.tables.WordGroupMember;
import eki.ekilex.data.db.main.tables.WordGuid;
import eki.ekilex.data.db.main.tables.WordLastActivityLog;
import eki.ekilex.data.db.main.tables.WordOdMorph;
import eki.ekilex.data.db.main.tables.WordOdRecommendation;
import eki.ekilex.data.db.main.tables.WordOdUsage;
import eki.ekilex.data.db.main.tables.WordRelMapping;
import eki.ekilex.data.db.main.tables.WordRelType;
import eki.ekilex.data.db.main.tables.WordRelTypeLabel;
import eki.ekilex.data.db.main.tables.WordRelation;
import eki.ekilex.data.db.main.tables.WordRelationParam;
import eki.ekilex.data.db.main.tables.WordTag;
import eki.ekilex.data.db.main.tables.WordType;
import eki.ekilex.data.db.main.tables.WordTypeLabel;
import eki.ekilex.data.db.main.tables.WordWordType;
import eki.ekilex.data.db.main.tables.records.ActivityLogRecord;
import eki.ekilex.data.db.main.tables.records.ApiErrorCountRecord;
import eki.ekilex.data.db.main.tables.records.ApiRequestCountRecord;
import eki.ekilex.data.db.main.tables.records.AspectLabelRecord;
import eki.ekilex.data.db.main.tables.records.AspectRecord;
import eki.ekilex.data.db.main.tables.records.CollocationMemberRecord;
import eki.ekilex.data.db.main.tables.records.CollocationRecord;
import eki.ekilex.data.db.main.tables.records.DataRequestRecord;
import eki.ekilex.data.db.main.tables.records.DatasetFreeformTypeRecord;
import eki.ekilex.data.db.main.tables.records.DatasetPermissionRecord;
import eki.ekilex.data.db.main.tables.records.DatasetRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionDatasetRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionFreeformRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionNoteRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionNoteSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.DefinitionTypeRecord;
import eki.ekilex.data.db.main.tables.records.DerivLabelRecord;
import eki.ekilex.data.db.main.tables.records.DerivRecord;
import eki.ekilex.data.db.main.tables.records.DisplayMorphLabelRecord;
import eki.ekilex.data.db.main.tables.records.DisplayMorphRecord;
import eki.ekilex.data.db.main.tables.records.DomainLabelRecord;
import eki.ekilex.data.db.main.tables.records.DomainRecord;
import eki.ekilex.data.db.main.tables.records.EkiUserApplicationRecord;
import eki.ekilex.data.db.main.tables.records.EkiUserProfileRecord;
import eki.ekilex.data.db.main.tables.records.EkiUserRecord;
import eki.ekilex.data.db.main.tables.records.EtymologyTypeRecord;
import eki.ekilex.data.db.main.tables.records.FeedbackLogCommentRecord;
import eki.ekilex.data.db.main.tables.records.FeedbackLogRecord;
import eki.ekilex.data.db.main.tables.records.FormFreqRecord;
import eki.ekilex.data.db.main.tables.records.FormRecord;
import eki.ekilex.data.db.main.tables.records.FreeformRecord;
import eki.ekilex.data.db.main.tables.records.FreeformSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.FreeformTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.FreeformTypeRecord;
import eki.ekilex.data.db.main.tables.records.FreqCorpRecord;
import eki.ekilex.data.db.main.tables.records.GameNonwordRecord;
import eki.ekilex.data.db.main.tables.records.GenderLabelRecord;
import eki.ekilex.data.db.main.tables.records.GenderRecord;
import eki.ekilex.data.db.main.tables.records.GovernmentTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.GovernmentTypeRecord;
import eki.ekilex.data.db.main.tables.records.LabelTypeRecord;
import eki.ekilex.data.db.main.tables.records.LanguageLabelRecord;
import eki.ekilex.data.db.main.tables.records.LanguageRecord;
import eki.ekilex.data.db.main.tables.records.LexCollocPosGroupRecord;
import eki.ekilex.data.db.main.tables.records.LexCollocRecord;
import eki.ekilex.data.db.main.tables.records.LexCollocRelGroupRecord;
import eki.ekilex.data.db.main.tables.records.LexRelMappingRecord;
import eki.ekilex.data.db.main.tables.records.LexRelTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.LexRelTypeRecord;
import eki.ekilex.data.db.main.tables.records.LexRelationRecord;
import eki.ekilex.data.db.main.tables.records.LexemeActivityLogRecord;
import eki.ekilex.data.db.main.tables.records.LexemeDerivRecord;
import eki.ekilex.data.db.main.tables.records.LexemeFreeformRecord;
import eki.ekilex.data.db.main.tables.records.LexemeNoteRecord;
import eki.ekilex.data.db.main.tables.records.LexemeNoteSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.LexemePosRecord;
import eki.ekilex.data.db.main.tables.records.LexemeRecord;
import eki.ekilex.data.db.main.tables.records.LexemeRegionRecord;
import eki.ekilex.data.db.main.tables.records.LexemeRegisterRecord;
import eki.ekilex.data.db.main.tables.records.LexemeSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.LexemeTagRecord;
import eki.ekilex.data.db.main.tables.records.MeaningActivityLogRecord;
import eki.ekilex.data.db.main.tables.records.MeaningDomainRecord;
import eki.ekilex.data.db.main.tables.records.MeaningForumRecord;
import eki.ekilex.data.db.main.tables.records.MeaningFreeformRecord;
import eki.ekilex.data.db.main.tables.records.MeaningImageRecord;
import eki.ekilex.data.db.main.tables.records.MeaningImageSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.MeaningLastActivityLogRecord;
import eki.ekilex.data.db.main.tables.records.MeaningNoteRecord;
import eki.ekilex.data.db.main.tables.records.MeaningNoteSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.MeaningNrRecord;
import eki.ekilex.data.db.main.tables.records.MeaningRecord;
import eki.ekilex.data.db.main.tables.records.MeaningRelMappingRecord;
import eki.ekilex.data.db.main.tables.records.MeaningRelTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.MeaningRelTypeRecord;
import eki.ekilex.data.db.main.tables.records.MeaningRelationRecord;
import eki.ekilex.data.db.main.tables.records.MeaningSemanticTypeRecord;
import eki.ekilex.data.db.main.tables.records.MeaningTagRecord;
import eki.ekilex.data.db.main.tables.records.MorphFreqRecord;
import eki.ekilex.data.db.main.tables.records.MorphLabelRecord;
import eki.ekilex.data.db.main.tables.records.MorphRecord;
import eki.ekilex.data.db.main.tables.records.NewsArticleRecord;
import eki.ekilex.data.db.main.tables.records.ParadigmFormRecord;
import eki.ekilex.data.db.main.tables.records.ParadigmRecord;
import eki.ekilex.data.db.main.tables.records.PosGroupLabelRecord;
import eki.ekilex.data.db.main.tables.records.PosGroupRecord;
import eki.ekilex.data.db.main.tables.records.PosLabelRecord;
import eki.ekilex.data.db.main.tables.records.PosRecord;
import eki.ekilex.data.db.main.tables.records.ProficiencyLevelLabelRecord;
import eki.ekilex.data.db.main.tables.records.ProficiencyLevelRecord;
import eki.ekilex.data.db.main.tables.records.RegionRecord;
import eki.ekilex.data.db.main.tables.records.RegisterLabelRecord;
import eki.ekilex.data.db.main.tables.records.RegisterRecord;
import eki.ekilex.data.db.main.tables.records.RelGroupLabelRecord;
import eki.ekilex.data.db.main.tables.records.RelGroupRecord;
import eki.ekilex.data.db.main.tables.records.SemanticTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.SemanticTypeRecord;
import eki.ekilex.data.db.main.tables.records.SourceActivityLogRecord;
import eki.ekilex.data.db.main.tables.records.SourceFreeformRecord;
import eki.ekilex.data.db.main.tables.records.SourceRecord;
import eki.ekilex.data.db.main.tables.records.TagRecord;
import eki.ekilex.data.db.main.tables.records.TempDsImportPkMapRecord;
import eki.ekilex.data.db.main.tables.records.TempDsImportQueueRecord;
import eki.ekilex.data.db.main.tables.records.TermsOfUseRecord;
import eki.ekilex.data.db.main.tables.records.UsageDefinitionRecord;
import eki.ekilex.data.db.main.tables.records.UsageRecord;
import eki.ekilex.data.db.main.tables.records.UsageSourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.UsageTranslationRecord;
import eki.ekilex.data.db.main.tables.records.UsageTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.UsageTypeRecord;
import eki.ekilex.data.db.main.tables.records.ValueStateLabelRecord;
import eki.ekilex.data.db.main.tables.records.ValueStateRecord;
import eki.ekilex.data.db.main.tables.records.WordActivityLogRecord;
import eki.ekilex.data.db.main.tables.records.WordEtymologyRecord;
import eki.ekilex.data.db.main.tables.records.WordEtymologyRelationRecord;
import eki.ekilex.data.db.main.tables.records.WordEtymologySourceLinkRecord;
import eki.ekilex.data.db.main.tables.records.WordForumRecord;
import eki.ekilex.data.db.main.tables.records.WordFreeformRecord;
import eki.ekilex.data.db.main.tables.records.WordFreqRecord;
import eki.ekilex.data.db.main.tables.records.WordGroupMemberRecord;
import eki.ekilex.data.db.main.tables.records.WordGroupRecord;
import eki.ekilex.data.db.main.tables.records.WordGuidRecord;
import eki.ekilex.data.db.main.tables.records.WordLastActivityLogRecord;
import eki.ekilex.data.db.main.tables.records.WordOdMorphRecord;
import eki.ekilex.data.db.main.tables.records.WordOdRecommendationRecord;
import eki.ekilex.data.db.main.tables.records.WordOdUsageRecord;
import eki.ekilex.data.db.main.tables.records.WordRecord;
import eki.ekilex.data.db.main.tables.records.WordRelMappingRecord;
import eki.ekilex.data.db.main.tables.records.WordRelTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.WordRelTypeRecord;
import eki.ekilex.data.db.main.tables.records.WordRelationParamRecord;
import eki.ekilex.data.db.main.tables.records.WordRelationRecord;
import eki.ekilex.data.db.main.tables.records.WordTagRecord;
import eki.ekilex.data.db.main.tables.records.WordTypeLabelRecord;
import eki.ekilex.data.db.main.tables.records.WordTypeRecord;
import eki.ekilex.data.db.main.tables.records.WordWordTypeRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActivityLogRecord> ACTIVITY_LOG_PKEY = Internal.createUniqueKey(ActivityLog.ACTIVITY_LOG, DSL.name("activity_log_pkey"), new TableField[] { ActivityLog.ACTIVITY_LOG.ID }, true);
    public static final UniqueKey<ApiErrorCountRecord> API_ERROR_COUNT_AUTH_NAME_GENERIC_PATH_MESSAGE_KEY = Internal.createUniqueKey(ApiErrorCount.API_ERROR_COUNT, DSL.name("api_error_count_auth_name_generic_path_message_key"), new TableField[] { ApiErrorCount.API_ERROR_COUNT.AUTH_NAME, ApiErrorCount.API_ERROR_COUNT.GENERIC_PATH, ApiErrorCount.API_ERROR_COUNT.MESSAGE }, true);
    public static final UniqueKey<ApiErrorCountRecord> API_ERROR_COUNT_PKEY = Internal.createUniqueKey(ApiErrorCount.API_ERROR_COUNT, DSL.name("api_error_count_pkey"), new TableField[] { ApiErrorCount.API_ERROR_COUNT.ID }, true);
    public static final UniqueKey<ApiRequestCountRecord> API_REQUEST_COUNT_AUTH_NAME_GENERIC_PATH_KEY = Internal.createUniqueKey(ApiRequestCount.API_REQUEST_COUNT, DSL.name("api_request_count_auth_name_generic_path_key"), new TableField[] { ApiRequestCount.API_REQUEST_COUNT.AUTH_NAME, ApiRequestCount.API_REQUEST_COUNT.GENERIC_PATH }, true);
    public static final UniqueKey<ApiRequestCountRecord> API_REQUEST_COUNT_PKEY = Internal.createUniqueKey(ApiRequestCount.API_REQUEST_COUNT, DSL.name("api_request_count_pkey"), new TableField[] { ApiRequestCount.API_REQUEST_COUNT.ID }, true);
    public static final UniqueKey<AspectRecord> ASPECT_PKEY = Internal.createUniqueKey(Aspect.ASPECT, DSL.name("aspect_pkey"), new TableField[] { Aspect.ASPECT.CODE }, true);
    public static final UniqueKey<AspectLabelRecord> ASPECT_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(AspectLabel.ASPECT_LABEL, DSL.name("aspect_label_code_lang_type_key"), new TableField[] { AspectLabel.ASPECT_LABEL.CODE, AspectLabel.ASPECT_LABEL.LANG, AspectLabel.ASPECT_LABEL.TYPE }, true);
    public static final UniqueKey<CollocationRecord> COLLOCATION_PKEY = Internal.createUniqueKey(Collocation.COLLOCATION, DSL.name("collocation_pkey"), new TableField[] { Collocation.COLLOCATION.ID }, true);
    public static final UniqueKey<CollocationMemberRecord> COLLOCATION_MEMBER_COLLOC_LEXEME_ID_MEMBER_LEXEME_ID_KEY = Internal.createUniqueKey(CollocationMember.COLLOCATION_MEMBER, DSL.name("collocation_member_colloc_lexeme_id_member_lexeme_id_key"), new TableField[] { CollocationMember.COLLOCATION_MEMBER.COLLOC_LEXEME_ID, CollocationMember.COLLOCATION_MEMBER.MEMBER_LEXEME_ID }, true);
    public static final UniqueKey<CollocationMemberRecord> COLLOCATION_MEMBER_PKEY = Internal.createUniqueKey(CollocationMember.COLLOCATION_MEMBER, DSL.name("collocation_member_pkey"), new TableField[] { CollocationMember.COLLOCATION_MEMBER.ID }, true);
    public static final UniqueKey<DataRequestRecord> DATA_REQUEST_PKEY = Internal.createUniqueKey(DataRequest.DATA_REQUEST, DSL.name("data_request_pkey"), new TableField[] { DataRequest.DATA_REQUEST.ID }, true);
    public static final UniqueKey<DatasetRecord> DATASET_PKEY = Internal.createUniqueKey(Dataset.DATASET, DSL.name("dataset_pkey"), new TableField[] { Dataset.DATASET.CODE }, true);
    public static final UniqueKey<DatasetFreeformTypeRecord> DATASET_FREEFORM_TYPE_DATASET_CODE_FREEFORM_OWNER_FREEFORM__KEY = Internal.createUniqueKey(DatasetFreeformType.DATASET_FREEFORM_TYPE, DSL.name("dataset_freeform_type_dataset_code_freeform_owner_freeform__key"), new TableField[] { DatasetFreeformType.DATASET_FREEFORM_TYPE.DATASET_CODE, DatasetFreeformType.DATASET_FREEFORM_TYPE.FREEFORM_OWNER, DatasetFreeformType.DATASET_FREEFORM_TYPE.FREEFORM_TYPE_CODE }, true);
    public static final UniqueKey<DatasetFreeformTypeRecord> DATASET_FREEFORM_TYPE_PKEY = Internal.createUniqueKey(DatasetFreeformType.DATASET_FREEFORM_TYPE, DSL.name("dataset_freeform_type_pkey"), new TableField[] { DatasetFreeformType.DATASET_FREEFORM_TYPE.ID }, true);
    public static final UniqueKey<DatasetPermissionRecord> DATASET_PERMISSION_DATASET_CODE_USER_ID_AUTH_OPERATION_AUTH_KEY = Internal.createUniqueKey(DatasetPermission.DATASET_PERMISSION, DSL.name("dataset_permission_dataset_code_user_id_auth_operation_auth_key"), new TableField[] { DatasetPermission.DATASET_PERMISSION.DATASET_CODE, DatasetPermission.DATASET_PERMISSION.USER_ID, DatasetPermission.DATASET_PERMISSION.AUTH_OPERATION, DatasetPermission.DATASET_PERMISSION.AUTH_ITEM, DatasetPermission.DATASET_PERMISSION.AUTH_LANG }, true);
    public static final UniqueKey<DatasetPermissionRecord> DATASET_PERMISSION_PKEY = Internal.createUniqueKey(DatasetPermission.DATASET_PERMISSION, DSL.name("dataset_permission_pkey"), new TableField[] { DatasetPermission.DATASET_PERMISSION.ID }, true);
    public static final UniqueKey<DefinitionRecord> DEFINITION_PKEY = Internal.createUniqueKey(Definition.DEFINITION, DSL.name("definition_pkey"), new TableField[] { Definition.DEFINITION.ID }, true);
    public static final UniqueKey<DefinitionDatasetRecord> DEFINITION_DATASET_PKEY = Internal.createUniqueKey(DefinitionDataset.DEFINITION_DATASET, DSL.name("definition_dataset_pkey"), new TableField[] { DefinitionDataset.DEFINITION_DATASET.DEFINITION_ID, DefinitionDataset.DEFINITION_DATASET.DATASET_CODE }, true);
    public static final UniqueKey<DefinitionFreeformRecord> DEFINITION_FREEFORM_DEFINITION_ID_FREEFORM_ID_KEY = Internal.createUniqueKey(DefinitionFreeform.DEFINITION_FREEFORM, DSL.name("definition_freeform_definition_id_freeform_id_key"), new TableField[] { DefinitionFreeform.DEFINITION_FREEFORM.DEFINITION_ID, DefinitionFreeform.DEFINITION_FREEFORM.FREEFORM_ID }, true);
    public static final UniqueKey<DefinitionFreeformRecord> DEFINITION_FREEFORM_PKEY = Internal.createUniqueKey(DefinitionFreeform.DEFINITION_FREEFORM, DSL.name("definition_freeform_pkey"), new TableField[] { DefinitionFreeform.DEFINITION_FREEFORM.ID }, true);
    public static final UniqueKey<DefinitionNoteRecord> DEFINITION_NOTE_PKEY = Internal.createUniqueKey(DefinitionNote.DEFINITION_NOTE, DSL.name("definition_note_pkey"), new TableField[] { DefinitionNote.DEFINITION_NOTE.ID }, true);
    public static final UniqueKey<DefinitionNoteSourceLinkRecord> DEFINITION_NOTE_SOURCE_LINK_PKEY = Internal.createUniqueKey(DefinitionNoteSourceLink.DEFINITION_NOTE_SOURCE_LINK, DSL.name("definition_note_source_link_pkey"), new TableField[] { DefinitionNoteSourceLink.DEFINITION_NOTE_SOURCE_LINK.ID }, true);
    public static final UniqueKey<DefinitionSourceLinkRecord> DEFINITION_SOURCE_LINK_PKEY = Internal.createUniqueKey(DefinitionSourceLink.DEFINITION_SOURCE_LINK, DSL.name("definition_source_link_pkey"), new TableField[] { DefinitionSourceLink.DEFINITION_SOURCE_LINK.ID }, true);
    public static final UniqueKey<DefinitionTypeRecord> DEFINITION_TYPE_PKEY = Internal.createUniqueKey(DefinitionType.DEFINITION_TYPE, DSL.name("definition_type_pkey"), new TableField[] { DefinitionType.DEFINITION_TYPE.CODE }, true);
    public static final UniqueKey<DefinitionTypeLabelRecord> DEFINITION_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(DefinitionTypeLabel.DEFINITION_TYPE_LABEL, DSL.name("definition_type_label_code_lang_type_key"), new TableField[] { DefinitionTypeLabel.DEFINITION_TYPE_LABEL.CODE, DefinitionTypeLabel.DEFINITION_TYPE_LABEL.LANG, DefinitionTypeLabel.DEFINITION_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<DerivRecord> DERIV_PKEY = Internal.createUniqueKey(Deriv.DERIV, DSL.name("deriv_pkey"), new TableField[] { Deriv.DERIV.CODE }, true);
    public static final UniqueKey<DerivLabelRecord> DERIV_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(DerivLabel.DERIV_LABEL, DSL.name("deriv_label_code_lang_type_key"), new TableField[] { DerivLabel.DERIV_LABEL.CODE, DerivLabel.DERIV_LABEL.LANG, DerivLabel.DERIV_LABEL.TYPE }, true);
    public static final UniqueKey<DisplayMorphRecord> DISPLAY_MORPH_PKEY = Internal.createUniqueKey(DisplayMorph.DISPLAY_MORPH, DSL.name("display_morph_pkey"), new TableField[] { DisplayMorph.DISPLAY_MORPH.CODE }, true);
    public static final UniqueKey<DisplayMorphLabelRecord> DISPLAY_MORPH_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(DisplayMorphLabel.DISPLAY_MORPH_LABEL, DSL.name("display_morph_label_code_lang_type_key"), new TableField[] { DisplayMorphLabel.DISPLAY_MORPH_LABEL.CODE, DisplayMorphLabel.DISPLAY_MORPH_LABEL.LANG, DisplayMorphLabel.DISPLAY_MORPH_LABEL.TYPE }, true);
    public static final UniqueKey<DomainRecord> DOMAIN_PKEY = Internal.createUniqueKey(Domain.DOMAIN, DSL.name("domain_pkey"), new TableField[] { Domain.DOMAIN.CODE, Domain.DOMAIN.ORIGIN }, true);
    public static final UniqueKey<DomainLabelRecord> DOMAIN_LABEL_CODE_ORIGIN_LANG_TYPE_KEY = Internal.createUniqueKey(DomainLabel.DOMAIN_LABEL, DSL.name("domain_label_code_origin_lang_type_key"), new TableField[] { DomainLabel.DOMAIN_LABEL.CODE, DomainLabel.DOMAIN_LABEL.ORIGIN, DomainLabel.DOMAIN_LABEL.LANG, DomainLabel.DOMAIN_LABEL.TYPE }, true);
    public static final UniqueKey<EkiUserRecord> EKI_USER_EMAIL_KEY = Internal.createUniqueKey(EkiUser.EKI_USER, DSL.name("eki_user_email_key"), new TableField[] { EkiUser.EKI_USER.EMAIL }, true);
    public static final UniqueKey<EkiUserRecord> EKI_USER_PKEY = Internal.createUniqueKey(EkiUser.EKI_USER, DSL.name("eki_user_pkey"), new TableField[] { EkiUser.EKI_USER.ID }, true);
    public static final UniqueKey<EkiUserApplicationRecord> EKI_USER_APPLICATION_PKEY1 = Internal.createUniqueKey(EkiUserApplication.EKI_USER_APPLICATION, DSL.name("eki_user_application_pkey1"), new TableField[] { EkiUserApplication.EKI_USER_APPLICATION.ID }, true);
    public static final UniqueKey<EkiUserProfileRecord> EKI_USER_PROFILE_PKEY = Internal.createUniqueKey(EkiUserProfile.EKI_USER_PROFILE, DSL.name("eki_user_profile_pkey"), new TableField[] { EkiUserProfile.EKI_USER_PROFILE.ID }, true);
    public static final UniqueKey<EtymologyTypeRecord> ETYMOLOGY_TYPE_PKEY = Internal.createUniqueKey(EtymologyType.ETYMOLOGY_TYPE, DSL.name("etymology_type_pkey"), new TableField[] { EtymologyType.ETYMOLOGY_TYPE.CODE }, true);
    public static final UniqueKey<FeedbackLogRecord> FEEDBACK_LOG_PKEY = Internal.createUniqueKey(FeedbackLog.FEEDBACK_LOG, DSL.name("feedback_log_pkey"), new TableField[] { FeedbackLog.FEEDBACK_LOG.ID }, true);
    public static final UniqueKey<FeedbackLogCommentRecord> FEEDBACK_LOG_COMMENT_PKEY = Internal.createUniqueKey(FeedbackLogComment.FEEDBACK_LOG_COMMENT, DSL.name("feedback_log_comment_pkey"), new TableField[] { FeedbackLogComment.FEEDBACK_LOG_COMMENT.ID }, true);
    public static final UniqueKey<FormRecord> FORM_PKEY = Internal.createUniqueKey(Form.FORM, DSL.name("form_pkey"), new TableField[] { Form.FORM.ID }, true);
    public static final UniqueKey<FormFreqRecord> FORM_FREQ_FREQ_CORP_ID_FORM_ID_KEY = Internal.createUniqueKey(FormFreq.FORM_FREQ, DSL.name("form_freq_freq_corp_id_form_id_key"), new TableField[] { FormFreq.FORM_FREQ.FREQ_CORP_ID, FormFreq.FORM_FREQ.FORM_ID }, true);
    public static final UniqueKey<FormFreqRecord> FORM_FREQ_PKEY = Internal.createUniqueKey(FormFreq.FORM_FREQ, DSL.name("form_freq_pkey"), new TableField[] { FormFreq.FORM_FREQ.ID }, true);
    public static final UniqueKey<FreeformRecord> FREEFORM_PKEY = Internal.createUniqueKey(Freeform.FREEFORM, DSL.name("freeform_pkey"), new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final UniqueKey<FreeformSourceLinkRecord> FREEFORM_SOURCE_LINK_PKEY = Internal.createUniqueKey(FreeformSourceLink.FREEFORM_SOURCE_LINK, DSL.name("freeform_source_link_pkey"), new TableField[] { FreeformSourceLink.FREEFORM_SOURCE_LINK.ID }, true);
    public static final UniqueKey<FreeformTypeRecord> FREEFORM_TYPE_PKEY = Internal.createUniqueKey(FreeformType.FREEFORM_TYPE, DSL.name("freeform_type_pkey"), new TableField[] { FreeformType.FREEFORM_TYPE.CODE }, true);
    public static final UniqueKey<FreeformTypeLabelRecord> FREEFORM_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(FreeformTypeLabel.FREEFORM_TYPE_LABEL, DSL.name("freeform_type_label_code_lang_type_key"), new TableField[] { FreeformTypeLabel.FREEFORM_TYPE_LABEL.CODE, FreeformTypeLabel.FREEFORM_TYPE_LABEL.LANG, FreeformTypeLabel.FREEFORM_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<FreqCorpRecord> FREQ_CORP_NAME_KEY = Internal.createUniqueKey(FreqCorp.FREQ_CORP, DSL.name("freq_corp_name_key"), new TableField[] { FreqCorp.FREQ_CORP.NAME }, true);
    public static final UniqueKey<FreqCorpRecord> FREQ_CORP_PKEY = Internal.createUniqueKey(FreqCorp.FREQ_CORP, DSL.name("freq_corp_pkey"), new TableField[] { FreqCorp.FREQ_CORP.ID }, true);
    public static final UniqueKey<GameNonwordRecord> GAME_NONWORD_PKEY = Internal.createUniqueKey(GameNonword.GAME_NONWORD, DSL.name("game_nonword_pkey"), new TableField[] { GameNonword.GAME_NONWORD.ID }, true);
    public static final UniqueKey<GameNonwordRecord> GAME_NONWORD_WORD_LANG_KEY = Internal.createUniqueKey(GameNonword.GAME_NONWORD, DSL.name("game_nonword_word_lang_key"), new TableField[] { GameNonword.GAME_NONWORD.WORD, GameNonword.GAME_NONWORD.LANG }, true);
    public static final UniqueKey<GenderRecord> GENDER_PKEY = Internal.createUniqueKey(Gender.GENDER, DSL.name("gender_pkey"), new TableField[] { Gender.GENDER.CODE }, true);
    public static final UniqueKey<GenderLabelRecord> GENDER_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(GenderLabel.GENDER_LABEL, DSL.name("gender_label_code_lang_type_key"), new TableField[] { GenderLabel.GENDER_LABEL.CODE, GenderLabel.GENDER_LABEL.LANG, GenderLabel.GENDER_LABEL.TYPE }, true);
    public static final UniqueKey<GovernmentTypeRecord> GOVERNMENT_TYPE_PKEY = Internal.createUniqueKey(GovernmentType.GOVERNMENT_TYPE, DSL.name("government_type_pkey"), new TableField[] { GovernmentType.GOVERNMENT_TYPE.CODE }, true);
    public static final UniqueKey<GovernmentTypeLabelRecord> GOVERNMENT_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL, DSL.name("government_type_label_code_lang_type_key"), new TableField[] { GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL.CODE, GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL.LANG, GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<LabelTypeRecord> LABEL_TYPE_PKEY = Internal.createUniqueKey(LabelType.LABEL_TYPE, DSL.name("label_type_pkey"), new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final UniqueKey<LanguageRecord> LANGUAGE_PKEY = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("language_pkey"), new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final UniqueKey<LanguageLabelRecord> LANGUAGE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(LanguageLabel.LANGUAGE_LABEL, DSL.name("language_label_code_lang_type_key"), new TableField[] { LanguageLabel.LANGUAGE_LABEL.CODE, LanguageLabel.LANGUAGE_LABEL.LANG, LanguageLabel.LANGUAGE_LABEL.TYPE }, true);
    public static final UniqueKey<LexCollocRecord> LEX_COLLOC_LEXEME_ID_COLLOCATION_ID_KEY = Internal.createUniqueKey(LexColloc.LEX_COLLOC, DSL.name("lex_colloc_lexeme_id_collocation_id_key"), new TableField[] { LexColloc.LEX_COLLOC.LEXEME_ID, LexColloc.LEX_COLLOC.COLLOCATION_ID }, true);
    public static final UniqueKey<LexCollocRecord> LEX_COLLOC_PKEY = Internal.createUniqueKey(LexColloc.LEX_COLLOC, DSL.name("lex_colloc_pkey"), new TableField[] { LexColloc.LEX_COLLOC.ID }, true);
    public static final UniqueKey<LexCollocPosGroupRecord> LEX_COLLOC_POS_GROUP_PKEY = Internal.createUniqueKey(LexCollocPosGroup.LEX_COLLOC_POS_GROUP, DSL.name("lex_colloc_pos_group_pkey"), new TableField[] { LexCollocPosGroup.LEX_COLLOC_POS_GROUP.ID }, true);
    public static final UniqueKey<LexCollocRelGroupRecord> LEX_COLLOC_REL_GROUP_PKEY = Internal.createUniqueKey(LexCollocRelGroup.LEX_COLLOC_REL_GROUP, DSL.name("lex_colloc_rel_group_pkey"), new TableField[] { LexCollocRelGroup.LEX_COLLOC_REL_GROUP.ID }, true);
    public static final UniqueKey<LexRelMappingRecord> LEX_REL_MAPPING_CODE1_CODE2_KEY = Internal.createUniqueKey(LexRelMapping.LEX_REL_MAPPING, DSL.name("lex_rel_mapping_code1_code2_key"), new TableField[] { LexRelMapping.LEX_REL_MAPPING.CODE1, LexRelMapping.LEX_REL_MAPPING.CODE2 }, true);
    public static final UniqueKey<LexRelTypeRecord> LEX_REL_TYPE_PKEY = Internal.createUniqueKey(LexRelType.LEX_REL_TYPE, DSL.name("lex_rel_type_pkey"), new TableField[] { LexRelType.LEX_REL_TYPE.CODE }, true);
    public static final UniqueKey<LexRelTypeLabelRecord> LEX_REL_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(LexRelTypeLabel.LEX_REL_TYPE_LABEL, DSL.name("lex_rel_type_label_code_lang_type_key"), new TableField[] { LexRelTypeLabel.LEX_REL_TYPE_LABEL.CODE, LexRelTypeLabel.LEX_REL_TYPE_LABEL.LANG, LexRelTypeLabel.LEX_REL_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<LexRelationRecord> LEX_RELATION_LEXEME1_ID_LEXEME2_ID_LEX_REL_TYPE_CODE_KEY = Internal.createUniqueKey(LexRelation.LEX_RELATION, DSL.name("lex_relation_lexeme1_id_lexeme2_id_lex_rel_type_code_key"), new TableField[] { LexRelation.LEX_RELATION.LEXEME1_ID, LexRelation.LEX_RELATION.LEXEME2_ID, LexRelation.LEX_RELATION.LEX_REL_TYPE_CODE }, true);
    public static final UniqueKey<LexRelationRecord> LEX_RELATION_PKEY = Internal.createUniqueKey(LexRelation.LEX_RELATION, DSL.name("lex_relation_pkey"), new TableField[] { LexRelation.LEX_RELATION.ID }, true);
    public static final UniqueKey<LexemeRecord> LEXEME_PKEY = Internal.createUniqueKey(Lexeme.LEXEME, DSL.name("lexeme_pkey"), new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final UniqueKey<LexemeRecord> LEXEME_WORD_ID_MEANING_ID_DATASET_CODE_KEY = Internal.createUniqueKey(Lexeme.LEXEME, DSL.name("lexeme_word_id_meaning_id_dataset_code_key"), new TableField[] { Lexeme.LEXEME.WORD_ID, Lexeme.LEXEME.MEANING_ID, Lexeme.LEXEME.DATASET_CODE }, true);
    public static final UniqueKey<LexemeActivityLogRecord> LEXEME_ACTIVITY_LOG_LEXEME_ID_ACTIVITY_LOG_ID_KEY = Internal.createUniqueKey(LexemeActivityLog.LEXEME_ACTIVITY_LOG, DSL.name("lexeme_activity_log_lexeme_id_activity_log_id_key"), new TableField[] { LexemeActivityLog.LEXEME_ACTIVITY_LOG.LEXEME_ID, LexemeActivityLog.LEXEME_ACTIVITY_LOG.ACTIVITY_LOG_ID }, true);
    public static final UniqueKey<LexemeActivityLogRecord> LEXEME_ACTIVITY_LOG_PKEY = Internal.createUniqueKey(LexemeActivityLog.LEXEME_ACTIVITY_LOG, DSL.name("lexeme_activity_log_pkey"), new TableField[] { LexemeActivityLog.LEXEME_ACTIVITY_LOG.ID }, true);
    public static final UniqueKey<LexemeDerivRecord> LEXEME_DERIV_LEXEME_ID_DERIV_CODE_KEY = Internal.createUniqueKey(LexemeDeriv.LEXEME_DERIV, DSL.name("lexeme_deriv_lexeme_id_deriv_code_key"), new TableField[] { LexemeDeriv.LEXEME_DERIV.LEXEME_ID, LexemeDeriv.LEXEME_DERIV.DERIV_CODE }, true);
    public static final UniqueKey<LexemeDerivRecord> LEXEME_DERIV_PKEY = Internal.createUniqueKey(LexemeDeriv.LEXEME_DERIV, DSL.name("lexeme_deriv_pkey"), new TableField[] { LexemeDeriv.LEXEME_DERIV.ID }, true);
    public static final UniqueKey<LexemeFreeformRecord> LEXEME_FREEFORM_LEXEME_ID_FREEFORM_ID_KEY = Internal.createUniqueKey(LexemeFreeform.LEXEME_FREEFORM, DSL.name("lexeme_freeform_lexeme_id_freeform_id_key"), new TableField[] { LexemeFreeform.LEXEME_FREEFORM.LEXEME_ID, LexemeFreeform.LEXEME_FREEFORM.FREEFORM_ID }, true);
    public static final UniqueKey<LexemeFreeformRecord> LEXEME_FREEFORM_PKEY = Internal.createUniqueKey(LexemeFreeform.LEXEME_FREEFORM, DSL.name("lexeme_freeform_pkey"), new TableField[] { LexemeFreeform.LEXEME_FREEFORM.ID }, true);
    public static final UniqueKey<LexemeNoteRecord> LEXEME_NOTE_PKEY = Internal.createUniqueKey(LexemeNote.LEXEME_NOTE, DSL.name("lexeme_note_pkey"), new TableField[] { LexemeNote.LEXEME_NOTE.ID }, true);
    public static final UniqueKey<LexemeNoteSourceLinkRecord> LEXEME_NOTE_SOURCE_LINK_PKEY = Internal.createUniqueKey(LexemeNoteSourceLink.LEXEME_NOTE_SOURCE_LINK, DSL.name("lexeme_note_source_link_pkey"), new TableField[] { LexemeNoteSourceLink.LEXEME_NOTE_SOURCE_LINK.ID }, true);
    public static final UniqueKey<LexemePosRecord> LEXEME_POS_LEXEME_ID_POS_CODE_KEY = Internal.createUniqueKey(LexemePos.LEXEME_POS, DSL.name("lexeme_pos_lexeme_id_pos_code_key"), new TableField[] { LexemePos.LEXEME_POS.LEXEME_ID, LexemePos.LEXEME_POS.POS_CODE }, true);
    public static final UniqueKey<LexemePosRecord> LEXEME_POS_PKEY = Internal.createUniqueKey(LexemePos.LEXEME_POS, DSL.name("lexeme_pos_pkey"), new TableField[] { LexemePos.LEXEME_POS.ID }, true);
    public static final UniqueKey<LexemeRegionRecord> LEXEME_REGION_LEXEME_ID_REGION_CODE_KEY = Internal.createUniqueKey(LexemeRegion.LEXEME_REGION, DSL.name("lexeme_region_lexeme_id_region_code_key"), new TableField[] { LexemeRegion.LEXEME_REGION.LEXEME_ID, LexemeRegion.LEXEME_REGION.REGION_CODE }, true);
    public static final UniqueKey<LexemeRegionRecord> LEXEME_REGION_PKEY = Internal.createUniqueKey(LexemeRegion.LEXEME_REGION, DSL.name("lexeme_region_pkey"), new TableField[] { LexemeRegion.LEXEME_REGION.ID }, true);
    public static final UniqueKey<LexemeRegisterRecord> LEXEME_REGISTER_LEXEME_ID_REGISTER_CODE_KEY = Internal.createUniqueKey(LexemeRegister.LEXEME_REGISTER, DSL.name("lexeme_register_lexeme_id_register_code_key"), new TableField[] { LexemeRegister.LEXEME_REGISTER.LEXEME_ID, LexemeRegister.LEXEME_REGISTER.REGISTER_CODE }, true);
    public static final UniqueKey<LexemeRegisterRecord> LEXEME_REGISTER_PKEY = Internal.createUniqueKey(LexemeRegister.LEXEME_REGISTER, DSL.name("lexeme_register_pkey"), new TableField[] { LexemeRegister.LEXEME_REGISTER.ID }, true);
    public static final UniqueKey<LexemeSourceLinkRecord> LEXEME_SOURCE_LINK_PKEY = Internal.createUniqueKey(LexemeSourceLink.LEXEME_SOURCE_LINK, DSL.name("lexeme_source_link_pkey"), new TableField[] { LexemeSourceLink.LEXEME_SOURCE_LINK.ID }, true);
    public static final UniqueKey<LexemeTagRecord> LEXEME_TAG_LEXEME_ID_TAG_NAME_KEY = Internal.createUniqueKey(LexemeTag.LEXEME_TAG, DSL.name("lexeme_tag_lexeme_id_tag_name_key"), new TableField[] { LexemeTag.LEXEME_TAG.LEXEME_ID, LexemeTag.LEXEME_TAG.TAG_NAME }, true);
    public static final UniqueKey<LexemeTagRecord> LEXEME_TAG_PKEY = Internal.createUniqueKey(LexemeTag.LEXEME_TAG, DSL.name("lexeme_tag_pkey"), new TableField[] { LexemeTag.LEXEME_TAG.ID }, true);
    public static final UniqueKey<MeaningRecord> MEANING_PKEY = Internal.createUniqueKey(Meaning.MEANING, DSL.name("meaning_pkey"), new TableField[] { Meaning.MEANING.ID }, true);
    public static final UniqueKey<MeaningActivityLogRecord> MEANING_ACTIVITY_LOG_MEANING_ID_ACTIVITY_LOG_ID_KEY = Internal.createUniqueKey(MeaningActivityLog.MEANING_ACTIVITY_LOG, DSL.name("meaning_activity_log_meaning_id_activity_log_id_key"), new TableField[] { MeaningActivityLog.MEANING_ACTIVITY_LOG.MEANING_ID, MeaningActivityLog.MEANING_ACTIVITY_LOG.ACTIVITY_LOG_ID }, true);
    public static final UniqueKey<MeaningActivityLogRecord> MEANING_ACTIVITY_LOG_PKEY = Internal.createUniqueKey(MeaningActivityLog.MEANING_ACTIVITY_LOG, DSL.name("meaning_activity_log_pkey"), new TableField[] { MeaningActivityLog.MEANING_ACTIVITY_LOG.ID }, true);
    public static final UniqueKey<MeaningDomainRecord> MEANING_DOMAIN_MEANING_ID_DOMAIN_CODE_DOMAIN_ORIGIN_KEY = Internal.createUniqueKey(MeaningDomain.MEANING_DOMAIN, DSL.name("meaning_domain_meaning_id_domain_code_domain_origin_key"), new TableField[] { MeaningDomain.MEANING_DOMAIN.MEANING_ID, MeaningDomain.MEANING_DOMAIN.DOMAIN_CODE, MeaningDomain.MEANING_DOMAIN.DOMAIN_ORIGIN }, true);
    public static final UniqueKey<MeaningDomainRecord> MEANING_DOMAIN_PKEY = Internal.createUniqueKey(MeaningDomain.MEANING_DOMAIN, DSL.name("meaning_domain_pkey"), new TableField[] { MeaningDomain.MEANING_DOMAIN.ID }, true);
    public static final UniqueKey<MeaningForumRecord> MEANING_FORUM_PKEY = Internal.createUniqueKey(MeaningForum.MEANING_FORUM, DSL.name("meaning_forum_pkey"), new TableField[] { MeaningForum.MEANING_FORUM.ID }, true);
    public static final UniqueKey<MeaningFreeformRecord> MEANING_FREEFORM_MEANING_ID_FREEFORM_ID_KEY = Internal.createUniqueKey(MeaningFreeform.MEANING_FREEFORM, DSL.name("meaning_freeform_meaning_id_freeform_id_key"), new TableField[] { MeaningFreeform.MEANING_FREEFORM.MEANING_ID, MeaningFreeform.MEANING_FREEFORM.FREEFORM_ID }, true);
    public static final UniqueKey<MeaningFreeformRecord> MEANING_FREEFORM_PKEY = Internal.createUniqueKey(MeaningFreeform.MEANING_FREEFORM, DSL.name("meaning_freeform_pkey"), new TableField[] { MeaningFreeform.MEANING_FREEFORM.ID }, true);
    public static final UniqueKey<MeaningImageRecord> MEANING_IMAGE_PKEY = Internal.createUniqueKey(MeaningImage.MEANING_IMAGE, DSL.name("meaning_image_pkey"), new TableField[] { MeaningImage.MEANING_IMAGE.ID }, true);
    public static final UniqueKey<MeaningImageSourceLinkRecord> MEANING_IMAGE_SOURCE_LINK_PKEY = Internal.createUniqueKey(MeaningImageSourceLink.MEANING_IMAGE_SOURCE_LINK, DSL.name("meaning_image_source_link_pkey"), new TableField[] { MeaningImageSourceLink.MEANING_IMAGE_SOURCE_LINK.ID }, true);
    public static final UniqueKey<MeaningLastActivityLogRecord> MEANING_LAST_ACTIVITY_LOG_MEANING_ID_TYPE_KEY = Internal.createUniqueKey(MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG, DSL.name("meaning_last_activity_log_meaning_id_type_key"), new TableField[] { MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG.MEANING_ID, MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG.TYPE }, true);
    public static final UniqueKey<MeaningLastActivityLogRecord> MEANING_LAST_ACTIVITY_LOG_PKEY = Internal.createUniqueKey(MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG, DSL.name("meaning_last_activity_log_pkey"), new TableField[] { MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG.ID }, true);
    public static final UniqueKey<MeaningNoteRecord> MEANING_NOTE_PKEY = Internal.createUniqueKey(MeaningNote.MEANING_NOTE, DSL.name("meaning_note_pkey"), new TableField[] { MeaningNote.MEANING_NOTE.ID }, true);
    public static final UniqueKey<MeaningNoteSourceLinkRecord> MEANING_NOTE_SOURCE_LINK_PKEY = Internal.createUniqueKey(MeaningNoteSourceLink.MEANING_NOTE_SOURCE_LINK, DSL.name("meaning_note_source_link_pkey"), new TableField[] { MeaningNoteSourceLink.MEANING_NOTE_SOURCE_LINK.ID }, true);
    public static final UniqueKey<MeaningNrRecord> MEANING_NR_MEANING_ID_MNR_DATASET_CODE_KEY = Internal.createUniqueKey(MeaningNr.MEANING_NR, DSL.name("meaning_nr_meaning_id_mnr_dataset_code_key"), new TableField[] { MeaningNr.MEANING_NR.MEANING_ID, MeaningNr.MEANING_NR.MNR, MeaningNr.MEANING_NR.DATASET_CODE }, true);
    public static final UniqueKey<MeaningNrRecord> MEANING_NR_PKEY = Internal.createUniqueKey(MeaningNr.MEANING_NR, DSL.name("meaning_nr_pkey"), new TableField[] { MeaningNr.MEANING_NR.ID }, true);
    public static final UniqueKey<MeaningRelMappingRecord> MEANING_REL_MAPPING_CODE1_CODE2_KEY = Internal.createUniqueKey(MeaningRelMapping.MEANING_REL_MAPPING, DSL.name("meaning_rel_mapping_code1_code2_key"), new TableField[] { MeaningRelMapping.MEANING_REL_MAPPING.CODE1, MeaningRelMapping.MEANING_REL_MAPPING.CODE2 }, true);
    public static final UniqueKey<MeaningRelTypeRecord> MEANING_REL_TYPE_PKEY = Internal.createUniqueKey(MeaningRelType.MEANING_REL_TYPE, DSL.name("meaning_rel_type_pkey"), new TableField[] { MeaningRelType.MEANING_REL_TYPE.CODE }, true);
    public static final UniqueKey<MeaningRelTypeLabelRecord> MEANING_REL_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL, DSL.name("meaning_rel_type_label_code_lang_type_key"), new TableField[] { MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL.CODE, MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL.LANG, MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<MeaningRelationRecord> MEANING_RELATION_MEANING1_ID_MEANING2_ID_MEANING_REL_TYPE_C_KEY = Internal.createUniqueKey(MeaningRelation.MEANING_RELATION, DSL.name("meaning_relation_meaning1_id_meaning2_id_meaning_rel_type_c_key"), new TableField[] { MeaningRelation.MEANING_RELATION.MEANING1_ID, MeaningRelation.MEANING_RELATION.MEANING2_ID, MeaningRelation.MEANING_RELATION.MEANING_REL_TYPE_CODE }, true);
    public static final UniqueKey<MeaningRelationRecord> MEANING_RELATION_PKEY = Internal.createUniqueKey(MeaningRelation.MEANING_RELATION, DSL.name("meaning_relation_pkey"), new TableField[] { MeaningRelation.MEANING_RELATION.ID }, true);
    public static final UniqueKey<MeaningSemanticTypeRecord> MEANING_SEMANTIC_TYPE_MEANING_ID_SEMANTIC_TYPE_CODE_KEY = Internal.createUniqueKey(MeaningSemanticType.MEANING_SEMANTIC_TYPE, DSL.name("meaning_semantic_type_meaning_id_semantic_type_code_key"), new TableField[] { MeaningSemanticType.MEANING_SEMANTIC_TYPE.MEANING_ID, MeaningSemanticType.MEANING_SEMANTIC_TYPE.SEMANTIC_TYPE_CODE }, true);
    public static final UniqueKey<MeaningSemanticTypeRecord> MEANING_SEMANTIC_TYPE_PKEY = Internal.createUniqueKey(MeaningSemanticType.MEANING_SEMANTIC_TYPE, DSL.name("meaning_semantic_type_pkey"), new TableField[] { MeaningSemanticType.MEANING_SEMANTIC_TYPE.ID }, true);
    public static final UniqueKey<MeaningTagRecord> MEANING_TAG_MEANING_ID_TAG_NAME_KEY = Internal.createUniqueKey(MeaningTag.MEANING_TAG, DSL.name("meaning_tag_meaning_id_tag_name_key"), new TableField[] { MeaningTag.MEANING_TAG.MEANING_ID, MeaningTag.MEANING_TAG.TAG_NAME }, true);
    public static final UniqueKey<MeaningTagRecord> MEANING_TAG_PKEY = Internal.createUniqueKey(MeaningTag.MEANING_TAG, DSL.name("meaning_tag_pkey"), new TableField[] { MeaningTag.MEANING_TAG.ID }, true);
    public static final UniqueKey<MorphRecord> MORPH_PKEY = Internal.createUniqueKey(Morph.MORPH, DSL.name("morph_pkey"), new TableField[] { Morph.MORPH.CODE }, true);
    public static final UniqueKey<MorphFreqRecord> MORPH_FREQ_FREQ_CORP_ID_MORPH_CODE_KEY = Internal.createUniqueKey(MorphFreq.MORPH_FREQ, DSL.name("morph_freq_freq_corp_id_morph_code_key"), new TableField[] { MorphFreq.MORPH_FREQ.FREQ_CORP_ID, MorphFreq.MORPH_FREQ.MORPH_CODE }, true);
    public static final UniqueKey<MorphFreqRecord> MORPH_FREQ_PKEY = Internal.createUniqueKey(MorphFreq.MORPH_FREQ, DSL.name("morph_freq_pkey"), new TableField[] { MorphFreq.MORPH_FREQ.ID }, true);
    public static final UniqueKey<MorphLabelRecord> MORPH_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(MorphLabel.MORPH_LABEL, DSL.name("morph_label_code_lang_type_key"), new TableField[] { MorphLabel.MORPH_LABEL.CODE, MorphLabel.MORPH_LABEL.LANG, MorphLabel.MORPH_LABEL.TYPE }, true);
    public static final UniqueKey<NewsArticleRecord> NEWS_ARTICLE_PKEY = Internal.createUniqueKey(NewsArticle.NEWS_ARTICLE, DSL.name("news_article_pkey"), new TableField[] { NewsArticle.NEWS_ARTICLE.ID }, true);
    public static final UniqueKey<ParadigmRecord> PARADIGM_PKEY = Internal.createUniqueKey(Paradigm.PARADIGM, DSL.name("paradigm_pkey"), new TableField[] { Paradigm.PARADIGM.ID }, true);
    public static final UniqueKey<ParadigmFormRecord> PARADIGM_FORM_PKEY = Internal.createUniqueKey(ParadigmForm.PARADIGM_FORM, DSL.name("paradigm_form_pkey"), new TableField[] { ParadigmForm.PARADIGM_FORM.ID }, true);
    public static final UniqueKey<PosRecord> POS_PKEY = Internal.createUniqueKey(Pos.POS, DSL.name("pos_pkey"), new TableField[] { Pos.POS.CODE }, true);
    public static final UniqueKey<PosGroupRecord> POS_GROUP_PKEY = Internal.createUniqueKey(PosGroup.POS_GROUP, DSL.name("pos_group_pkey"), new TableField[] { PosGroup.POS_GROUP.CODE }, true);
    public static final UniqueKey<PosGroupLabelRecord> POS_GROUP_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(PosGroupLabel.POS_GROUP_LABEL, DSL.name("pos_group_label_code_lang_type_key"), new TableField[] { PosGroupLabel.POS_GROUP_LABEL.CODE, PosGroupLabel.POS_GROUP_LABEL.LANG, PosGroupLabel.POS_GROUP_LABEL.TYPE }, true);
    public static final UniqueKey<PosLabelRecord> POS_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(PosLabel.POS_LABEL, DSL.name("pos_label_code_lang_type_key"), new TableField[] { PosLabel.POS_LABEL.CODE, PosLabel.POS_LABEL.LANG, PosLabel.POS_LABEL.TYPE }, true);
    public static final UniqueKey<ProficiencyLevelRecord> PROFICIENCY_LEVEL_PKEY = Internal.createUniqueKey(ProficiencyLevel.PROFICIENCY_LEVEL, DSL.name("proficiency_level_pkey"), new TableField[] { ProficiencyLevel.PROFICIENCY_LEVEL.CODE }, true);
    public static final UniqueKey<ProficiencyLevelLabelRecord> PROFICIENCY_LEVEL_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL, DSL.name("proficiency_level_label_code_lang_type_key"), new TableField[] { ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL.CODE, ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL.LANG, ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL.TYPE }, true);
    public static final UniqueKey<RegionRecord> REGION_PKEY = Internal.createUniqueKey(Region.REGION, DSL.name("region_pkey"), new TableField[] { Region.REGION.CODE }, true);
    public static final UniqueKey<RegisterRecord> REGISTER_PKEY = Internal.createUniqueKey(Register.REGISTER, DSL.name("register_pkey"), new TableField[] { Register.REGISTER.CODE }, true);
    public static final UniqueKey<RegisterLabelRecord> REGISTER_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(RegisterLabel.REGISTER_LABEL, DSL.name("register_label_code_lang_type_key"), new TableField[] { RegisterLabel.REGISTER_LABEL.CODE, RegisterLabel.REGISTER_LABEL.LANG, RegisterLabel.REGISTER_LABEL.TYPE }, true);
    public static final UniqueKey<RelGroupRecord> REL_GROUP_PKEY = Internal.createUniqueKey(RelGroup.REL_GROUP, DSL.name("rel_group_pkey"), new TableField[] { RelGroup.REL_GROUP.CODE }, true);
    public static final UniqueKey<RelGroupLabelRecord> REL_GROUP_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(RelGroupLabel.REL_GROUP_LABEL, DSL.name("rel_group_label_code_lang_type_key"), new TableField[] { RelGroupLabel.REL_GROUP_LABEL.CODE, RelGroupLabel.REL_GROUP_LABEL.LANG, RelGroupLabel.REL_GROUP_LABEL.TYPE }, true);
    public static final UniqueKey<SemanticTypeRecord> SEMANTIC_TYPE_PKEY = Internal.createUniqueKey(SemanticType.SEMANTIC_TYPE, DSL.name("semantic_type_pkey"), new TableField[] { SemanticType.SEMANTIC_TYPE.CODE }, true);
    public static final UniqueKey<SemanticTypeLabelRecord> SEMANTIC_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(SemanticTypeLabel.SEMANTIC_TYPE_LABEL, DSL.name("semantic_type_label_code_lang_type_key"), new TableField[] { SemanticTypeLabel.SEMANTIC_TYPE_LABEL.CODE, SemanticTypeLabel.SEMANTIC_TYPE_LABEL.LANG, SemanticTypeLabel.SEMANTIC_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<SourceRecord> SOURCE_PKEY = Internal.createUniqueKey(Source.SOURCE, DSL.name("source_pkey"), new TableField[] { Source.SOURCE.ID }, true);
    public static final UniqueKey<SourceActivityLogRecord> SOURCE_ACTIVITY_LOG_PKEY = Internal.createUniqueKey(SourceActivityLog.SOURCE_ACTIVITY_LOG, DSL.name("source_activity_log_pkey"), new TableField[] { SourceActivityLog.SOURCE_ACTIVITY_LOG.ID }, true);
    public static final UniqueKey<SourceActivityLogRecord> SOURCE_ACTIVITY_LOG_SOURCE_ID_ACTIVITY_LOG_ID_KEY = Internal.createUniqueKey(SourceActivityLog.SOURCE_ACTIVITY_LOG, DSL.name("source_activity_log_source_id_activity_log_id_key"), new TableField[] { SourceActivityLog.SOURCE_ACTIVITY_LOG.SOURCE_ID, SourceActivityLog.SOURCE_ACTIVITY_LOG.ACTIVITY_LOG_ID }, true);
    public static final UniqueKey<SourceFreeformRecord> SOURCE_FREEFORM_PKEY = Internal.createUniqueKey(SourceFreeform.SOURCE_FREEFORM, DSL.name("source_freeform_pkey"), new TableField[] { SourceFreeform.SOURCE_FREEFORM.ID }, true);
    public static final UniqueKey<SourceFreeformRecord> SOURCE_FREEFORM_SOURCE_ID_FREEFORM_ID_KEY = Internal.createUniqueKey(SourceFreeform.SOURCE_FREEFORM, DSL.name("source_freeform_source_id_freeform_id_key"), new TableField[] { SourceFreeform.SOURCE_FREEFORM.SOURCE_ID, SourceFreeform.SOURCE_FREEFORM.FREEFORM_ID }, true);
    public static final UniqueKey<TagRecord> TAG_PKEY = Internal.createUniqueKey(Tag.TAG, DSL.name("tag_pkey"), new TableField[] { Tag.TAG.NAME }, true);
    public static final UniqueKey<TempDsImportPkMapRecord> TEMP_DS_IMPORT_PK_MAP_PKEY = Internal.createUniqueKey(TempDsImportPkMap.TEMP_DS_IMPORT_PK_MAP, DSL.name("temp_ds_import_pk_map_pkey"), new TableField[] { TempDsImportPkMap.TEMP_DS_IMPORT_PK_MAP.ID }, true);
    public static final UniqueKey<TempDsImportQueueRecord> TEMP_DS_IMPORT_QUEUE_PKEY = Internal.createUniqueKey(TempDsImportQueue.TEMP_DS_IMPORT_QUEUE, DSL.name("temp_ds_import_queue_pkey"), new TableField[] { TempDsImportQueue.TEMP_DS_IMPORT_QUEUE.ID }, true);
    public static final UniqueKey<TermsOfUseRecord> TERMS_OF_USE_PKEY = Internal.createUniqueKey(TermsOfUse.TERMS_OF_USE, DSL.name("terms_of_use_pkey"), new TableField[] { TermsOfUse.TERMS_OF_USE.ID }, true);
    public static final UniqueKey<TermsOfUseRecord> TERMS_OF_USE_VERSION_KEY = Internal.createUniqueKey(TermsOfUse.TERMS_OF_USE, DSL.name("terms_of_use_version_key"), new TableField[] { TermsOfUse.TERMS_OF_USE.VERSION }, true);
    public static final UniqueKey<UsageRecord> USAGE_PKEY = Internal.createUniqueKey(Usage.USAGE, DSL.name("usage_pkey"), new TableField[] { Usage.USAGE.ID }, true);
    public static final UniqueKey<UsageDefinitionRecord> USAGE_DEFINITION_PKEY = Internal.createUniqueKey(UsageDefinition.USAGE_DEFINITION, DSL.name("usage_definition_pkey"), new TableField[] { UsageDefinition.USAGE_DEFINITION.ID }, true);
    public static final UniqueKey<UsageSourceLinkRecord> USAGE_SOURCE_LINK_PKEY = Internal.createUniqueKey(UsageSourceLink.USAGE_SOURCE_LINK, DSL.name("usage_source_link_pkey"), new TableField[] { UsageSourceLink.USAGE_SOURCE_LINK.ID }, true);
    public static final UniqueKey<UsageTranslationRecord> USAGE_TRANSLATION_PKEY = Internal.createUniqueKey(UsageTranslation.USAGE_TRANSLATION, DSL.name("usage_translation_pkey"), new TableField[] { UsageTranslation.USAGE_TRANSLATION.ID }, true);
    public static final UniqueKey<UsageTypeRecord> USAGE_TYPE_PKEY = Internal.createUniqueKey(UsageType.USAGE_TYPE, DSL.name("usage_type_pkey"), new TableField[] { UsageType.USAGE_TYPE.CODE }, true);
    public static final UniqueKey<UsageTypeLabelRecord> USAGE_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(UsageTypeLabel.USAGE_TYPE_LABEL, DSL.name("usage_type_label_code_lang_type_key"), new TableField[] { UsageTypeLabel.USAGE_TYPE_LABEL.CODE, UsageTypeLabel.USAGE_TYPE_LABEL.LANG, UsageTypeLabel.USAGE_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<ValueStateRecord> VALUE_STATE_PKEY = Internal.createUniqueKey(ValueState.VALUE_STATE, DSL.name("value_state_pkey"), new TableField[] { ValueState.VALUE_STATE.CODE }, true);
    public static final UniqueKey<ValueStateLabelRecord> VALUE_STATE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(ValueStateLabel.VALUE_STATE_LABEL, DSL.name("value_state_label_code_lang_type_key"), new TableField[] { ValueStateLabel.VALUE_STATE_LABEL.CODE, ValueStateLabel.VALUE_STATE_LABEL.LANG, ValueStateLabel.VALUE_STATE_LABEL.TYPE }, true);
    public static final UniqueKey<WordRecord> WORD_PKEY = Internal.createUniqueKey(Word.WORD, DSL.name("word_pkey"), new TableField[] { Word.WORD.ID }, true);
    public static final UniqueKey<WordActivityLogRecord> WORD_ACTIVITY_LOG_PKEY = Internal.createUniqueKey(WordActivityLog.WORD_ACTIVITY_LOG, DSL.name("word_activity_log_pkey"), new TableField[] { WordActivityLog.WORD_ACTIVITY_LOG.ID }, true);
    public static final UniqueKey<WordActivityLogRecord> WORD_ACTIVITY_LOG_WORD_ID_ACTIVITY_LOG_ID_KEY = Internal.createUniqueKey(WordActivityLog.WORD_ACTIVITY_LOG, DSL.name("word_activity_log_word_id_activity_log_id_key"), new TableField[] { WordActivityLog.WORD_ACTIVITY_LOG.WORD_ID, WordActivityLog.WORD_ACTIVITY_LOG.ACTIVITY_LOG_ID }, true);
    public static final UniqueKey<WordEtymologyRecord> WORD_ETYMOLOGY_PKEY = Internal.createUniqueKey(WordEtymology.WORD_ETYMOLOGY, DSL.name("word_etymology_pkey"), new TableField[] { WordEtymology.WORD_ETYMOLOGY.ID }, true);
    public static final UniqueKey<WordEtymologyRelationRecord> WORD_ETYMOLOGY_RELATION_PKEY = Internal.createUniqueKey(WordEtymologyRelation.WORD_ETYMOLOGY_RELATION, DSL.name("word_etymology_relation_pkey"), new TableField[] { WordEtymologyRelation.WORD_ETYMOLOGY_RELATION.ID }, true);
    public static final UniqueKey<WordEtymologyRelationRecord> WORD_ETYMOLOGY_RELATION_WORD_ETYM_ID_RELATED_WORD_ID_KEY = Internal.createUniqueKey(WordEtymologyRelation.WORD_ETYMOLOGY_RELATION, DSL.name("word_etymology_relation_word_etym_id_related_word_id_key"), new TableField[] { WordEtymologyRelation.WORD_ETYMOLOGY_RELATION.WORD_ETYM_ID, WordEtymologyRelation.WORD_ETYMOLOGY_RELATION.RELATED_WORD_ID }, true);
    public static final UniqueKey<WordEtymologySourceLinkRecord> WORD_ETYMOLOGY_SOURCE_LINK_PKEY = Internal.createUniqueKey(WordEtymologySourceLink.WORD_ETYMOLOGY_SOURCE_LINK, DSL.name("word_etymology_source_link_pkey"), new TableField[] { WordEtymologySourceLink.WORD_ETYMOLOGY_SOURCE_LINK.ID }, true);
    public static final UniqueKey<WordForumRecord> WORD_FORUM_PKEY = Internal.createUniqueKey(WordForum.WORD_FORUM, DSL.name("word_forum_pkey"), new TableField[] { WordForum.WORD_FORUM.ID }, true);
    public static final UniqueKey<WordFreeformRecord> WORD_FREEFORM_PKEY = Internal.createUniqueKey(WordFreeform.WORD_FREEFORM, DSL.name("word_freeform_pkey"), new TableField[] { WordFreeform.WORD_FREEFORM.ID }, true);
    public static final UniqueKey<WordFreeformRecord> WORD_FREEFORM_WORD_ID_FREEFORM_ID_KEY = Internal.createUniqueKey(WordFreeform.WORD_FREEFORM, DSL.name("word_freeform_word_id_freeform_id_key"), new TableField[] { WordFreeform.WORD_FREEFORM.WORD_ID, WordFreeform.WORD_FREEFORM.FREEFORM_ID }, true);
    public static final UniqueKey<WordFreqRecord> WORD_FREQ_FREQ_CORP_ID_WORD_ID_KEY = Internal.createUniqueKey(WordFreq.WORD_FREQ, DSL.name("word_freq_freq_corp_id_word_id_key"), new TableField[] { WordFreq.WORD_FREQ.FREQ_CORP_ID, WordFreq.WORD_FREQ.WORD_ID }, true);
    public static final UniqueKey<WordFreqRecord> WORD_FREQ_PKEY = Internal.createUniqueKey(WordFreq.WORD_FREQ, DSL.name("word_freq_pkey"), new TableField[] { WordFreq.WORD_FREQ.ID }, true);
    public static final UniqueKey<WordGroupRecord> WORD_GROUP_PKEY = Internal.createUniqueKey(WordGroup.WORD_GROUP, DSL.name("word_group_pkey"), new TableField[] { WordGroup.WORD_GROUP.ID }, true);
    public static final UniqueKey<WordGroupMemberRecord> WORD_GROUP_MEMBER_PKEY = Internal.createUniqueKey(WordGroupMember.WORD_GROUP_MEMBER, DSL.name("word_group_member_pkey"), new TableField[] { WordGroupMember.WORD_GROUP_MEMBER.ID }, true);
    public static final UniqueKey<WordGroupMemberRecord> WORD_GROUP_MEMBER_WORD_GROUP_ID_WORD_ID_KEY = Internal.createUniqueKey(WordGroupMember.WORD_GROUP_MEMBER, DSL.name("word_group_member_word_group_id_word_id_key"), new TableField[] { WordGroupMember.WORD_GROUP_MEMBER.WORD_GROUP_ID, WordGroupMember.WORD_GROUP_MEMBER.WORD_ID }, true);
    public static final UniqueKey<WordGuidRecord> WORD_GUID_PKEY = Internal.createUniqueKey(WordGuid.WORD_GUID, DSL.name("word_guid_pkey"), new TableField[] { WordGuid.WORD_GUID.ID }, true);
    public static final UniqueKey<WordGuidRecord> WORD_GUID_WORD_ID_GUID_DATASET_CODE_KEY = Internal.createUniqueKey(WordGuid.WORD_GUID, DSL.name("word_guid_word_id_guid_dataset_code_key"), new TableField[] { WordGuid.WORD_GUID.WORD_ID, WordGuid.WORD_GUID.GUID, WordGuid.WORD_GUID.DATASET_CODE }, true);
    public static final UniqueKey<WordLastActivityLogRecord> WORD_LAST_ACTIVITY_LOG_PKEY = Internal.createUniqueKey(WordLastActivityLog.WORD_LAST_ACTIVITY_LOG, DSL.name("word_last_activity_log_pkey"), new TableField[] { WordLastActivityLog.WORD_LAST_ACTIVITY_LOG.ID }, true);
    public static final UniqueKey<WordLastActivityLogRecord> WORD_LAST_ACTIVITY_LOG_WORD_ID_KEY = Internal.createUniqueKey(WordLastActivityLog.WORD_LAST_ACTIVITY_LOG, DSL.name("word_last_activity_log_word_id_key"), new TableField[] { WordLastActivityLog.WORD_LAST_ACTIVITY_LOG.WORD_ID }, true);
    public static final UniqueKey<WordOdMorphRecord> WORD_OD_MORPH_PKEY = Internal.createUniqueKey(WordOdMorph.WORD_OD_MORPH, DSL.name("word_od_morph_pkey"), new TableField[] { WordOdMorph.WORD_OD_MORPH.ID }, true);
    public static final UniqueKey<WordOdMorphRecord> WORD_OD_MORPH_WORD_ID_KEY = Internal.createUniqueKey(WordOdMorph.WORD_OD_MORPH, DSL.name("word_od_morph_word_id_key"), new TableField[] { WordOdMorph.WORD_OD_MORPH.WORD_ID }, true);
    public static final UniqueKey<WordOdRecommendationRecord> WORD_OD_RECOMMENDATION_PKEY = Internal.createUniqueKey(WordOdRecommendation.WORD_OD_RECOMMENDATION, DSL.name("word_od_recommendation_pkey"), new TableField[] { WordOdRecommendation.WORD_OD_RECOMMENDATION.ID }, true);
    public static final UniqueKey<WordOdRecommendationRecord> WORD_OD_RECOMMENDATION_WORD_ID_KEY = Internal.createUniqueKey(WordOdRecommendation.WORD_OD_RECOMMENDATION, DSL.name("word_od_recommendation_word_id_key"), new TableField[] { WordOdRecommendation.WORD_OD_RECOMMENDATION.WORD_ID }, true);
    public static final UniqueKey<WordOdUsageRecord> WORD_OD_USAGE_PKEY = Internal.createUniqueKey(WordOdUsage.WORD_OD_USAGE, DSL.name("word_od_usage_pkey"), new TableField[] { WordOdUsage.WORD_OD_USAGE.ID }, true);
    public static final UniqueKey<WordRelMappingRecord> WORD_REL_MAPPING_CODE1_CODE2_KEY = Internal.createUniqueKey(WordRelMapping.WORD_REL_MAPPING, DSL.name("word_rel_mapping_code1_code2_key"), new TableField[] { WordRelMapping.WORD_REL_MAPPING.CODE1, WordRelMapping.WORD_REL_MAPPING.CODE2 }, true);
    public static final UniqueKey<WordRelTypeRecord> WORD_REL_TYPE_PKEY = Internal.createUniqueKey(WordRelType.WORD_REL_TYPE, DSL.name("word_rel_type_pkey"), new TableField[] { WordRelType.WORD_REL_TYPE.CODE }, true);
    public static final UniqueKey<WordRelTypeLabelRecord> WORD_REL_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(WordRelTypeLabel.WORD_REL_TYPE_LABEL, DSL.name("word_rel_type_label_code_lang_type_key"), new TableField[] { WordRelTypeLabel.WORD_REL_TYPE_LABEL.CODE, WordRelTypeLabel.WORD_REL_TYPE_LABEL.LANG, WordRelTypeLabel.WORD_REL_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<WordRelationRecord> WORD_RELATION_PKEY = Internal.createUniqueKey(WordRelation.WORD_RELATION, DSL.name("word_relation_pkey"), new TableField[] { WordRelation.WORD_RELATION.ID }, true);
    public static final UniqueKey<WordRelationRecord> WORD_RELATION_WORD1_ID_WORD2_ID_WORD_REL_TYPE_CODE_KEY = Internal.createUniqueKey(WordRelation.WORD_RELATION, DSL.name("word_relation_word1_id_word2_id_word_rel_type_code_key"), new TableField[] { WordRelation.WORD_RELATION.WORD1_ID, WordRelation.WORD_RELATION.WORD2_ID, WordRelation.WORD_RELATION.WORD_REL_TYPE_CODE }, true);
    public static final UniqueKey<WordRelationParamRecord> WORD_RELATION_PARAM_PKEY = Internal.createUniqueKey(WordRelationParam.WORD_RELATION_PARAM, DSL.name("word_relation_param_pkey"), new TableField[] { WordRelationParam.WORD_RELATION_PARAM.ID }, true);
    public static final UniqueKey<WordRelationParamRecord> WORD_RELATION_PARAM_WORD_RELATION_ID_NAME_KEY = Internal.createUniqueKey(WordRelationParam.WORD_RELATION_PARAM, DSL.name("word_relation_param_word_relation_id_name_key"), new TableField[] { WordRelationParam.WORD_RELATION_PARAM.WORD_RELATION_ID, WordRelationParam.WORD_RELATION_PARAM.NAME }, true);
    public static final UniqueKey<WordTagRecord> WORD_TAG_PKEY = Internal.createUniqueKey(WordTag.WORD_TAG, DSL.name("word_tag_pkey"), new TableField[] { WordTag.WORD_TAG.ID }, true);
    public static final UniqueKey<WordTagRecord> WORD_TAG_WORD_ID_TAG_NAME_KEY = Internal.createUniqueKey(WordTag.WORD_TAG, DSL.name("word_tag_word_id_tag_name_key"), new TableField[] { WordTag.WORD_TAG.WORD_ID, WordTag.WORD_TAG.TAG_NAME }, true);
    public static final UniqueKey<WordTypeRecord> WORD_TYPE_PKEY = Internal.createUniqueKey(WordType.WORD_TYPE, DSL.name("word_type_pkey"), new TableField[] { WordType.WORD_TYPE.CODE }, true);
    public static final UniqueKey<WordTypeLabelRecord> WORD_TYPE_LABEL_CODE_LANG_TYPE_KEY = Internal.createUniqueKey(WordTypeLabel.WORD_TYPE_LABEL, DSL.name("word_type_label_code_lang_type_key"), new TableField[] { WordTypeLabel.WORD_TYPE_LABEL.CODE, WordTypeLabel.WORD_TYPE_LABEL.LANG, WordTypeLabel.WORD_TYPE_LABEL.TYPE }, true);
    public static final UniqueKey<WordWordTypeRecord> WORD_WORD_TYPE_PKEY = Internal.createUniqueKey(WordWordType.WORD_WORD_TYPE, DSL.name("word_word_type_pkey"), new TableField[] { WordWordType.WORD_WORD_TYPE.ID }, true);
    public static final UniqueKey<WordWordTypeRecord> WORD_WORD_TYPE_WORD_ID_WORD_TYPE_CODE_KEY = Internal.createUniqueKey(WordWordType.WORD_WORD_TYPE, DSL.name("word_word_type_word_id_word_type_code_key"), new TableField[] { WordWordType.WORD_WORD_TYPE.WORD_ID, WordWordType.WORD_WORD_TYPE.WORD_TYPE_CODE }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AspectLabelRecord, AspectRecord> ASPECT_LABEL__ASPECT_LABEL_CODE_FKEY = Internal.createForeignKey(AspectLabel.ASPECT_LABEL, DSL.name("aspect_label_code_fkey"), new TableField[] { AspectLabel.ASPECT_LABEL.CODE }, Keys.ASPECT_PKEY, new TableField[] { Aspect.ASPECT.CODE }, true);
    public static final ForeignKey<AspectLabelRecord, LanguageRecord> ASPECT_LABEL__ASPECT_LABEL_LANG_FKEY = Internal.createForeignKey(AspectLabel.ASPECT_LABEL, DSL.name("aspect_label_lang_fkey"), new TableField[] { AspectLabel.ASPECT_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<AspectLabelRecord, LabelTypeRecord> ASPECT_LABEL__ASPECT_LABEL_TYPE_FKEY = Internal.createForeignKey(AspectLabel.ASPECT_LABEL, DSL.name("aspect_label_type_fkey"), new TableField[] { AspectLabel.ASPECT_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<CollocationMemberRecord, LexemeRecord> COLLOCATION_MEMBER__COLLOCATION_MEMBER_COLLOC_LEXEME_ID_FKEY = Internal.createForeignKey(CollocationMember.COLLOCATION_MEMBER, DSL.name("collocation_member_colloc_lexeme_id_fkey"), new TableField[] { CollocationMember.COLLOCATION_MEMBER.COLLOC_LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<CollocationMemberRecord, FormRecord> COLLOCATION_MEMBER__COLLOCATION_MEMBER_MEMBER_FORM_ID_FKEY = Internal.createForeignKey(CollocationMember.COLLOCATION_MEMBER, DSL.name("collocation_member_member_form_id_fkey"), new TableField[] { CollocationMember.COLLOCATION_MEMBER.MEMBER_FORM_ID }, Keys.FORM_PKEY, new TableField[] { Form.FORM.ID }, true);
    public static final ForeignKey<CollocationMemberRecord, LexemeRecord> COLLOCATION_MEMBER__COLLOCATION_MEMBER_MEMBER_LEXEME_ID_FKEY = Internal.createForeignKey(CollocationMember.COLLOCATION_MEMBER, DSL.name("collocation_member_member_lexeme_id_fkey"), new TableField[] { CollocationMember.COLLOCATION_MEMBER.MEMBER_LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<CollocationMemberRecord, PosGroupRecord> COLLOCATION_MEMBER__COLLOCATION_MEMBER_POS_GROUP_CODE_FKEY = Internal.createForeignKey(CollocationMember.COLLOCATION_MEMBER, DSL.name("collocation_member_pos_group_code_fkey"), new TableField[] { CollocationMember.COLLOCATION_MEMBER.POS_GROUP_CODE }, Keys.POS_GROUP_PKEY, new TableField[] { PosGroup.POS_GROUP.CODE }, true);
    public static final ForeignKey<CollocationMemberRecord, RelGroupRecord> COLLOCATION_MEMBER__COLLOCATION_MEMBER_REL_GROUP_CODE_FKEY = Internal.createForeignKey(CollocationMember.COLLOCATION_MEMBER, DSL.name("collocation_member_rel_group_code_fkey"), new TableField[] { CollocationMember.COLLOCATION_MEMBER.REL_GROUP_CODE }, Keys.REL_GROUP_PKEY, new TableField[] { RelGroup.REL_GROUP.CODE }, true);
    public static final ForeignKey<DataRequestRecord, EkiUserRecord> DATA_REQUEST__DATA_REQUEST_USER_ID_FKEY = Internal.createForeignKey(DataRequest.DATA_REQUEST, DSL.name("data_request_user_id_fkey"), new TableField[] { DataRequest.DATA_REQUEST.USER_ID }, Keys.EKI_USER_PKEY, new TableField[] { EkiUser.EKI_USER.ID }, true);
    public static final ForeignKey<DatasetFreeformTypeRecord, DatasetRecord> DATASET_FREEFORM_TYPE__DATASET_FREEFORM_TYPE_DATASET_CODE_FKEY = Internal.createForeignKey(DatasetFreeformType.DATASET_FREEFORM_TYPE, DSL.name("dataset_freeform_type_dataset_code_fkey"), new TableField[] { DatasetFreeformType.DATASET_FREEFORM_TYPE.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<DatasetFreeformTypeRecord, FreeformTypeRecord> DATASET_FREEFORM_TYPE__DATASET_FREEFORM_TYPE_FREEFORM_TYPE_CODE_FKEY = Internal.createForeignKey(DatasetFreeformType.DATASET_FREEFORM_TYPE, DSL.name("dataset_freeform_type_freeform_type_code_fkey"), new TableField[] { DatasetFreeformType.DATASET_FREEFORM_TYPE.FREEFORM_TYPE_CODE }, Keys.FREEFORM_TYPE_PKEY, new TableField[] { FreeformType.FREEFORM_TYPE.CODE }, true);
    public static final ForeignKey<DatasetPermissionRecord, LanguageRecord> DATASET_PERMISSION__DATASET_PERMISSION_AUTH_LANG_FKEY = Internal.createForeignKey(DatasetPermission.DATASET_PERMISSION, DSL.name("dataset_permission_auth_lang_fkey"), new TableField[] { DatasetPermission.DATASET_PERMISSION.AUTH_LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<DatasetPermissionRecord, DatasetRecord> DATASET_PERMISSION__DATASET_PERMISSION_DATASET_CODE_FKEY = Internal.createForeignKey(DatasetPermission.DATASET_PERMISSION, DSL.name("dataset_permission_dataset_code_fkey"), new TableField[] { DatasetPermission.DATASET_PERMISSION.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<DatasetPermissionRecord, EkiUserRecord> DATASET_PERMISSION__DATASET_PERMISSION_USER_ID_FKEY = Internal.createForeignKey(DatasetPermission.DATASET_PERMISSION, DSL.name("dataset_permission_user_id_fkey"), new TableField[] { DatasetPermission.DATASET_PERMISSION.USER_ID }, Keys.EKI_USER_PKEY, new TableField[] { EkiUser.EKI_USER.ID }, true);
    public static final ForeignKey<DefinitionRecord, DefinitionTypeRecord> DEFINITION__DEFINITION_DEFINITION_TYPE_CODE_FKEY = Internal.createForeignKey(Definition.DEFINITION, DSL.name("definition_definition_type_code_fkey"), new TableField[] { Definition.DEFINITION.DEFINITION_TYPE_CODE }, Keys.DEFINITION_TYPE_PKEY, new TableField[] { DefinitionType.DEFINITION_TYPE.CODE }, true);
    public static final ForeignKey<DefinitionRecord, LanguageRecord> DEFINITION__DEFINITION_LANG_FKEY = Internal.createForeignKey(Definition.DEFINITION, DSL.name("definition_lang_fkey"), new TableField[] { Definition.DEFINITION.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<DefinitionRecord, MeaningRecord> DEFINITION__DEFINITION_MEANING_ID_FKEY = Internal.createForeignKey(Definition.DEFINITION, DSL.name("definition_meaning_id_fkey"), new TableField[] { Definition.DEFINITION.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<DefinitionDatasetRecord, DatasetRecord> DEFINITION_DATASET__DEFINITION_DATASET_DATASET_CODE_FKEY = Internal.createForeignKey(DefinitionDataset.DEFINITION_DATASET, DSL.name("definition_dataset_dataset_code_fkey"), new TableField[] { DefinitionDataset.DEFINITION_DATASET.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<DefinitionDatasetRecord, DefinitionRecord> DEFINITION_DATASET__DEFINITION_DATASET_DEFINITION_ID_FKEY = Internal.createForeignKey(DefinitionDataset.DEFINITION_DATASET, DSL.name("definition_dataset_definition_id_fkey"), new TableField[] { DefinitionDataset.DEFINITION_DATASET.DEFINITION_ID }, Keys.DEFINITION_PKEY, new TableField[] { Definition.DEFINITION.ID }, true);
    public static final ForeignKey<DefinitionFreeformRecord, DefinitionRecord> DEFINITION_FREEFORM__DEFINITION_FREEFORM_DEFINITION_ID_FKEY = Internal.createForeignKey(DefinitionFreeform.DEFINITION_FREEFORM, DSL.name("definition_freeform_definition_id_fkey"), new TableField[] { DefinitionFreeform.DEFINITION_FREEFORM.DEFINITION_ID }, Keys.DEFINITION_PKEY, new TableField[] { Definition.DEFINITION.ID }, true);
    public static final ForeignKey<DefinitionFreeformRecord, FreeformRecord> DEFINITION_FREEFORM__DEFINITION_FREEFORM_FREEFORM_ID_FKEY = Internal.createForeignKey(DefinitionFreeform.DEFINITION_FREEFORM, DSL.name("definition_freeform_freeform_id_fkey"), new TableField[] { DefinitionFreeform.DEFINITION_FREEFORM.FREEFORM_ID }, Keys.FREEFORM_PKEY, new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final ForeignKey<DefinitionNoteRecord, DefinitionRecord> DEFINITION_NOTE__DEFINITION_NOTE_DEFINITION_ID_FKEY = Internal.createForeignKey(DefinitionNote.DEFINITION_NOTE, DSL.name("definition_note_definition_id_fkey"), new TableField[] { DefinitionNote.DEFINITION_NOTE.DEFINITION_ID }, Keys.DEFINITION_PKEY, new TableField[] { Definition.DEFINITION.ID }, true);
    public static final ForeignKey<DefinitionNoteRecord, LanguageRecord> DEFINITION_NOTE__DEFINITION_NOTE_LANG_FKEY = Internal.createForeignKey(DefinitionNote.DEFINITION_NOTE, DSL.name("definition_note_lang_fkey"), new TableField[] { DefinitionNote.DEFINITION_NOTE.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<DefinitionNoteSourceLinkRecord, DefinitionNoteRecord> DEFINITION_NOTE_SOURCE_LINK__DEFINITION_NOTE_SOURCE_LINK_DEFINITION_NOTE_ID_FKEY = Internal.createForeignKey(DefinitionNoteSourceLink.DEFINITION_NOTE_SOURCE_LINK, DSL.name("definition_note_source_link_definition_note_id_fkey"), new TableField[] { DefinitionNoteSourceLink.DEFINITION_NOTE_SOURCE_LINK.DEFINITION_NOTE_ID }, Keys.DEFINITION_NOTE_PKEY, new TableField[] { DefinitionNote.DEFINITION_NOTE.ID }, true);
    public static final ForeignKey<DefinitionNoteSourceLinkRecord, SourceRecord> DEFINITION_NOTE_SOURCE_LINK__DEFINITION_NOTE_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(DefinitionNoteSourceLink.DEFINITION_NOTE_SOURCE_LINK, DSL.name("definition_note_source_link_source_id_fkey"), new TableField[] { DefinitionNoteSourceLink.DEFINITION_NOTE_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<DefinitionSourceLinkRecord, DefinitionRecord> DEFINITION_SOURCE_LINK__DEFINITION_SOURCE_LINK_DEFINITION_ID_FKEY = Internal.createForeignKey(DefinitionSourceLink.DEFINITION_SOURCE_LINK, DSL.name("definition_source_link_definition_id_fkey"), new TableField[] { DefinitionSourceLink.DEFINITION_SOURCE_LINK.DEFINITION_ID }, Keys.DEFINITION_PKEY, new TableField[] { Definition.DEFINITION.ID }, true);
    public static final ForeignKey<DefinitionSourceLinkRecord, SourceRecord> DEFINITION_SOURCE_LINK__DEFINITION_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(DefinitionSourceLink.DEFINITION_SOURCE_LINK, DSL.name("definition_source_link_source_id_fkey"), new TableField[] { DefinitionSourceLink.DEFINITION_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<DefinitionTypeLabelRecord, DefinitionTypeRecord> DEFINITION_TYPE_LABEL__DEFINITION_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(DefinitionTypeLabel.DEFINITION_TYPE_LABEL, DSL.name("definition_type_label_code_fkey"), new TableField[] { DefinitionTypeLabel.DEFINITION_TYPE_LABEL.CODE }, Keys.DEFINITION_TYPE_PKEY, new TableField[] { DefinitionType.DEFINITION_TYPE.CODE }, true);
    public static final ForeignKey<DefinitionTypeLabelRecord, LanguageRecord> DEFINITION_TYPE_LABEL__DEFINITION_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(DefinitionTypeLabel.DEFINITION_TYPE_LABEL, DSL.name("definition_type_label_lang_fkey"), new TableField[] { DefinitionTypeLabel.DEFINITION_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<DefinitionTypeLabelRecord, LabelTypeRecord> DEFINITION_TYPE_LABEL__DEFINITION_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(DefinitionTypeLabel.DEFINITION_TYPE_LABEL, DSL.name("definition_type_label_type_fkey"), new TableField[] { DefinitionTypeLabel.DEFINITION_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<DerivLabelRecord, DerivRecord> DERIV_LABEL__DERIV_LABEL_CODE_FKEY = Internal.createForeignKey(DerivLabel.DERIV_LABEL, DSL.name("deriv_label_code_fkey"), new TableField[] { DerivLabel.DERIV_LABEL.CODE }, Keys.DERIV_PKEY, new TableField[] { Deriv.DERIV.CODE }, true);
    public static final ForeignKey<DerivLabelRecord, LanguageRecord> DERIV_LABEL__DERIV_LABEL_LANG_FKEY = Internal.createForeignKey(DerivLabel.DERIV_LABEL, DSL.name("deriv_label_lang_fkey"), new TableField[] { DerivLabel.DERIV_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<DerivLabelRecord, LabelTypeRecord> DERIV_LABEL__DERIV_LABEL_TYPE_FKEY = Internal.createForeignKey(DerivLabel.DERIV_LABEL, DSL.name("deriv_label_type_fkey"), new TableField[] { DerivLabel.DERIV_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<DisplayMorphLabelRecord, DisplayMorphRecord> DISPLAY_MORPH_LABEL__DISPLAY_MORPH_LABEL_CODE_FKEY = Internal.createForeignKey(DisplayMorphLabel.DISPLAY_MORPH_LABEL, DSL.name("display_morph_label_code_fkey"), new TableField[] { DisplayMorphLabel.DISPLAY_MORPH_LABEL.CODE }, Keys.DISPLAY_MORPH_PKEY, new TableField[] { DisplayMorph.DISPLAY_MORPH.CODE }, true);
    public static final ForeignKey<DisplayMorphLabelRecord, LanguageRecord> DISPLAY_MORPH_LABEL__DISPLAY_MORPH_LABEL_LANG_FKEY = Internal.createForeignKey(DisplayMorphLabel.DISPLAY_MORPH_LABEL, DSL.name("display_morph_label_lang_fkey"), new TableField[] { DisplayMorphLabel.DISPLAY_MORPH_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<DisplayMorphLabelRecord, LabelTypeRecord> DISPLAY_MORPH_LABEL__DISPLAY_MORPH_LABEL_TYPE_FKEY = Internal.createForeignKey(DisplayMorphLabel.DISPLAY_MORPH_LABEL, DSL.name("display_morph_label_type_fkey"), new TableField[] { DisplayMorphLabel.DISPLAY_MORPH_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<DomainRecord, DomainRecord> DOMAIN__DOMAIN_PARENT_CODE_FKEY = Internal.createForeignKey(Domain.DOMAIN, DSL.name("domain_parent_code_fkey"), new TableField[] { Domain.DOMAIN.PARENT_CODE, Domain.DOMAIN.PARENT_ORIGIN }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.CODE, Domain.DOMAIN.ORIGIN }, true);
    public static final ForeignKey<DomainLabelRecord, DomainRecord> DOMAIN_LABEL__DOMAIN_LABEL_CODE_FKEY = Internal.createForeignKey(DomainLabel.DOMAIN_LABEL, DSL.name("domain_label_code_fkey"), new TableField[] { DomainLabel.DOMAIN_LABEL.CODE, DomainLabel.DOMAIN_LABEL.ORIGIN }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.CODE, Domain.DOMAIN.ORIGIN }, true);
    public static final ForeignKey<DomainLabelRecord, LanguageRecord> DOMAIN_LABEL__DOMAIN_LABEL_LANG_FKEY = Internal.createForeignKey(DomainLabel.DOMAIN_LABEL, DSL.name("domain_label_lang_fkey"), new TableField[] { DomainLabel.DOMAIN_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<DomainLabelRecord, LabelTypeRecord> DOMAIN_LABEL__DOMAIN_LABEL_TYPE_FKEY = Internal.createForeignKey(DomainLabel.DOMAIN_LABEL, DSL.name("domain_label_type_fkey"), new TableField[] { DomainLabel.DOMAIN_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<EkiUserRecord, TermsOfUseRecord> EKI_USER__EKI_USER_TERMS_VER_FKEY = Internal.createForeignKey(EkiUser.EKI_USER, DSL.name("eki_user_terms_ver_fkey"), new TableField[] { EkiUser.EKI_USER.TERMS_VER }, Keys.TERMS_OF_USE_VERSION_KEY, new TableField[] { TermsOfUse.TERMS_OF_USE.VERSION }, true);
    public static final ForeignKey<EkiUserApplicationRecord, DatasetRecord> EKI_USER_APPLICATION__EKI_USER_APPLICATION_DATASET_CODE_FKEY = Internal.createForeignKey(EkiUserApplication.EKI_USER_APPLICATION, DSL.name("eki_user_application_dataset_code_fkey"), new TableField[] { EkiUserApplication.EKI_USER_APPLICATION.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<EkiUserApplicationRecord, LanguageRecord> EKI_USER_APPLICATION__EKI_USER_APPLICATION_LANG_FKEY = Internal.createForeignKey(EkiUserApplication.EKI_USER_APPLICATION, DSL.name("eki_user_application_lang_fkey"), new TableField[] { EkiUserApplication.EKI_USER_APPLICATION.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<EkiUserApplicationRecord, EkiUserRecord> EKI_USER_APPLICATION__EKI_USER_APPLICATION_USER_ID_FKEY1 = Internal.createForeignKey(EkiUserApplication.EKI_USER_APPLICATION, DSL.name("eki_user_application_user_id_fkey1"), new TableField[] { EkiUserApplication.EKI_USER_APPLICATION.USER_ID }, Keys.EKI_USER_PKEY, new TableField[] { EkiUser.EKI_USER.ID }, true);
    public static final ForeignKey<EkiUserProfileRecord, TagRecord> EKI_USER_PROFILE__EKI_USER_PROFILE_ACTIVE_TAG_NAME_FKEY = Internal.createForeignKey(EkiUserProfile.EKI_USER_PROFILE, DSL.name("eki_user_profile_active_tag_name_fkey"), new TableField[] { EkiUserProfile.EKI_USER_PROFILE.ACTIVE_TAG_NAME }, Keys.TAG_PKEY, new TableField[] { Tag.TAG.NAME }, true);
    public static final ForeignKey<EkiUserProfileRecord, DatasetRecord> EKI_USER_PROFILE__EKI_USER_PROFILE_PREFERRED_FULL_SYN_CANDIDATE_DATASET_CODE_FKEY = Internal.createForeignKey(EkiUserProfile.EKI_USER_PROFILE, DSL.name("eki_user_profile_preferred_full_syn_candidate_dataset_code_fkey"), new TableField[] { EkiUserProfile.EKI_USER_PROFILE.PREFERRED_FULL_SYN_CANDIDATE_DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<EkiUserProfileRecord, LanguageRecord> EKI_USER_PROFILE__EKI_USER_PROFILE_PREFERRED_FULL_SYN_CANDIDATE_LANG_FKEY = Internal.createForeignKey(EkiUserProfile.EKI_USER_PROFILE, DSL.name("eki_user_profile_preferred_full_syn_candidate_lang_fkey"), new TableField[] { EkiUserProfile.EKI_USER_PROFILE.PREFERRED_FULL_SYN_CANDIDATE_LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<EkiUserProfileRecord, DatasetPermissionRecord> EKI_USER_PROFILE__EKI_USER_PROFILE_RECENT_DATASET_PERMISSION_ID_FKEY = Internal.createForeignKey(EkiUserProfile.EKI_USER_PROFILE, DSL.name("eki_user_profile_recent_dataset_permission_id_fkey"), new TableField[] { EkiUserProfile.EKI_USER_PROFILE.RECENT_DATASET_PERMISSION_ID }, Keys.DATASET_PERMISSION_PKEY, new TableField[] { DatasetPermission.DATASET_PERMISSION.ID }, true);
    public static final ForeignKey<EkiUserProfileRecord, EkiUserRecord> EKI_USER_PROFILE__EKI_USER_PROFILE_USER_ID_FKEY = Internal.createForeignKey(EkiUserProfile.EKI_USER_PROFILE, DSL.name("eki_user_profile_user_id_fkey"), new TableField[] { EkiUserProfile.EKI_USER_PROFILE.USER_ID }, Keys.EKI_USER_PKEY, new TableField[] { EkiUser.EKI_USER.ID }, true);
    public static final ForeignKey<FeedbackLogCommentRecord, FeedbackLogRecord> FEEDBACK_LOG_COMMENT__FEEDBACK_LOG_COMMENT_FEEDBACK_LOG_ID_FKEY = Internal.createForeignKey(FeedbackLogComment.FEEDBACK_LOG_COMMENT, DSL.name("feedback_log_comment_feedback_log_id_fkey"), new TableField[] { FeedbackLogComment.FEEDBACK_LOG_COMMENT.FEEDBACK_LOG_ID }, Keys.FEEDBACK_LOG_PKEY, new TableField[] { FeedbackLog.FEEDBACK_LOG.ID }, true);
    public static final ForeignKey<FormRecord, MorphRecord> FORM__FORM_MORPH_CODE_FKEY = Internal.createForeignKey(Form.FORM, DSL.name("form_morph_code_fkey"), new TableField[] { Form.FORM.MORPH_CODE }, Keys.MORPH_PKEY, new TableField[] { Morph.MORPH.CODE }, true);
    public static final ForeignKey<FormFreqRecord, FormRecord> FORM_FREQ__FORM_FREQ_FORM_ID_FKEY = Internal.createForeignKey(FormFreq.FORM_FREQ, DSL.name("form_freq_form_id_fkey"), new TableField[] { FormFreq.FORM_FREQ.FORM_ID }, Keys.FORM_PKEY, new TableField[] { Form.FORM.ID }, true);
    public static final ForeignKey<FormFreqRecord, FreqCorpRecord> FORM_FREQ__FORM_FREQ_FREQ_CORP_ID_FKEY = Internal.createForeignKey(FormFreq.FORM_FREQ, DSL.name("form_freq_freq_corp_id_fkey"), new TableField[] { FormFreq.FORM_FREQ.FREQ_CORP_ID }, Keys.FREQ_CORP_PKEY, new TableField[] { FreqCorp.FREQ_CORP.ID }, true);
    public static final ForeignKey<FreeformRecord, LanguageRecord> FREEFORM__FREEFORM_LANG_FKEY = Internal.createForeignKey(Freeform.FREEFORM, DSL.name("freeform_lang_fkey"), new TableField[] { Freeform.FREEFORM.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<FreeformRecord, FreeformRecord> FREEFORM__FREEFORM_PARENT_ID_FKEY = Internal.createForeignKey(Freeform.FREEFORM, DSL.name("freeform_parent_id_fkey"), new TableField[] { Freeform.FREEFORM.PARENT_ID }, Keys.FREEFORM_PKEY, new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final ForeignKey<FreeformRecord, FreeformTypeRecord> FREEFORM__FREEFORM_TYPE_CODE_FKEY = Internal.createForeignKey(Freeform.FREEFORM, DSL.name("freeform_type_code_fkey"), new TableField[] { Freeform.FREEFORM.FREEFORM_TYPE_CODE }, Keys.FREEFORM_TYPE_PKEY, new TableField[] { FreeformType.FREEFORM_TYPE.CODE }, true);
    public static final ForeignKey<FreeformSourceLinkRecord, FreeformRecord> FREEFORM_SOURCE_LINK__FREEFORM_SOURCE_LINK_FREEFORM_ID_FKEY = Internal.createForeignKey(FreeformSourceLink.FREEFORM_SOURCE_LINK, DSL.name("freeform_source_link_freeform_id_fkey"), new TableField[] { FreeformSourceLink.FREEFORM_SOURCE_LINK.FREEFORM_ID }, Keys.FREEFORM_PKEY, new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final ForeignKey<FreeformSourceLinkRecord, SourceRecord> FREEFORM_SOURCE_LINK__FREEFORM_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(FreeformSourceLink.FREEFORM_SOURCE_LINK, DSL.name("freeform_source_link_source_id_fkey"), new TableField[] { FreeformSourceLink.FREEFORM_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<FreeformTypeLabelRecord, FreeformTypeRecord> FREEFORM_TYPE_LABEL__FREEFORM_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(FreeformTypeLabel.FREEFORM_TYPE_LABEL, DSL.name("freeform_type_label_code_fkey"), new TableField[] { FreeformTypeLabel.FREEFORM_TYPE_LABEL.CODE }, Keys.FREEFORM_TYPE_PKEY, new TableField[] { FreeformType.FREEFORM_TYPE.CODE }, true);
    public static final ForeignKey<FreeformTypeLabelRecord, LanguageRecord> FREEFORM_TYPE_LABEL__FREEFORM_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(FreeformTypeLabel.FREEFORM_TYPE_LABEL, DSL.name("freeform_type_label_lang_fkey"), new TableField[] { FreeformTypeLabel.FREEFORM_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<FreeformTypeLabelRecord, LabelTypeRecord> FREEFORM_TYPE_LABEL__FREEFORM_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(FreeformTypeLabel.FREEFORM_TYPE_LABEL, DSL.name("freeform_type_label_type_fkey"), new TableField[] { FreeformTypeLabel.FREEFORM_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<GameNonwordRecord, LanguageRecord> GAME_NONWORD__GAME_NONWORD_LANG_FKEY = Internal.createForeignKey(GameNonword.GAME_NONWORD, DSL.name("game_nonword_lang_fkey"), new TableField[] { GameNonword.GAME_NONWORD.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<GenderLabelRecord, GenderRecord> GENDER_LABEL__GENDER_LABEL_CODE_FKEY = Internal.createForeignKey(GenderLabel.GENDER_LABEL, DSL.name("gender_label_code_fkey"), new TableField[] { GenderLabel.GENDER_LABEL.CODE }, Keys.GENDER_PKEY, new TableField[] { Gender.GENDER.CODE }, true);
    public static final ForeignKey<GenderLabelRecord, LanguageRecord> GENDER_LABEL__GENDER_LABEL_LANG_FKEY = Internal.createForeignKey(GenderLabel.GENDER_LABEL, DSL.name("gender_label_lang_fkey"), new TableField[] { GenderLabel.GENDER_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<GenderLabelRecord, LabelTypeRecord> GENDER_LABEL__GENDER_LABEL_TYPE_FKEY = Internal.createForeignKey(GenderLabel.GENDER_LABEL, DSL.name("gender_label_type_fkey"), new TableField[] { GenderLabel.GENDER_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<GovernmentTypeLabelRecord, GovernmentTypeRecord> GOVERNMENT_TYPE_LABEL__GOVERNMENT_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL, DSL.name("government_type_label_code_fkey"), new TableField[] { GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL.CODE }, Keys.GOVERNMENT_TYPE_PKEY, new TableField[] { GovernmentType.GOVERNMENT_TYPE.CODE }, true);
    public static final ForeignKey<GovernmentTypeLabelRecord, LanguageRecord> GOVERNMENT_TYPE_LABEL__GOVERNMENT_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL, DSL.name("government_type_label_lang_fkey"), new TableField[] { GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<GovernmentTypeLabelRecord, LabelTypeRecord> GOVERNMENT_TYPE_LABEL__GOVERNMENT_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL, DSL.name("government_type_label_type_fkey"), new TableField[] { GovernmentTypeLabel.GOVERNMENT_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<LanguageLabelRecord, LanguageRecord> LANGUAGE_LABEL__LANGUAGE_LABEL_CODE_FKEY = Internal.createForeignKey(LanguageLabel.LANGUAGE_LABEL, DSL.name("language_label_code_fkey"), new TableField[] { LanguageLabel.LANGUAGE_LABEL.CODE }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<LanguageLabelRecord, LanguageRecord> LANGUAGE_LABEL__LANGUAGE_LABEL_LANG_FKEY = Internal.createForeignKey(LanguageLabel.LANGUAGE_LABEL, DSL.name("language_label_lang_fkey"), new TableField[] { LanguageLabel.LANGUAGE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<LanguageLabelRecord, LabelTypeRecord> LANGUAGE_LABEL__LANGUAGE_LABEL_TYPE_FKEY = Internal.createForeignKey(LanguageLabel.LANGUAGE_LABEL, DSL.name("language_label_type_fkey"), new TableField[] { LanguageLabel.LANGUAGE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<LexCollocRecord, CollocationRecord> LEX_COLLOC__LEX_COLLOC_COLLOCATION_ID_FKEY = Internal.createForeignKey(LexColloc.LEX_COLLOC, DSL.name("lex_colloc_collocation_id_fkey"), new TableField[] { LexColloc.LEX_COLLOC.COLLOCATION_ID }, Keys.COLLOCATION_PKEY, new TableField[] { Collocation.COLLOCATION.ID }, true);
    public static final ForeignKey<LexCollocRecord, LexemeRecord> LEX_COLLOC__LEX_COLLOC_LEXEME_ID_FKEY = Internal.createForeignKey(LexColloc.LEX_COLLOC, DSL.name("lex_colloc_lexeme_id_fkey"), new TableField[] { LexColloc.LEX_COLLOC.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexCollocRecord, LexCollocRelGroupRecord> LEX_COLLOC__LEX_COLLOC_REL_GROUP_ID_FKEY = Internal.createForeignKey(LexColloc.LEX_COLLOC, DSL.name("lex_colloc_rel_group_id_fkey"), new TableField[] { LexColloc.LEX_COLLOC.REL_GROUP_ID }, Keys.LEX_COLLOC_REL_GROUP_PKEY, new TableField[] { LexCollocRelGroup.LEX_COLLOC_REL_GROUP.ID }, true);
    public static final ForeignKey<LexCollocPosGroupRecord, LexemeRecord> LEX_COLLOC_POS_GROUP__LEX_COLLOC_POS_GROUP_LEXEME_ID_FKEY = Internal.createForeignKey(LexCollocPosGroup.LEX_COLLOC_POS_GROUP, DSL.name("lex_colloc_pos_group_lexeme_id_fkey"), new TableField[] { LexCollocPosGroup.LEX_COLLOC_POS_GROUP.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexCollocPosGroupRecord, PosGroupRecord> LEX_COLLOC_POS_GROUP__LEX_COLLOC_POS_GROUP_POS_GROUP_CODE_FKEY = Internal.createForeignKey(LexCollocPosGroup.LEX_COLLOC_POS_GROUP, DSL.name("lex_colloc_pos_group_pos_group_code_fkey"), new TableField[] { LexCollocPosGroup.LEX_COLLOC_POS_GROUP.POS_GROUP_CODE }, Keys.POS_GROUP_PKEY, new TableField[] { PosGroup.POS_GROUP.CODE }, true);
    public static final ForeignKey<LexCollocRelGroupRecord, LexCollocPosGroupRecord> LEX_COLLOC_REL_GROUP__LEX_COLLOC_REL_GROUP_POS_GROUP_ID_FKEY = Internal.createForeignKey(LexCollocRelGroup.LEX_COLLOC_REL_GROUP, DSL.name("lex_colloc_rel_group_pos_group_id_fkey"), new TableField[] { LexCollocRelGroup.LEX_COLLOC_REL_GROUP.POS_GROUP_ID }, Keys.LEX_COLLOC_POS_GROUP_PKEY, new TableField[] { LexCollocPosGroup.LEX_COLLOC_POS_GROUP.ID }, true);
    public static final ForeignKey<LexRelMappingRecord, LexRelTypeRecord> LEX_REL_MAPPING__LEX_REL_MAPPING_CODE1_FKEY = Internal.createForeignKey(LexRelMapping.LEX_REL_MAPPING, DSL.name("lex_rel_mapping_code1_fkey"), new TableField[] { LexRelMapping.LEX_REL_MAPPING.CODE1 }, Keys.LEX_REL_TYPE_PKEY, new TableField[] { LexRelType.LEX_REL_TYPE.CODE }, true);
    public static final ForeignKey<LexRelMappingRecord, LexRelTypeRecord> LEX_REL_MAPPING__LEX_REL_MAPPING_CODE2_FKEY = Internal.createForeignKey(LexRelMapping.LEX_REL_MAPPING, DSL.name("lex_rel_mapping_code2_fkey"), new TableField[] { LexRelMapping.LEX_REL_MAPPING.CODE2 }, Keys.LEX_REL_TYPE_PKEY, new TableField[] { LexRelType.LEX_REL_TYPE.CODE }, true);
    public static final ForeignKey<LexRelTypeLabelRecord, LexRelTypeRecord> LEX_REL_TYPE_LABEL__LEX_REL_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(LexRelTypeLabel.LEX_REL_TYPE_LABEL, DSL.name("lex_rel_type_label_code_fkey"), new TableField[] { LexRelTypeLabel.LEX_REL_TYPE_LABEL.CODE }, Keys.LEX_REL_TYPE_PKEY, new TableField[] { LexRelType.LEX_REL_TYPE.CODE }, true);
    public static final ForeignKey<LexRelTypeLabelRecord, LanguageRecord> LEX_REL_TYPE_LABEL__LEX_REL_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(LexRelTypeLabel.LEX_REL_TYPE_LABEL, DSL.name("lex_rel_type_label_lang_fkey"), new TableField[] { LexRelTypeLabel.LEX_REL_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<LexRelTypeLabelRecord, LabelTypeRecord> LEX_REL_TYPE_LABEL__LEX_REL_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(LexRelTypeLabel.LEX_REL_TYPE_LABEL, DSL.name("lex_rel_type_label_type_fkey"), new TableField[] { LexRelTypeLabel.LEX_REL_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<LexRelationRecord, LexRelTypeRecord> LEX_RELATION__LEX_RELATION_LEX_REL_TYPE_CODE_FKEY = Internal.createForeignKey(LexRelation.LEX_RELATION, DSL.name("lex_relation_lex_rel_type_code_fkey"), new TableField[] { LexRelation.LEX_RELATION.LEX_REL_TYPE_CODE }, Keys.LEX_REL_TYPE_PKEY, new TableField[] { LexRelType.LEX_REL_TYPE.CODE }, true);
    public static final ForeignKey<LexRelationRecord, LexemeRecord> LEX_RELATION__LEX_RELATION_LEXEME1_ID_FKEY = Internal.createForeignKey(LexRelation.LEX_RELATION, DSL.name("lex_relation_lexeme1_id_fkey"), new TableField[] { LexRelation.LEX_RELATION.LEXEME1_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexRelationRecord, LexemeRecord> LEX_RELATION__LEX_RELATION_LEXEME2_ID_FKEY = Internal.createForeignKey(LexRelation.LEX_RELATION, DSL.name("lex_relation_lexeme2_id_fkey"), new TableField[] { LexRelation.LEX_RELATION.LEXEME2_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeRecord, DatasetRecord> LEXEME__LEXEME_DATASET_CODE_FKEY = Internal.createForeignKey(Lexeme.LEXEME, DSL.name("lexeme_dataset_code_fkey"), new TableField[] { Lexeme.LEXEME.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<LexemeRecord, MeaningRecord> LEXEME__LEXEME_MEANING_ID_FKEY = Internal.createForeignKey(Lexeme.LEXEME, DSL.name("lexeme_meaning_id_fkey"), new TableField[] { Lexeme.LEXEME.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<LexemeRecord, ProficiencyLevelRecord> LEXEME__LEXEME_PROFICIENCY_LEVEL_CODE_FKEY = Internal.createForeignKey(Lexeme.LEXEME, DSL.name("lexeme_proficiency_level_code_fkey"), new TableField[] { Lexeme.LEXEME.PROFICIENCY_LEVEL_CODE }, Keys.PROFICIENCY_LEVEL_PKEY, new TableField[] { ProficiencyLevel.PROFICIENCY_LEVEL.CODE }, true);
    public static final ForeignKey<LexemeRecord, ValueStateRecord> LEXEME__LEXEME_VALUE_STATE_CODE_FKEY = Internal.createForeignKey(Lexeme.LEXEME, DSL.name("lexeme_value_state_code_fkey"), new TableField[] { Lexeme.LEXEME.VALUE_STATE_CODE }, Keys.VALUE_STATE_PKEY, new TableField[] { ValueState.VALUE_STATE.CODE }, true);
    public static final ForeignKey<LexemeRecord, WordRecord> LEXEME__LEXEME_WORD_ID_FKEY = Internal.createForeignKey(Lexeme.LEXEME, DSL.name("lexeme_word_id_fkey"), new TableField[] { Lexeme.LEXEME.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<LexemeActivityLogRecord, ActivityLogRecord> LEXEME_ACTIVITY_LOG__LEXEME_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY = Internal.createForeignKey(LexemeActivityLog.LEXEME_ACTIVITY_LOG, DSL.name("lexeme_activity_log_activity_log_id_fkey"), new TableField[] { LexemeActivityLog.LEXEME_ACTIVITY_LOG.ACTIVITY_LOG_ID }, Keys.ACTIVITY_LOG_PKEY, new TableField[] { ActivityLog.ACTIVITY_LOG.ID }, true);
    public static final ForeignKey<LexemeActivityLogRecord, LexemeRecord> LEXEME_ACTIVITY_LOG__LEXEME_ACTIVITY_LOG_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeActivityLog.LEXEME_ACTIVITY_LOG, DSL.name("lexeme_activity_log_lexeme_id_fkey"), new TableField[] { LexemeActivityLog.LEXEME_ACTIVITY_LOG.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeDerivRecord, DerivRecord> LEXEME_DERIV__LEXEME_DERIV_DERIV_CODE_FKEY = Internal.createForeignKey(LexemeDeriv.LEXEME_DERIV, DSL.name("lexeme_deriv_deriv_code_fkey"), new TableField[] { LexemeDeriv.LEXEME_DERIV.DERIV_CODE }, Keys.DERIV_PKEY, new TableField[] { Deriv.DERIV.CODE }, true);
    public static final ForeignKey<LexemeDerivRecord, LexemeRecord> LEXEME_DERIV__LEXEME_DERIV_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeDeriv.LEXEME_DERIV, DSL.name("lexeme_deriv_lexeme_id_fkey"), new TableField[] { LexemeDeriv.LEXEME_DERIV.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeFreeformRecord, FreeformRecord> LEXEME_FREEFORM__LEXEME_FREEFORM_FREEFORM_ID_FKEY = Internal.createForeignKey(LexemeFreeform.LEXEME_FREEFORM, DSL.name("lexeme_freeform_freeform_id_fkey"), new TableField[] { LexemeFreeform.LEXEME_FREEFORM.FREEFORM_ID }, Keys.FREEFORM_PKEY, new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final ForeignKey<LexemeFreeformRecord, LexemeRecord> LEXEME_FREEFORM__LEXEME_FREEFORM_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeFreeform.LEXEME_FREEFORM, DSL.name("lexeme_freeform_lexeme_id_fkey"), new TableField[] { LexemeFreeform.LEXEME_FREEFORM.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeNoteRecord, LanguageRecord> LEXEME_NOTE__LEXEME_NOTE_LANG_FKEY = Internal.createForeignKey(LexemeNote.LEXEME_NOTE, DSL.name("lexeme_note_lang_fkey"), new TableField[] { LexemeNote.LEXEME_NOTE.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<LexemeNoteRecord, LexemeRecord> LEXEME_NOTE__LEXEME_NOTE_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeNote.LEXEME_NOTE, DSL.name("lexeme_note_lexeme_id_fkey"), new TableField[] { LexemeNote.LEXEME_NOTE.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeNoteSourceLinkRecord, LexemeNoteRecord> LEXEME_NOTE_SOURCE_LINK__LEXEME_NOTE_SOURCE_LINK_LEXEME_NOTE_ID_FKEY = Internal.createForeignKey(LexemeNoteSourceLink.LEXEME_NOTE_SOURCE_LINK, DSL.name("lexeme_note_source_link_lexeme_note_id_fkey"), new TableField[] { LexemeNoteSourceLink.LEXEME_NOTE_SOURCE_LINK.LEXEME_NOTE_ID }, Keys.LEXEME_NOTE_PKEY, new TableField[] { LexemeNote.LEXEME_NOTE.ID }, true);
    public static final ForeignKey<LexemeNoteSourceLinkRecord, SourceRecord> LEXEME_NOTE_SOURCE_LINK__LEXEME_NOTE_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(LexemeNoteSourceLink.LEXEME_NOTE_SOURCE_LINK, DSL.name("lexeme_note_source_link_source_id_fkey"), new TableField[] { LexemeNoteSourceLink.LEXEME_NOTE_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<LexemePosRecord, LexemeRecord> LEXEME_POS__LEXEME_POS_LEXEME_ID_FKEY = Internal.createForeignKey(LexemePos.LEXEME_POS, DSL.name("lexeme_pos_lexeme_id_fkey"), new TableField[] { LexemePos.LEXEME_POS.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemePosRecord, PosRecord> LEXEME_POS__LEXEME_POS_POS_CODE_FKEY = Internal.createForeignKey(LexemePos.LEXEME_POS, DSL.name("lexeme_pos_pos_code_fkey"), new TableField[] { LexemePos.LEXEME_POS.POS_CODE }, Keys.POS_PKEY, new TableField[] { Pos.POS.CODE }, true);
    public static final ForeignKey<LexemeRegionRecord, LexemeRecord> LEXEME_REGION__LEXEME_REGION_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeRegion.LEXEME_REGION, DSL.name("lexeme_region_lexeme_id_fkey"), new TableField[] { LexemeRegion.LEXEME_REGION.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeRegionRecord, RegionRecord> LEXEME_REGION__LEXEME_REGION_REGION_CODE_FKEY = Internal.createForeignKey(LexemeRegion.LEXEME_REGION, DSL.name("lexeme_region_region_code_fkey"), new TableField[] { LexemeRegion.LEXEME_REGION.REGION_CODE }, Keys.REGION_PKEY, new TableField[] { Region.REGION.CODE }, true);
    public static final ForeignKey<LexemeRegisterRecord, LexemeRecord> LEXEME_REGISTER__LEXEME_REGISTER_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeRegister.LEXEME_REGISTER, DSL.name("lexeme_register_lexeme_id_fkey"), new TableField[] { LexemeRegister.LEXEME_REGISTER.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeRegisterRecord, RegisterRecord> LEXEME_REGISTER__LEXEME_REGISTER_REGISTER_CODE_FKEY = Internal.createForeignKey(LexemeRegister.LEXEME_REGISTER, DSL.name("lexeme_register_register_code_fkey"), new TableField[] { LexemeRegister.LEXEME_REGISTER.REGISTER_CODE }, Keys.REGISTER_PKEY, new TableField[] { Register.REGISTER.CODE }, true);
    public static final ForeignKey<LexemeSourceLinkRecord, LexemeRecord> LEXEME_SOURCE_LINK__LEXEME_SOURCE_LINK_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeSourceLink.LEXEME_SOURCE_LINK, DSL.name("lexeme_source_link_lexeme_id_fkey"), new TableField[] { LexemeSourceLink.LEXEME_SOURCE_LINK.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeSourceLinkRecord, SourceRecord> LEXEME_SOURCE_LINK__LEXEME_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(LexemeSourceLink.LEXEME_SOURCE_LINK, DSL.name("lexeme_source_link_source_id_fkey"), new TableField[] { LexemeSourceLink.LEXEME_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<LexemeTagRecord, LexemeRecord> LEXEME_TAG__LEXEME_TAG_LEXEME_ID_FKEY = Internal.createForeignKey(LexemeTag.LEXEME_TAG, DSL.name("lexeme_tag_lexeme_id_fkey"), new TableField[] { LexemeTag.LEXEME_TAG.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<LexemeTagRecord, TagRecord> LEXEME_TAG__LEXEME_TAG_TAG_NAME_FKEY = Internal.createForeignKey(LexemeTag.LEXEME_TAG, DSL.name("lexeme_tag_tag_name_fkey"), new TableField[] { LexemeTag.LEXEME_TAG.TAG_NAME }, Keys.TAG_PKEY, new TableField[] { Tag.TAG.NAME }, true);
    public static final ForeignKey<MeaningActivityLogRecord, ActivityLogRecord> MEANING_ACTIVITY_LOG__MEANING_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY = Internal.createForeignKey(MeaningActivityLog.MEANING_ACTIVITY_LOG, DSL.name("meaning_activity_log_activity_log_id_fkey"), new TableField[] { MeaningActivityLog.MEANING_ACTIVITY_LOG.ACTIVITY_LOG_ID }, Keys.ACTIVITY_LOG_PKEY, new TableField[] { ActivityLog.ACTIVITY_LOG.ID }, true);
    public static final ForeignKey<MeaningActivityLogRecord, MeaningRecord> MEANING_ACTIVITY_LOG__MEANING_ACTIVITY_LOG_MEANING_ID_FKEY = Internal.createForeignKey(MeaningActivityLog.MEANING_ACTIVITY_LOG, DSL.name("meaning_activity_log_meaning_id_fkey"), new TableField[] { MeaningActivityLog.MEANING_ACTIVITY_LOG.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningDomainRecord, DomainRecord> MEANING_DOMAIN__MEANING_DOMAIN_DOMAIN_CODE_FKEY = Internal.createForeignKey(MeaningDomain.MEANING_DOMAIN, DSL.name("meaning_domain_domain_code_fkey"), new TableField[] { MeaningDomain.MEANING_DOMAIN.DOMAIN_CODE, MeaningDomain.MEANING_DOMAIN.DOMAIN_ORIGIN }, Keys.DOMAIN_PKEY, new TableField[] { Domain.DOMAIN.CODE, Domain.DOMAIN.ORIGIN }, true);
    public static final ForeignKey<MeaningDomainRecord, MeaningRecord> MEANING_DOMAIN__MEANING_DOMAIN_MEANING_ID_FKEY = Internal.createForeignKey(MeaningDomain.MEANING_DOMAIN, DSL.name("meaning_domain_meaning_id_fkey"), new TableField[] { MeaningDomain.MEANING_DOMAIN.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningForumRecord, EkiUserRecord> MEANING_FORUM__MEANING_FORUM_CREATOR_ID_FKEY = Internal.createForeignKey(MeaningForum.MEANING_FORUM, DSL.name("meaning_forum_creator_id_fkey"), new TableField[] { MeaningForum.MEANING_FORUM.CREATOR_ID }, Keys.EKI_USER_PKEY, new TableField[] { EkiUser.EKI_USER.ID }, true);
    public static final ForeignKey<MeaningForumRecord, MeaningRecord> MEANING_FORUM__MEANING_FORUM_MEANING_ID_FKEY = Internal.createForeignKey(MeaningForum.MEANING_FORUM, DSL.name("meaning_forum_meaning_id_fkey"), new TableField[] { MeaningForum.MEANING_FORUM.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningFreeformRecord, FreeformRecord> MEANING_FREEFORM__MEANING_FREEFORM_FREEFORM_ID_FKEY = Internal.createForeignKey(MeaningFreeform.MEANING_FREEFORM, DSL.name("meaning_freeform_freeform_id_fkey"), new TableField[] { MeaningFreeform.MEANING_FREEFORM.FREEFORM_ID }, Keys.FREEFORM_PKEY, new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final ForeignKey<MeaningFreeformRecord, MeaningRecord> MEANING_FREEFORM__MEANING_FREEFORM_MEANING_ID_FKEY = Internal.createForeignKey(MeaningFreeform.MEANING_FREEFORM, DSL.name("meaning_freeform_meaning_id_fkey"), new TableField[] { MeaningFreeform.MEANING_FREEFORM.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningImageRecord, MeaningRecord> MEANING_IMAGE__MEANING_IMAGE_MEANING_ID_FKEY = Internal.createForeignKey(MeaningImage.MEANING_IMAGE, DSL.name("meaning_image_meaning_id_fkey"), new TableField[] { MeaningImage.MEANING_IMAGE.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningImageSourceLinkRecord, MeaningImageRecord> MEANING_IMAGE_SOURCE_LINK__MEANING_IMAGE_SOURCE_LINK_MEANING_IMAGE_ID_FKEY = Internal.createForeignKey(MeaningImageSourceLink.MEANING_IMAGE_SOURCE_LINK, DSL.name("meaning_image_source_link_meaning_image_id_fkey"), new TableField[] { MeaningImageSourceLink.MEANING_IMAGE_SOURCE_LINK.MEANING_IMAGE_ID }, Keys.MEANING_IMAGE_PKEY, new TableField[] { MeaningImage.MEANING_IMAGE.ID }, true);
    public static final ForeignKey<MeaningImageSourceLinkRecord, SourceRecord> MEANING_IMAGE_SOURCE_LINK__MEANING_IMAGE_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(MeaningImageSourceLink.MEANING_IMAGE_SOURCE_LINK, DSL.name("meaning_image_source_link_source_id_fkey"), new TableField[] { MeaningImageSourceLink.MEANING_IMAGE_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<MeaningLastActivityLogRecord, ActivityLogRecord> MEANING_LAST_ACTIVITY_LOG__MEANING_LAST_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY = Internal.createForeignKey(MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG, DSL.name("meaning_last_activity_log_activity_log_id_fkey"), new TableField[] { MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG.ACTIVITY_LOG_ID }, Keys.ACTIVITY_LOG_PKEY, new TableField[] { ActivityLog.ACTIVITY_LOG.ID }, true);
    public static final ForeignKey<MeaningLastActivityLogRecord, MeaningRecord> MEANING_LAST_ACTIVITY_LOG__MEANING_LAST_ACTIVITY_LOG_MEANING_ID_FKEY = Internal.createForeignKey(MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG, DSL.name("meaning_last_activity_log_meaning_id_fkey"), new TableField[] { MeaningLastActivityLog.MEANING_LAST_ACTIVITY_LOG.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningNoteRecord, LanguageRecord> MEANING_NOTE__MEANING_NOTE_LANG_FKEY = Internal.createForeignKey(MeaningNote.MEANING_NOTE, DSL.name("meaning_note_lang_fkey"), new TableField[] { MeaningNote.MEANING_NOTE.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<MeaningNoteRecord, MeaningRecord> MEANING_NOTE__MEANING_NOTE_MEANING_ID_FKEY = Internal.createForeignKey(MeaningNote.MEANING_NOTE, DSL.name("meaning_note_meaning_id_fkey"), new TableField[] { MeaningNote.MEANING_NOTE.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningNoteSourceLinkRecord, MeaningNoteRecord> MEANING_NOTE_SOURCE_LINK__MEANING_NOTE_SOURCE_LINK_MEANING_NOTE_ID_FKEY = Internal.createForeignKey(MeaningNoteSourceLink.MEANING_NOTE_SOURCE_LINK, DSL.name("meaning_note_source_link_meaning_note_id_fkey"), new TableField[] { MeaningNoteSourceLink.MEANING_NOTE_SOURCE_LINK.MEANING_NOTE_ID }, Keys.MEANING_NOTE_PKEY, new TableField[] { MeaningNote.MEANING_NOTE.ID }, true);
    public static final ForeignKey<MeaningNoteSourceLinkRecord, SourceRecord> MEANING_NOTE_SOURCE_LINK__MEANING_NOTE_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(MeaningNoteSourceLink.MEANING_NOTE_SOURCE_LINK, DSL.name("meaning_note_source_link_source_id_fkey"), new TableField[] { MeaningNoteSourceLink.MEANING_NOTE_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<MeaningNrRecord, DatasetRecord> MEANING_NR__MEANING_NR_DATASET_CODE_FKEY = Internal.createForeignKey(MeaningNr.MEANING_NR, DSL.name("meaning_nr_dataset_code_fkey"), new TableField[] { MeaningNr.MEANING_NR.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<MeaningNrRecord, MeaningRecord> MEANING_NR__MEANING_NR_MEANING_ID_FKEY = Internal.createForeignKey(MeaningNr.MEANING_NR, DSL.name("meaning_nr_meaning_id_fkey"), new TableField[] { MeaningNr.MEANING_NR.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningRelMappingRecord, MeaningRelTypeRecord> MEANING_REL_MAPPING__MEANING_REL_MAPPING_CODE1_FKEY = Internal.createForeignKey(MeaningRelMapping.MEANING_REL_MAPPING, DSL.name("meaning_rel_mapping_code1_fkey"), new TableField[] { MeaningRelMapping.MEANING_REL_MAPPING.CODE1 }, Keys.MEANING_REL_TYPE_PKEY, new TableField[] { MeaningRelType.MEANING_REL_TYPE.CODE }, true);
    public static final ForeignKey<MeaningRelMappingRecord, MeaningRelTypeRecord> MEANING_REL_MAPPING__MEANING_REL_MAPPING_CODE2_FKEY = Internal.createForeignKey(MeaningRelMapping.MEANING_REL_MAPPING, DSL.name("meaning_rel_mapping_code2_fkey"), new TableField[] { MeaningRelMapping.MEANING_REL_MAPPING.CODE2 }, Keys.MEANING_REL_TYPE_PKEY, new TableField[] { MeaningRelType.MEANING_REL_TYPE.CODE }, true);
    public static final ForeignKey<MeaningRelTypeLabelRecord, MeaningRelTypeRecord> MEANING_REL_TYPE_LABEL__MEANING_REL_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL, DSL.name("meaning_rel_type_label_code_fkey"), new TableField[] { MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL.CODE }, Keys.MEANING_REL_TYPE_PKEY, new TableField[] { MeaningRelType.MEANING_REL_TYPE.CODE }, true);
    public static final ForeignKey<MeaningRelTypeLabelRecord, LanguageRecord> MEANING_REL_TYPE_LABEL__MEANING_REL_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL, DSL.name("meaning_rel_type_label_lang_fkey"), new TableField[] { MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<MeaningRelTypeLabelRecord, LabelTypeRecord> MEANING_REL_TYPE_LABEL__MEANING_REL_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL, DSL.name("meaning_rel_type_label_type_fkey"), new TableField[] { MeaningRelTypeLabel.MEANING_REL_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<MeaningRelationRecord, MeaningRecord> MEANING_RELATION__MEANING_RELATION_MEANING1_ID_FKEY = Internal.createForeignKey(MeaningRelation.MEANING_RELATION, DSL.name("meaning_relation_meaning1_id_fkey"), new TableField[] { MeaningRelation.MEANING_RELATION.MEANING1_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningRelationRecord, MeaningRecord> MEANING_RELATION__MEANING_RELATION_MEANING2_ID_FKEY = Internal.createForeignKey(MeaningRelation.MEANING_RELATION, DSL.name("meaning_relation_meaning2_id_fkey"), new TableField[] { MeaningRelation.MEANING_RELATION.MEANING2_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningRelationRecord, MeaningRelTypeRecord> MEANING_RELATION__MEANING_RELATION_MEANING_REL_TYPE_CODE_FKEY = Internal.createForeignKey(MeaningRelation.MEANING_RELATION, DSL.name("meaning_relation_meaning_rel_type_code_fkey"), new TableField[] { MeaningRelation.MEANING_RELATION.MEANING_REL_TYPE_CODE }, Keys.MEANING_REL_TYPE_PKEY, new TableField[] { MeaningRelType.MEANING_REL_TYPE.CODE }, true);
    public static final ForeignKey<MeaningSemanticTypeRecord, MeaningRecord> MEANING_SEMANTIC_TYPE__MEANING_SEMANTIC_TYPE_MEANING_ID_FKEY = Internal.createForeignKey(MeaningSemanticType.MEANING_SEMANTIC_TYPE, DSL.name("meaning_semantic_type_meaning_id_fkey"), new TableField[] { MeaningSemanticType.MEANING_SEMANTIC_TYPE.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningSemanticTypeRecord, SemanticTypeRecord> MEANING_SEMANTIC_TYPE__MEANING_SEMANTIC_TYPE_SEMANTIC_TYPE_CODE_FKEY = Internal.createForeignKey(MeaningSemanticType.MEANING_SEMANTIC_TYPE, DSL.name("meaning_semantic_type_semantic_type_code_fkey"), new TableField[] { MeaningSemanticType.MEANING_SEMANTIC_TYPE.SEMANTIC_TYPE_CODE }, Keys.SEMANTIC_TYPE_PKEY, new TableField[] { SemanticType.SEMANTIC_TYPE.CODE }, true);
    public static final ForeignKey<MeaningTagRecord, MeaningRecord> MEANING_TAG__MEANING_TAG_MEANING_ID_FKEY = Internal.createForeignKey(MeaningTag.MEANING_TAG, DSL.name("meaning_tag_meaning_id_fkey"), new TableField[] { MeaningTag.MEANING_TAG.MEANING_ID }, Keys.MEANING_PKEY, new TableField[] { Meaning.MEANING.ID }, true);
    public static final ForeignKey<MeaningTagRecord, TagRecord> MEANING_TAG__MEANING_TAG_TAG_NAME_FKEY = Internal.createForeignKey(MeaningTag.MEANING_TAG, DSL.name("meaning_tag_tag_name_fkey"), new TableField[] { MeaningTag.MEANING_TAG.TAG_NAME }, Keys.TAG_PKEY, new TableField[] { Tag.TAG.NAME }, true);
    public static final ForeignKey<MorphFreqRecord, FreqCorpRecord> MORPH_FREQ__MORPH_FREQ_FREQ_CORP_ID_FKEY = Internal.createForeignKey(MorphFreq.MORPH_FREQ, DSL.name("morph_freq_freq_corp_id_fkey"), new TableField[] { MorphFreq.MORPH_FREQ.FREQ_CORP_ID }, Keys.FREQ_CORP_PKEY, new TableField[] { FreqCorp.FREQ_CORP.ID }, true);
    public static final ForeignKey<MorphFreqRecord, MorphRecord> MORPH_FREQ__MORPH_FREQ_MORPH_CODE_FKEY = Internal.createForeignKey(MorphFreq.MORPH_FREQ, DSL.name("morph_freq_morph_code_fkey"), new TableField[] { MorphFreq.MORPH_FREQ.MORPH_CODE }, Keys.MORPH_PKEY, new TableField[] { Morph.MORPH.CODE }, true);
    public static final ForeignKey<MorphLabelRecord, MorphRecord> MORPH_LABEL__MORPH_LABEL_CODE_FKEY = Internal.createForeignKey(MorphLabel.MORPH_LABEL, DSL.name("morph_label_code_fkey"), new TableField[] { MorphLabel.MORPH_LABEL.CODE }, Keys.MORPH_PKEY, new TableField[] { Morph.MORPH.CODE }, true);
    public static final ForeignKey<MorphLabelRecord, LanguageRecord> MORPH_LABEL__MORPH_LABEL_LANG_FKEY = Internal.createForeignKey(MorphLabel.MORPH_LABEL, DSL.name("morph_label_lang_fkey"), new TableField[] { MorphLabel.MORPH_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<MorphLabelRecord, LabelTypeRecord> MORPH_LABEL__MORPH_LABEL_TYPE_FKEY = Internal.createForeignKey(MorphLabel.MORPH_LABEL, DSL.name("morph_label_type_fkey"), new TableField[] { MorphLabel.MORPH_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<NewsArticleRecord, LanguageRecord> NEWS_ARTICLE__NEWS_ARTICLE_LANG_FKEY = Internal.createForeignKey(NewsArticle.NEWS_ARTICLE, DSL.name("news_article_lang_fkey"), new TableField[] { NewsArticle.NEWS_ARTICLE.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<ParadigmRecord, WordRecord> PARADIGM__PARADIGM_WORD_ID_FKEY = Internal.createForeignKey(Paradigm.PARADIGM, DSL.name("paradigm_word_id_fkey"), new TableField[] { Paradigm.PARADIGM.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<ParadigmFormRecord, FormRecord> PARADIGM_FORM__PARADIGM_FORM_FORM_ID_FKEY = Internal.createForeignKey(ParadigmForm.PARADIGM_FORM, DSL.name("paradigm_form_form_id_fkey"), new TableField[] { ParadigmForm.PARADIGM_FORM.FORM_ID }, Keys.FORM_PKEY, new TableField[] { Form.FORM.ID }, true);
    public static final ForeignKey<ParadigmFormRecord, ParadigmRecord> PARADIGM_FORM__PARADIGM_FORM_PARADIGM_ID_FKEY = Internal.createForeignKey(ParadigmForm.PARADIGM_FORM, DSL.name("paradigm_form_paradigm_id_fkey"), new TableField[] { ParadigmForm.PARADIGM_FORM.PARADIGM_ID }, Keys.PARADIGM_PKEY, new TableField[] { Paradigm.PARADIGM.ID }, true);
    public static final ForeignKey<PosGroupLabelRecord, PosGroupRecord> POS_GROUP_LABEL__POS_GROUP_LABEL_CODE_FKEY = Internal.createForeignKey(PosGroupLabel.POS_GROUP_LABEL, DSL.name("pos_group_label_code_fkey"), new TableField[] { PosGroupLabel.POS_GROUP_LABEL.CODE }, Keys.POS_GROUP_PKEY, new TableField[] { PosGroup.POS_GROUP.CODE }, true);
    public static final ForeignKey<PosGroupLabelRecord, LanguageRecord> POS_GROUP_LABEL__POS_GROUP_LABEL_LANG_FKEY = Internal.createForeignKey(PosGroupLabel.POS_GROUP_LABEL, DSL.name("pos_group_label_lang_fkey"), new TableField[] { PosGroupLabel.POS_GROUP_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<PosGroupLabelRecord, LabelTypeRecord> POS_GROUP_LABEL__POS_GROUP_LABEL_TYPE_FKEY = Internal.createForeignKey(PosGroupLabel.POS_GROUP_LABEL, DSL.name("pos_group_label_type_fkey"), new TableField[] { PosGroupLabel.POS_GROUP_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<PosLabelRecord, PosRecord> POS_LABEL__POS_LABEL_CODE_FKEY = Internal.createForeignKey(PosLabel.POS_LABEL, DSL.name("pos_label_code_fkey"), new TableField[] { PosLabel.POS_LABEL.CODE }, Keys.POS_PKEY, new TableField[] { Pos.POS.CODE }, true);
    public static final ForeignKey<PosLabelRecord, LanguageRecord> POS_LABEL__POS_LABEL_LANG_FKEY = Internal.createForeignKey(PosLabel.POS_LABEL, DSL.name("pos_label_lang_fkey"), new TableField[] { PosLabel.POS_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<PosLabelRecord, LabelTypeRecord> POS_LABEL__POS_LABEL_TYPE_FKEY = Internal.createForeignKey(PosLabel.POS_LABEL, DSL.name("pos_label_type_fkey"), new TableField[] { PosLabel.POS_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<ProficiencyLevelLabelRecord, ProficiencyLevelRecord> PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_CODE_FKEY = Internal.createForeignKey(ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL, DSL.name("proficiency_level_label_code_fkey"), new TableField[] { ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL.CODE }, Keys.PROFICIENCY_LEVEL_PKEY, new TableField[] { ProficiencyLevel.PROFICIENCY_LEVEL.CODE }, true);
    public static final ForeignKey<ProficiencyLevelLabelRecord, LanguageRecord> PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_LANG_FKEY = Internal.createForeignKey(ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL, DSL.name("proficiency_level_label_lang_fkey"), new TableField[] { ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<ProficiencyLevelLabelRecord, LabelTypeRecord> PROFICIENCY_LEVEL_LABEL__PROFICIENCY_LEVEL_LABEL_TYPE_FKEY = Internal.createForeignKey(ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL, DSL.name("proficiency_level_label_type_fkey"), new TableField[] { ProficiencyLevelLabel.PROFICIENCY_LEVEL_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<RegisterLabelRecord, RegisterRecord> REGISTER_LABEL__REGISTER_LABEL_CODE_FKEY = Internal.createForeignKey(RegisterLabel.REGISTER_LABEL, DSL.name("register_label_code_fkey"), new TableField[] { RegisterLabel.REGISTER_LABEL.CODE }, Keys.REGISTER_PKEY, new TableField[] { Register.REGISTER.CODE }, true);
    public static final ForeignKey<RegisterLabelRecord, LanguageRecord> REGISTER_LABEL__REGISTER_LABEL_LANG_FKEY = Internal.createForeignKey(RegisterLabel.REGISTER_LABEL, DSL.name("register_label_lang_fkey"), new TableField[] { RegisterLabel.REGISTER_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<RegisterLabelRecord, LabelTypeRecord> REGISTER_LABEL__REGISTER_LABEL_TYPE_FKEY = Internal.createForeignKey(RegisterLabel.REGISTER_LABEL, DSL.name("register_label_type_fkey"), new TableField[] { RegisterLabel.REGISTER_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<RelGroupLabelRecord, RelGroupRecord> REL_GROUP_LABEL__REL_GROUP_LABEL_CODE_FKEY = Internal.createForeignKey(RelGroupLabel.REL_GROUP_LABEL, DSL.name("rel_group_label_code_fkey"), new TableField[] { RelGroupLabel.REL_GROUP_LABEL.CODE }, Keys.REL_GROUP_PKEY, new TableField[] { RelGroup.REL_GROUP.CODE }, true);
    public static final ForeignKey<RelGroupLabelRecord, LanguageRecord> REL_GROUP_LABEL__REL_GROUP_LABEL_LANG_FKEY = Internal.createForeignKey(RelGroupLabel.REL_GROUP_LABEL, DSL.name("rel_group_label_lang_fkey"), new TableField[] { RelGroupLabel.REL_GROUP_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<RelGroupLabelRecord, LabelTypeRecord> REL_GROUP_LABEL__REL_GROUP_LABEL_TYPE_FKEY = Internal.createForeignKey(RelGroupLabel.REL_GROUP_LABEL, DSL.name("rel_group_label_type_fkey"), new TableField[] { RelGroupLabel.REL_GROUP_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<SemanticTypeLabelRecord, SemanticTypeRecord> SEMANTIC_TYPE_LABEL__SEMANTIC_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(SemanticTypeLabel.SEMANTIC_TYPE_LABEL, DSL.name("semantic_type_label_code_fkey"), new TableField[] { SemanticTypeLabel.SEMANTIC_TYPE_LABEL.CODE }, Keys.SEMANTIC_TYPE_PKEY, new TableField[] { SemanticType.SEMANTIC_TYPE.CODE }, true);
    public static final ForeignKey<SemanticTypeLabelRecord, LanguageRecord> SEMANTIC_TYPE_LABEL__SEMANTIC_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(SemanticTypeLabel.SEMANTIC_TYPE_LABEL, DSL.name("semantic_type_label_lang_fkey"), new TableField[] { SemanticTypeLabel.SEMANTIC_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<SemanticTypeLabelRecord, LabelTypeRecord> SEMANTIC_TYPE_LABEL__SEMANTIC_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(SemanticTypeLabel.SEMANTIC_TYPE_LABEL, DSL.name("semantic_type_label_type_fkey"), new TableField[] { SemanticTypeLabel.SEMANTIC_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<SourceRecord, DatasetRecord> SOURCE__SOURCE_DATASET_CODE_FKEY = Internal.createForeignKey(Source.SOURCE, DSL.name("source_dataset_code_fkey"), new TableField[] { Source.SOURCE.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<SourceActivityLogRecord, ActivityLogRecord> SOURCE_ACTIVITY_LOG__SOURCE_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY = Internal.createForeignKey(SourceActivityLog.SOURCE_ACTIVITY_LOG, DSL.name("source_activity_log_activity_log_id_fkey"), new TableField[] { SourceActivityLog.SOURCE_ACTIVITY_LOG.ACTIVITY_LOG_ID }, Keys.ACTIVITY_LOG_PKEY, new TableField[] { ActivityLog.ACTIVITY_LOG.ID }, true);
    public static final ForeignKey<SourceActivityLogRecord, SourceRecord> SOURCE_ACTIVITY_LOG__SOURCE_ACTIVITY_LOG_SOURCE_ID_FKEY = Internal.createForeignKey(SourceActivityLog.SOURCE_ACTIVITY_LOG, DSL.name("source_activity_log_source_id_fkey"), new TableField[] { SourceActivityLog.SOURCE_ACTIVITY_LOG.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<SourceFreeformRecord, FreeformRecord> SOURCE_FREEFORM__SOURCE_FREEFORM_FREEFORM_ID_FKEY = Internal.createForeignKey(SourceFreeform.SOURCE_FREEFORM, DSL.name("source_freeform_freeform_id_fkey"), new TableField[] { SourceFreeform.SOURCE_FREEFORM.FREEFORM_ID }, Keys.FREEFORM_PKEY, new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final ForeignKey<SourceFreeformRecord, SourceRecord> SOURCE_FREEFORM__SOURCE_FREEFORM_SOURCE_ID_FKEY = Internal.createForeignKey(SourceFreeform.SOURCE_FREEFORM, DSL.name("source_freeform_source_id_fkey"), new TableField[] { SourceFreeform.SOURCE_FREEFORM.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<UsageRecord, LanguageRecord> USAGE__USAGE_LANG_FKEY = Internal.createForeignKey(Usage.USAGE, DSL.name("usage_lang_fkey"), new TableField[] { Usage.USAGE.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<UsageRecord, LexemeRecord> USAGE__USAGE_LEXEME_ID_FKEY = Internal.createForeignKey(Usage.USAGE, DSL.name("usage_lexeme_id_fkey"), new TableField[] { Usage.USAGE.LEXEME_ID }, Keys.LEXEME_PKEY, new TableField[] { Lexeme.LEXEME.ID }, true);
    public static final ForeignKey<UsageDefinitionRecord, LanguageRecord> USAGE_DEFINITION__USAGE_DEFINITION_LANG_FKEY = Internal.createForeignKey(UsageDefinition.USAGE_DEFINITION, DSL.name("usage_definition_lang_fkey"), new TableField[] { UsageDefinition.USAGE_DEFINITION.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<UsageDefinitionRecord, UsageRecord> USAGE_DEFINITION__USAGE_DEFINITION_USAGE_ID_FKEY = Internal.createForeignKey(UsageDefinition.USAGE_DEFINITION, DSL.name("usage_definition_usage_id_fkey"), new TableField[] { UsageDefinition.USAGE_DEFINITION.USAGE_ID }, Keys.USAGE_PKEY, new TableField[] { Usage.USAGE.ID }, true);
    public static final ForeignKey<UsageSourceLinkRecord, SourceRecord> USAGE_SOURCE_LINK__USAGE_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(UsageSourceLink.USAGE_SOURCE_LINK, DSL.name("usage_source_link_source_id_fkey"), new TableField[] { UsageSourceLink.USAGE_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<UsageSourceLinkRecord, UsageRecord> USAGE_SOURCE_LINK__USAGE_SOURCE_LINK_USAGE_ID_FKEY = Internal.createForeignKey(UsageSourceLink.USAGE_SOURCE_LINK, DSL.name("usage_source_link_usage_id_fkey"), new TableField[] { UsageSourceLink.USAGE_SOURCE_LINK.USAGE_ID }, Keys.USAGE_PKEY, new TableField[] { Usage.USAGE.ID }, true);
    public static final ForeignKey<UsageTranslationRecord, LanguageRecord> USAGE_TRANSLATION__USAGE_TRANSLATION_LANG_FKEY = Internal.createForeignKey(UsageTranslation.USAGE_TRANSLATION, DSL.name("usage_translation_lang_fkey"), new TableField[] { UsageTranslation.USAGE_TRANSLATION.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<UsageTranslationRecord, UsageRecord> USAGE_TRANSLATION__USAGE_TRANSLATION_USAGE_ID_FKEY = Internal.createForeignKey(UsageTranslation.USAGE_TRANSLATION, DSL.name("usage_translation_usage_id_fkey"), new TableField[] { UsageTranslation.USAGE_TRANSLATION.USAGE_ID }, Keys.USAGE_PKEY, new TableField[] { Usage.USAGE.ID }, true);
    public static final ForeignKey<UsageTypeLabelRecord, UsageTypeRecord> USAGE_TYPE_LABEL__USAGE_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(UsageTypeLabel.USAGE_TYPE_LABEL, DSL.name("usage_type_label_code_fkey"), new TableField[] { UsageTypeLabel.USAGE_TYPE_LABEL.CODE }, Keys.USAGE_TYPE_PKEY, new TableField[] { UsageType.USAGE_TYPE.CODE }, true);
    public static final ForeignKey<UsageTypeLabelRecord, LanguageRecord> USAGE_TYPE_LABEL__USAGE_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(UsageTypeLabel.USAGE_TYPE_LABEL, DSL.name("usage_type_label_lang_fkey"), new TableField[] { UsageTypeLabel.USAGE_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<UsageTypeLabelRecord, LabelTypeRecord> USAGE_TYPE_LABEL__USAGE_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(UsageTypeLabel.USAGE_TYPE_LABEL, DSL.name("usage_type_label_type_fkey"), new TableField[] { UsageTypeLabel.USAGE_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<ValueStateLabelRecord, ValueStateRecord> VALUE_STATE_LABEL__VALUE_STATE_LABEL_CODE_FKEY = Internal.createForeignKey(ValueStateLabel.VALUE_STATE_LABEL, DSL.name("value_state_label_code_fkey"), new TableField[] { ValueStateLabel.VALUE_STATE_LABEL.CODE }, Keys.VALUE_STATE_PKEY, new TableField[] { ValueState.VALUE_STATE.CODE }, true);
    public static final ForeignKey<ValueStateLabelRecord, LanguageRecord> VALUE_STATE_LABEL__VALUE_STATE_LABEL_LANG_FKEY = Internal.createForeignKey(ValueStateLabel.VALUE_STATE_LABEL, DSL.name("value_state_label_lang_fkey"), new TableField[] { ValueStateLabel.VALUE_STATE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<ValueStateLabelRecord, LabelTypeRecord> VALUE_STATE_LABEL__VALUE_STATE_LABEL_TYPE_FKEY = Internal.createForeignKey(ValueStateLabel.VALUE_STATE_LABEL, DSL.name("value_state_label_type_fkey"), new TableField[] { ValueStateLabel.VALUE_STATE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<WordRecord, AspectRecord> WORD__WORD_ASPECT_CODE_FKEY = Internal.createForeignKey(Word.WORD, DSL.name("word_aspect_code_fkey"), new TableField[] { Word.WORD.ASPECT_CODE }, Keys.ASPECT_PKEY, new TableField[] { Aspect.ASPECT.CODE }, true);
    public static final ForeignKey<WordRecord, DisplayMorphRecord> WORD__WORD_DISPLAY_MORPH_CODE_FKEY = Internal.createForeignKey(Word.WORD, DSL.name("word_display_morph_code_fkey"), new TableField[] { Word.WORD.DISPLAY_MORPH_CODE }, Keys.DISPLAY_MORPH_PKEY, new TableField[] { DisplayMorph.DISPLAY_MORPH.CODE }, true);
    public static final ForeignKey<WordRecord, GenderRecord> WORD__WORD_GENDER_CODE_FKEY = Internal.createForeignKey(Word.WORD, DSL.name("word_gender_code_fkey"), new TableField[] { Word.WORD.GENDER_CODE }, Keys.GENDER_PKEY, new TableField[] { Gender.GENDER.CODE }, true);
    public static final ForeignKey<WordRecord, LanguageRecord> WORD__WORD_LANG_FKEY = Internal.createForeignKey(Word.WORD, DSL.name("word_lang_fkey"), new TableField[] { Word.WORD.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<WordActivityLogRecord, ActivityLogRecord> WORD_ACTIVITY_LOG__WORD_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY = Internal.createForeignKey(WordActivityLog.WORD_ACTIVITY_LOG, DSL.name("word_activity_log_activity_log_id_fkey"), new TableField[] { WordActivityLog.WORD_ACTIVITY_LOG.ACTIVITY_LOG_ID }, Keys.ACTIVITY_LOG_PKEY, new TableField[] { ActivityLog.ACTIVITY_LOG.ID }, true);
    public static final ForeignKey<WordActivityLogRecord, WordRecord> WORD_ACTIVITY_LOG__WORD_ACTIVITY_LOG_WORD_ID_FKEY = Internal.createForeignKey(WordActivityLog.WORD_ACTIVITY_LOG, DSL.name("word_activity_log_word_id_fkey"), new TableField[] { WordActivityLog.WORD_ACTIVITY_LOG.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordEtymologyRecord, EtymologyTypeRecord> WORD_ETYMOLOGY__WORD_ETYMOLOGY_ETYMOLOGY_TYPE_CODE_FKEY = Internal.createForeignKey(WordEtymology.WORD_ETYMOLOGY, DSL.name("word_etymology_etymology_type_code_fkey"), new TableField[] { WordEtymology.WORD_ETYMOLOGY.ETYMOLOGY_TYPE_CODE }, Keys.ETYMOLOGY_TYPE_PKEY, new TableField[] { EtymologyType.ETYMOLOGY_TYPE.CODE }, true);
    public static final ForeignKey<WordEtymologyRecord, WordRecord> WORD_ETYMOLOGY__WORD_ETYMOLOGY_WORD_ID_FKEY = Internal.createForeignKey(WordEtymology.WORD_ETYMOLOGY, DSL.name("word_etymology_word_id_fkey"), new TableField[] { WordEtymology.WORD_ETYMOLOGY.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordEtymologyRelationRecord, WordRecord> WORD_ETYMOLOGY_RELATION__WORD_ETYMOLOGY_RELATION_RELATED_WORD_ID_FKEY = Internal.createForeignKey(WordEtymologyRelation.WORD_ETYMOLOGY_RELATION, DSL.name("word_etymology_relation_related_word_id_fkey"), new TableField[] { WordEtymologyRelation.WORD_ETYMOLOGY_RELATION.RELATED_WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordEtymologyRelationRecord, WordEtymologyRecord> WORD_ETYMOLOGY_RELATION__WORD_ETYMOLOGY_RELATION_WORD_ETYM_ID_FKEY = Internal.createForeignKey(WordEtymologyRelation.WORD_ETYMOLOGY_RELATION, DSL.name("word_etymology_relation_word_etym_id_fkey"), new TableField[] { WordEtymologyRelation.WORD_ETYMOLOGY_RELATION.WORD_ETYM_ID }, Keys.WORD_ETYMOLOGY_PKEY, new TableField[] { WordEtymology.WORD_ETYMOLOGY.ID }, true);
    public static final ForeignKey<WordEtymologySourceLinkRecord, SourceRecord> WORD_ETYMOLOGY_SOURCE_LINK__WORD_ETYMOLOGY_SOURCE_LINK_SOURCE_ID_FKEY = Internal.createForeignKey(WordEtymologySourceLink.WORD_ETYMOLOGY_SOURCE_LINK, DSL.name("word_etymology_source_link_source_id_fkey"), new TableField[] { WordEtymologySourceLink.WORD_ETYMOLOGY_SOURCE_LINK.SOURCE_ID }, Keys.SOURCE_PKEY, new TableField[] { Source.SOURCE.ID }, true);
    public static final ForeignKey<WordEtymologySourceLinkRecord, WordEtymologyRecord> WORD_ETYMOLOGY_SOURCE_LINK__WORD_ETYMOLOGY_SOURCE_LINK_WORD_ETYM_ID_FKEY = Internal.createForeignKey(WordEtymologySourceLink.WORD_ETYMOLOGY_SOURCE_LINK, DSL.name("word_etymology_source_link_word_etym_id_fkey"), new TableField[] { WordEtymologySourceLink.WORD_ETYMOLOGY_SOURCE_LINK.WORD_ETYM_ID }, Keys.WORD_ETYMOLOGY_PKEY, new TableField[] { WordEtymology.WORD_ETYMOLOGY.ID }, true);
    public static final ForeignKey<WordForumRecord, EkiUserRecord> WORD_FORUM__WORD_FORUM_CREATOR_ID_FKEY = Internal.createForeignKey(WordForum.WORD_FORUM, DSL.name("word_forum_creator_id_fkey"), new TableField[] { WordForum.WORD_FORUM.CREATOR_ID }, Keys.EKI_USER_PKEY, new TableField[] { EkiUser.EKI_USER.ID }, true);
    public static final ForeignKey<WordForumRecord, WordRecord> WORD_FORUM__WORD_FORUM_WORD_ID_FKEY = Internal.createForeignKey(WordForum.WORD_FORUM, DSL.name("word_forum_word_id_fkey"), new TableField[] { WordForum.WORD_FORUM.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordFreeformRecord, FreeformRecord> WORD_FREEFORM__WORD_FREEFORM_FREEFORM_ID_FKEY = Internal.createForeignKey(WordFreeform.WORD_FREEFORM, DSL.name("word_freeform_freeform_id_fkey"), new TableField[] { WordFreeform.WORD_FREEFORM.FREEFORM_ID }, Keys.FREEFORM_PKEY, new TableField[] { Freeform.FREEFORM.ID }, true);
    public static final ForeignKey<WordFreeformRecord, WordRecord> WORD_FREEFORM__WORD_FREEFORM_WORD_ID_FKEY = Internal.createForeignKey(WordFreeform.WORD_FREEFORM, DSL.name("word_freeform_word_id_fkey"), new TableField[] { WordFreeform.WORD_FREEFORM.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordFreqRecord, FreqCorpRecord> WORD_FREQ__WORD_FREQ_FREQ_CORP_ID_FKEY = Internal.createForeignKey(WordFreq.WORD_FREQ, DSL.name("word_freq_freq_corp_id_fkey"), new TableField[] { WordFreq.WORD_FREQ.FREQ_CORP_ID }, Keys.FREQ_CORP_PKEY, new TableField[] { FreqCorp.FREQ_CORP.ID }, true);
    public static final ForeignKey<WordFreqRecord, WordRecord> WORD_FREQ__WORD_FREQ_WORD_ID_FKEY = Internal.createForeignKey(WordFreq.WORD_FREQ, DSL.name("word_freq_word_id_fkey"), new TableField[] { WordFreq.WORD_FREQ.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordGroupRecord, WordRelTypeRecord> WORD_GROUP__WORD_GROUP_WORD_REL_TYPE_CODE_FKEY = Internal.createForeignKey(WordGroup.WORD_GROUP, DSL.name("word_group_word_rel_type_code_fkey"), new TableField[] { WordGroup.WORD_GROUP.WORD_REL_TYPE_CODE }, Keys.WORD_REL_TYPE_PKEY, new TableField[] { WordRelType.WORD_REL_TYPE.CODE }, true);
    public static final ForeignKey<WordGroupMemberRecord, WordGroupRecord> WORD_GROUP_MEMBER__WORD_GROUP_MEMBER_WORD_GROUP_ID_FKEY = Internal.createForeignKey(WordGroupMember.WORD_GROUP_MEMBER, DSL.name("word_group_member_word_group_id_fkey"), new TableField[] { WordGroupMember.WORD_GROUP_MEMBER.WORD_GROUP_ID }, Keys.WORD_GROUP_PKEY, new TableField[] { WordGroup.WORD_GROUP.ID }, true);
    public static final ForeignKey<WordGroupMemberRecord, WordRecord> WORD_GROUP_MEMBER__WORD_GROUP_MEMBER_WORD_ID_FKEY = Internal.createForeignKey(WordGroupMember.WORD_GROUP_MEMBER, DSL.name("word_group_member_word_id_fkey"), new TableField[] { WordGroupMember.WORD_GROUP_MEMBER.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordGuidRecord, DatasetRecord> WORD_GUID__WORD_GUID_DATASET_CODE_FKEY = Internal.createForeignKey(WordGuid.WORD_GUID, DSL.name("word_guid_dataset_code_fkey"), new TableField[] { WordGuid.WORD_GUID.DATASET_CODE }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.CODE }, true);
    public static final ForeignKey<WordGuidRecord, WordRecord> WORD_GUID__WORD_GUID_WORD_ID_FKEY = Internal.createForeignKey(WordGuid.WORD_GUID, DSL.name("word_guid_word_id_fkey"), new TableField[] { WordGuid.WORD_GUID.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordLastActivityLogRecord, ActivityLogRecord> WORD_LAST_ACTIVITY_LOG__WORD_LAST_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY = Internal.createForeignKey(WordLastActivityLog.WORD_LAST_ACTIVITY_LOG, DSL.name("word_last_activity_log_activity_log_id_fkey"), new TableField[] { WordLastActivityLog.WORD_LAST_ACTIVITY_LOG.ACTIVITY_LOG_ID }, Keys.ACTIVITY_LOG_PKEY, new TableField[] { ActivityLog.ACTIVITY_LOG.ID }, true);
    public static final ForeignKey<WordLastActivityLogRecord, WordRecord> WORD_LAST_ACTIVITY_LOG__WORD_LAST_ACTIVITY_LOG_WORD_ID_FKEY = Internal.createForeignKey(WordLastActivityLog.WORD_LAST_ACTIVITY_LOG, DSL.name("word_last_activity_log_word_id_fkey"), new TableField[] { WordLastActivityLog.WORD_LAST_ACTIVITY_LOG.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordOdMorphRecord, WordRecord> WORD_OD_MORPH__WORD_OD_MORPH_WORD_ID_FKEY = Internal.createForeignKey(WordOdMorph.WORD_OD_MORPH, DSL.name("word_od_morph_word_id_fkey"), new TableField[] { WordOdMorph.WORD_OD_MORPH.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordOdRecommendationRecord, WordRecord> WORD_OD_RECOMMENDATION__WORD_OD_RECOMMENDATION_WORD_ID_FKEY = Internal.createForeignKey(WordOdRecommendation.WORD_OD_RECOMMENDATION, DSL.name("word_od_recommendation_word_id_fkey"), new TableField[] { WordOdRecommendation.WORD_OD_RECOMMENDATION.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordOdUsageRecord, WordRecord> WORD_OD_USAGE__WORD_OD_USAGE_WORD_ID_FKEY = Internal.createForeignKey(WordOdUsage.WORD_OD_USAGE, DSL.name("word_od_usage_word_id_fkey"), new TableField[] { WordOdUsage.WORD_OD_USAGE.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordRelMappingRecord, WordRelTypeRecord> WORD_REL_MAPPING__WORD_REL_MAPPING_CODE1_FKEY = Internal.createForeignKey(WordRelMapping.WORD_REL_MAPPING, DSL.name("word_rel_mapping_code1_fkey"), new TableField[] { WordRelMapping.WORD_REL_MAPPING.CODE1 }, Keys.WORD_REL_TYPE_PKEY, new TableField[] { WordRelType.WORD_REL_TYPE.CODE }, true);
    public static final ForeignKey<WordRelMappingRecord, WordRelTypeRecord> WORD_REL_MAPPING__WORD_REL_MAPPING_CODE2_FKEY = Internal.createForeignKey(WordRelMapping.WORD_REL_MAPPING, DSL.name("word_rel_mapping_code2_fkey"), new TableField[] { WordRelMapping.WORD_REL_MAPPING.CODE2 }, Keys.WORD_REL_TYPE_PKEY, new TableField[] { WordRelType.WORD_REL_TYPE.CODE }, true);
    public static final ForeignKey<WordRelTypeLabelRecord, WordRelTypeRecord> WORD_REL_TYPE_LABEL__WORD_REL_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(WordRelTypeLabel.WORD_REL_TYPE_LABEL, DSL.name("word_rel_type_label_code_fkey"), new TableField[] { WordRelTypeLabel.WORD_REL_TYPE_LABEL.CODE }, Keys.WORD_REL_TYPE_PKEY, new TableField[] { WordRelType.WORD_REL_TYPE.CODE }, true);
    public static final ForeignKey<WordRelTypeLabelRecord, LanguageRecord> WORD_REL_TYPE_LABEL__WORD_REL_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(WordRelTypeLabel.WORD_REL_TYPE_LABEL, DSL.name("word_rel_type_label_lang_fkey"), new TableField[] { WordRelTypeLabel.WORD_REL_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<WordRelTypeLabelRecord, LabelTypeRecord> WORD_REL_TYPE_LABEL__WORD_REL_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(WordRelTypeLabel.WORD_REL_TYPE_LABEL, DSL.name("word_rel_type_label_type_fkey"), new TableField[] { WordRelTypeLabel.WORD_REL_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<WordRelationRecord, WordRecord> WORD_RELATION__WORD_RELATION_WORD1_ID_FKEY = Internal.createForeignKey(WordRelation.WORD_RELATION, DSL.name("word_relation_word1_id_fkey"), new TableField[] { WordRelation.WORD_RELATION.WORD1_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordRelationRecord, WordRecord> WORD_RELATION__WORD_RELATION_WORD2_ID_FKEY = Internal.createForeignKey(WordRelation.WORD_RELATION, DSL.name("word_relation_word2_id_fkey"), new TableField[] { WordRelation.WORD_RELATION.WORD2_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordRelationRecord, WordRelTypeRecord> WORD_RELATION__WORD_RELATION_WORD_REL_TYPE_CODE_FKEY = Internal.createForeignKey(WordRelation.WORD_RELATION, DSL.name("word_relation_word_rel_type_code_fkey"), new TableField[] { WordRelation.WORD_RELATION.WORD_REL_TYPE_CODE }, Keys.WORD_REL_TYPE_PKEY, new TableField[] { WordRelType.WORD_REL_TYPE.CODE }, true);
    public static final ForeignKey<WordTagRecord, TagRecord> WORD_TAG__WORD_TAG_TAG_NAME_FKEY = Internal.createForeignKey(WordTag.WORD_TAG, DSL.name("word_tag_tag_name_fkey"), new TableField[] { WordTag.WORD_TAG.TAG_NAME }, Keys.TAG_PKEY, new TableField[] { Tag.TAG.NAME }, true);
    public static final ForeignKey<WordTagRecord, WordRecord> WORD_TAG__WORD_TAG_WORD_ID_FKEY = Internal.createForeignKey(WordTag.WORD_TAG, DSL.name("word_tag_word_id_fkey"), new TableField[] { WordTag.WORD_TAG.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordTypeLabelRecord, WordTypeRecord> WORD_TYPE_LABEL__WORD_TYPE_LABEL_CODE_FKEY = Internal.createForeignKey(WordTypeLabel.WORD_TYPE_LABEL, DSL.name("word_type_label_code_fkey"), new TableField[] { WordTypeLabel.WORD_TYPE_LABEL.CODE }, Keys.WORD_TYPE_PKEY, new TableField[] { WordType.WORD_TYPE.CODE }, true);
    public static final ForeignKey<WordTypeLabelRecord, LanguageRecord> WORD_TYPE_LABEL__WORD_TYPE_LABEL_LANG_FKEY = Internal.createForeignKey(WordTypeLabel.WORD_TYPE_LABEL, DSL.name("word_type_label_lang_fkey"), new TableField[] { WordTypeLabel.WORD_TYPE_LABEL.LANG }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.CODE }, true);
    public static final ForeignKey<WordTypeLabelRecord, LabelTypeRecord> WORD_TYPE_LABEL__WORD_TYPE_LABEL_TYPE_FKEY = Internal.createForeignKey(WordTypeLabel.WORD_TYPE_LABEL, DSL.name("word_type_label_type_fkey"), new TableField[] { WordTypeLabel.WORD_TYPE_LABEL.TYPE }, Keys.LABEL_TYPE_PKEY, new TableField[] { LabelType.LABEL_TYPE.CODE }, true);
    public static final ForeignKey<WordWordTypeRecord, WordRecord> WORD_WORD_TYPE__WORD_WORD_TYPE_WORD_ID_FKEY = Internal.createForeignKey(WordWordType.WORD_WORD_TYPE, DSL.name("word_word_type_word_id_fkey"), new TableField[] { WordWordType.WORD_WORD_TYPE.WORD_ID }, Keys.WORD_PKEY, new TableField[] { Word.WORD.ID }, true);
    public static final ForeignKey<WordWordTypeRecord, WordTypeRecord> WORD_WORD_TYPE__WORD_WORD_TYPE_WORD_TYPE_CODE_FKEY = Internal.createForeignKey(WordWordType.WORD_WORD_TYPE, DSL.name("word_word_type_word_type_code_fkey"), new TableField[] { WordWordType.WORD_WORD_TYPE.WORD_TYPE_CODE }, Keys.WORD_TYPE_PKEY, new TableField[] { WordType.WORD_TYPE.CODE }, true);
}
