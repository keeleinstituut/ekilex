/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.FormFreqRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormFreq extends TableImpl<FormFreqRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.form_freq</code>
     */
    public static final FormFreq FORM_FREQ = new FormFreq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FormFreqRecord> getRecordType() {
        return FormFreqRecord.class;
    }

    /**
     * The column <code>public.form_freq.id</code>.
     */
    public final TableField<FormFreqRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.form_freq.freq_corp_id</code>.
     */
    public final TableField<FormFreqRecord, Long> FREQ_CORP_ID = createField(DSL.name("freq_corp_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.form_freq.form_id</code>.
     */
    public final TableField<FormFreqRecord, Long> FORM_ID = createField(DSL.name("form_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.form_freq.value</code>.
     */
    public final TableField<FormFreqRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC(12, 7).nullable(false), this, "");

    /**
     * The column <code>public.form_freq.rank</code>.
     */
    public final TableField<FormFreqRecord, Long> RANK = createField(DSL.name("rank"), SQLDataType.BIGINT.nullable(false), this, "");

    private FormFreq(Name alias, Table<FormFreqRecord> aliased) {
        this(alias, aliased, null);
    }

    private FormFreq(Name alias, Table<FormFreqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.form_freq</code> table reference
     */
    public FormFreq(String alias) {
        this(DSL.name(alias), FORM_FREQ);
    }

    /**
     * Create an aliased <code>public.form_freq</code> table reference
     */
    public FormFreq(Name alias) {
        this(alias, FORM_FREQ);
    }

    /**
     * Create a <code>public.form_freq</code> table reference
     */
    public FormFreq() {
        this(DSL.name("form_freq"), null);
    }

    public <O extends Record> FormFreq(Table<O> child, ForeignKey<O, FormFreqRecord> key) {
        super(child, key, FORM_FREQ);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<FormFreqRecord, Long> getIdentity() {
        return (Identity<FormFreqRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FormFreqRecord> getPrimaryKey() {
        return Keys.FORM_FREQ_PKEY;
    }

    @Override
    public List<UniqueKey<FormFreqRecord>> getKeys() {
        return Arrays.<UniqueKey<FormFreqRecord>>asList(Keys.FORM_FREQ_PKEY, Keys.FORM_FREQ_FREQ_CORP_ID_FORM_ID_KEY);
    }

    @Override
    public List<ForeignKey<FormFreqRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FormFreqRecord, ?>>asList(Keys.FORM_FREQ__FORM_FREQ_FREQ_CORP_ID_FKEY, Keys.FORM_FREQ__FORM_FREQ_FORM_ID_FKEY);
    }

    private transient FreqCorp _freqCorp;
    private transient Form _form;

    public FreqCorp freqCorp() {
        if (_freqCorp == null)
            _freqCorp = new FreqCorp(this, Keys.FORM_FREQ__FORM_FREQ_FREQ_CORP_ID_FKEY);

        return _freqCorp;
    }

    public Form form() {
        if (_form == null)
            _form = new Form(this, Keys.FORM_FREQ__FORM_FREQ_FORM_ID_FKEY);

        return _form;
    }

    @Override
    public FormFreq as(String alias) {
        return new FormFreq(DSL.name(alias), this);
    }

    @Override
    public FormFreq as(Name alias) {
        return new FormFreq(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FormFreq rename(String name) {
        return new FormFreq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FormFreq rename(Name name) {
        return new FormFreq(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, BigDecimal, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
