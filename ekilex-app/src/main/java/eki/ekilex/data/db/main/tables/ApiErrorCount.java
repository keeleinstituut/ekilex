/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ApiErrorCountRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiErrorCount extends TableImpl<ApiErrorCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.api_error_count</code>
     */
    public static final ApiErrorCount API_ERROR_COUNT = new ApiErrorCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiErrorCountRecord> getRecordType() {
        return ApiErrorCountRecord.class;
    }

    /**
     * The column <code>public.api_error_count.id</code>.
     */
    public final TableField<ApiErrorCountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.api_error_count.auth_name</code>.
     */
    public final TableField<ApiErrorCountRecord, String> AUTH_NAME = createField(DSL.name("auth_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.api_error_count.generic_path</code>.
     */
    public final TableField<ApiErrorCountRecord, String> GENERIC_PATH = createField(DSL.name("generic_path"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.api_error_count.message</code>.
     */
    public final TableField<ApiErrorCountRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.api_error_count.count</code>.
     */
    public final TableField<ApiErrorCountRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    private ApiErrorCount(Name alias, Table<ApiErrorCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiErrorCount(Name alias, Table<ApiErrorCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.api_error_count</code> table reference
     */
    public ApiErrorCount(String alias) {
        this(DSL.name(alias), API_ERROR_COUNT);
    }

    /**
     * Create an aliased <code>public.api_error_count</code> table reference
     */
    public ApiErrorCount(Name alias) {
        this(alias, API_ERROR_COUNT);
    }

    /**
     * Create a <code>public.api_error_count</code> table reference
     */
    public ApiErrorCount() {
        this(DSL.name("api_error_count"), null);
    }

    public <O extends Record> ApiErrorCount(Table<O> child, ForeignKey<O, ApiErrorCountRecord> key) {
        super(child, key, API_ERROR_COUNT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ApiErrorCountRecord, Long> getIdentity() {
        return (Identity<ApiErrorCountRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApiErrorCountRecord> getPrimaryKey() {
        return Keys.API_ERROR_COUNT_PKEY;
    }

    @Override
    public List<UniqueKey<ApiErrorCountRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiErrorCountRecord>>asList(Keys.API_ERROR_COUNT_PKEY, Keys.API_ERROR_COUNT_AUTH_NAME_GENERIC_PATH_MESSAGE_KEY);
    }

    @Override
    public ApiErrorCount as(String alias) {
        return new ApiErrorCount(DSL.name(alias), this);
    }

    @Override
    public ApiErrorCount as(Name alias) {
        return new ApiErrorCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiErrorCount rename(String name) {
        return new ApiErrorCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiErrorCount rename(Name name) {
        return new ApiErrorCount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
