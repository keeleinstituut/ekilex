/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ApiRequestCountRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiRequestCount extends TableImpl<ApiRequestCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.api_request_count</code>
     */
    public static final ApiRequestCount API_REQUEST_COUNT = new ApiRequestCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiRequestCountRecord> getRecordType() {
        return ApiRequestCountRecord.class;
    }

    /**
     * The column <code>public.api_request_count.id</code>.
     */
    public final TableField<ApiRequestCountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.api_request_count.auth_name</code>.
     */
    public final TableField<ApiRequestCountRecord, String> AUTH_NAME = createField(DSL.name("auth_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.api_request_count.generic_path</code>.
     */
    public final TableField<ApiRequestCountRecord, String> GENERIC_PATH = createField(DSL.name("generic_path"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.api_request_count.count</code>.
     */
    public final TableField<ApiRequestCountRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    private ApiRequestCount(Name alias, Table<ApiRequestCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiRequestCount(Name alias, Table<ApiRequestCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.api_request_count</code> table reference
     */
    public ApiRequestCount(String alias) {
        this(DSL.name(alias), API_REQUEST_COUNT);
    }

    /**
     * Create an aliased <code>public.api_request_count</code> table reference
     */
    public ApiRequestCount(Name alias) {
        this(alias, API_REQUEST_COUNT);
    }

    /**
     * Create a <code>public.api_request_count</code> table reference
     */
    public ApiRequestCount() {
        this(DSL.name("api_request_count"), null);
    }

    public <O extends Record> ApiRequestCount(Table<O> child, ForeignKey<O, ApiRequestCountRecord> key) {
        super(child, key, API_REQUEST_COUNT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ApiRequestCountRecord, Long> getIdentity() {
        return (Identity<ApiRequestCountRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApiRequestCountRecord> getPrimaryKey() {
        return Keys.API_REQUEST_COUNT_PKEY;
    }

    @Override
    public List<UniqueKey<ApiRequestCountRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiRequestCountRecord>>asList(Keys.API_REQUEST_COUNT_PKEY, Keys.API_REQUEST_COUNT_AUTH_NAME_GENERIC_PATH_KEY);
    }

    @Override
    public ApiRequestCount as(String alias) {
        return new ApiRequestCount(DSL.name(alias), this);
    }

    @Override
    public ApiRequestCount as(Name alias) {
        return new ApiRequestCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiRequestCount rename(String name) {
        return new ApiRequestCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiRequestCount rename(Name name) {
        return new ApiRequestCount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
