/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewOsWordRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOsWord extends TableImpl<ViewOsWordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_os_word</code>
     */
    public static final ViewOsWord VIEW_OS_WORD = new ViewOsWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOsWordRecord> getRecordType() {
        return ViewOsWordRecord.class;
    }

    /**
     * The column <code>public.view_os_word.word_id</code>.
     */
    public final TableField<ViewOsWordRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_word.value</code>.
     */
    public final TableField<ViewOsWordRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_os_word.value_prese</code>.
     */
    public final TableField<ViewOsWordRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_os_word.value_as_word</code>.
     */
    public final TableField<ViewOsWordRecord, String> VALUE_AS_WORD = createField(DSL.name("value_as_word"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_os_word.homonym_nr</code>.
     */
    public final TableField<ViewOsWordRecord, Integer> HOMONYM_NR = createField(DSL.name("homonym_nr"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.view_os_word.homonym_exists</code>.
     */
    public final TableField<ViewOsWordRecord, Boolean> HOMONYM_EXISTS = createField(DSL.name("homonym_exists"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.view_os_word.display_morph_code</code>.
     */
    public final TableField<ViewOsWordRecord, String> DISPLAY_MORPH_CODE = createField(DSL.name("display_morph_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.view_os_word.word_type_codes</code>.
     */
    public final TableField<ViewOsWordRecord, String[]> WORD_TYPE_CODES = createField(DSL.name("word_type_codes"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

    private ViewOsWord(Name alias, Table<ViewOsWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewOsWord(Name alias, Table<ViewOsWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_os_word\" as  SELECT w.id AS word_id,\n    w.value,\n    w.value_prese,\n    w.value_as_word,\n    COALESCE(hn.homonym_nr, w.homonym_nr) AS homonym_nr,\n    (EXISTS ( SELECT 1\n           FROM word w2\n          WHERE ((w2.value = w.value) AND (w2.id <> w.id) AND (w2.is_public = true) AND (w2.lang = 'est'::bpchar) AND (EXISTS ( SELECT 1\n                   FROM lexeme l2\n                  WHERE ((l2.word_id = w2.id) AND (l2.is_public = true) AND (l2.is_word = true) AND ((l2.dataset_code)::text = 'eki'::text) AND (EXISTS ( SELECT 1\n                           FROM publishing p2\n                          WHERE (((p2.target_name)::text = 'ww_os'::text) AND ((p2.entity_name)::text = 'lexeme'::text) AND (p2.entity_id = l2.id)))))))))) AS homonym_exists,\n    w.display_morph_code,\n    ( SELECT array_agg(wwt.word_type_code) AS array_agg\n           FROM word_word_type wwt\n          WHERE (wwt.word_id = w.id)) AS word_type_codes\n   FROM (word w\n     LEFT JOIN word_os_homonym_nr hn ON ((hn.word_id = w.id)))\n  WHERE ((w.is_public = true) AND (w.lang = 'est'::bpchar) AND (EXISTS ( SELECT 1\n           FROM lexeme l\n          WHERE ((l.word_id = w.id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text) AND (EXISTS ( SELECT 1\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id))))))))\n  ORDER BY w.id;"));
    }

    /**
     * Create an aliased <code>public.view_os_word</code> table reference
     */
    public ViewOsWord(String alias) {
        this(DSL.name(alias), VIEW_OS_WORD);
    }

    /**
     * Create an aliased <code>public.view_os_word</code> table reference
     */
    public ViewOsWord(Name alias) {
        this(alias, VIEW_OS_WORD);
    }

    /**
     * Create a <code>public.view_os_word</code> table reference
     */
    public ViewOsWord() {
        this(DSL.name("view_os_word"), null);
    }

    public <O extends Record> ViewOsWord(Table<O> child, ForeignKey<O, ViewOsWordRecord> key) {
        super(child, key, VIEW_OS_WORD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewOsWord as(String alias) {
        return new ViewOsWord(DSL.name(alias), this);
    }

    @Override
    public ViewOsWord as(Name alias) {
        return new ViewOsWord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsWord rename(String name) {
        return new ViewOsWord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsWord rename(Name name) {
        return new ViewOsWord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, Integer, Boolean, String, String[]> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
