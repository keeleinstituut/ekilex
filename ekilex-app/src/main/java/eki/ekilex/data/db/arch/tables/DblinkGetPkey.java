/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.arch.tables;


import eki.ekilex.data.db.arch.Public;
import eki.ekilex.data.db.arch.tables.records.DblinkGetPkeyRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DblinkGetPkey extends TableImpl<DblinkGetPkeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dblink_get_pkey</code>
     */
    public static final DblinkGetPkey DBLINK_GET_PKEY = new DblinkGetPkey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DblinkGetPkeyRecord> getRecordType() {
        return DblinkGetPkeyRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<DblinkGetPkeyRecord, Object> DBLINK_GET_PKEY_ = createField(DSL.name("dblink_get_pkey"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"dblink_pkey_results\""), this, "");

    private DblinkGetPkey(Name alias, Table<DblinkGetPkeyRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private DblinkGetPkey(Name alias, Table<DblinkGetPkeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.dblink_get_pkey</code> table reference
     */
    public DblinkGetPkey(String alias) {
        this(DSL.name(alias), DBLINK_GET_PKEY);
    }

    /**
     * Create an aliased <code>public.dblink_get_pkey</code> table reference
     */
    public DblinkGetPkey(Name alias) {
        this(alias, DBLINK_GET_PKEY);
    }

    /**
     * Create a <code>public.dblink_get_pkey</code> table reference
     */
    public DblinkGetPkey() {
        this(DSL.name("dblink_get_pkey"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public DblinkGetPkey as(String alias) {
        return new DblinkGetPkey(DSL.name(alias), this, parameters);
    }

    @Override
    public DblinkGetPkey as(Name alias) {
        return new DblinkGetPkey(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public DblinkGetPkey rename(String name) {
        return new DblinkGetPkey(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public DblinkGetPkey rename(Name name) {
        return new DblinkGetPkey(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Object> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public DblinkGetPkey call(
          String __1
    ) {
        DblinkGetPkey result = new DblinkGetPkey(DSL.name("dblink_get_pkey"), null, new Field[] {
              DSL.val(__1, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public DblinkGetPkey call(
          Field<String> __1
    ) {
        DblinkGetPkey result = new DblinkGetPkey(DSL.name("dblink_get_pkey"), null, new Field[] {
              __1
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
