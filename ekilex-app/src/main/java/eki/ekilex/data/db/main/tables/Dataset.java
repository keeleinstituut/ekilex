/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.DatasetRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dataset extends TableImpl<DatasetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dataset</code>
     */
    public static final Dataset DATASET = new Dataset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetRecord> getRecordType() {
        return DatasetRecord.class;
    }

    /**
     * The column <code>public.dataset.code</code>.
     */
    public final TableField<DatasetRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.dataset.type</code>.
     */
    public final TableField<DatasetRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.dataset.name</code>.
     */
    public final TableField<DatasetRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.dataset.description</code>.
     */
    public final TableField<DatasetRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset.is_visible</code>.
     */
    public final TableField<DatasetRecord, Boolean> IS_VISIBLE = createField(DSL.name("is_visible"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dataset.is_public</code>.
     */
    public final TableField<DatasetRecord, Boolean> IS_PUBLIC = createField(DSL.name("is_public"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dataset.order_by</code>.
     */
    public final TableField<DatasetRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.dataset.is_superior</code>.
     */
    public final TableField<DatasetRecord, Boolean> IS_SUPERIOR = createField(DSL.name("is_superior"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dataset.contact</code>.
     */
    public final TableField<DatasetRecord, String> CONTACT = createField(DSL.name("contact"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset.image_url</code>.
     */
    public final TableField<DatasetRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset.fed_term_collection_id</code>.
     */
    public final TableField<DatasetRecord, String> FED_TERM_COLLECTION_ID = createField(DSL.name("fed_term_collection_id"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.dataset.fed_term_domain_id</code>.
     */
    public final TableField<DatasetRecord, String> FED_TERM_DOMAIN_ID = createField(DSL.name("fed_term_domain_id"), SQLDataType.VARCHAR(100), this, "");

    private Dataset(Name alias, Table<DatasetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dataset(Name alias, Table<DatasetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dataset</code> table reference
     */
    public Dataset(String alias) {
        this(DSL.name(alias), DATASET);
    }

    /**
     * Create an aliased <code>public.dataset</code> table reference
     */
    public Dataset(Name alias) {
        this(alias, DATASET);
    }

    /**
     * Create a <code>public.dataset</code> table reference
     */
    public Dataset() {
        this(DSL.name("dataset"), null);
    }

    public <O extends Record> Dataset(Table<O> child, ForeignKey<O, DatasetRecord> key) {
        super(child, key, DATASET);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DatasetRecord, Long> getIdentity() {
        return (Identity<DatasetRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DatasetRecord> getPrimaryKey() {
        return Keys.DATASET_PKEY;
    }

    @Override
    public List<UniqueKey<DatasetRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetRecord>>asList(Keys.DATASET_PKEY);
    }

    @Override
    public Dataset as(String alias) {
        return new Dataset(DSL.name(alias), this);
    }

    @Override
    public Dataset as(Name alias) {
        return new Dataset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataset rename(String name) {
        return new Dataset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataset rename(Name name) {
        return new Dataset(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, Boolean, Boolean, Long, Boolean, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
