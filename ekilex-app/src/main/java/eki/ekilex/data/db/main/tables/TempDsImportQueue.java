/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.TempDsImportQueueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TempDsImportQueue extends TableImpl<TempDsImportQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.temp_ds_import_queue</code>
     */
    public static final TempDsImportQueue TEMP_DS_IMPORT_QUEUE = new TempDsImportQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TempDsImportQueueRecord> getRecordType() {
        return TempDsImportQueueRecord.class;
    }

    /**
     * The column <code>public.temp_ds_import_queue.id</code>.
     */
    public final TableField<TempDsImportQueueRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.temp_ds_import_queue.import_code</code>.
     */
    public final TableField<TempDsImportQueueRecord, String> IMPORT_CODE = createField(DSL.name("import_code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_queue.created_on</code>.
     */
    public final TableField<TempDsImportQueueRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.temp_ds_import_queue.table_name</code>.
     */
    public final TableField<TempDsImportQueueRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_queue.content</code>.
     */
    public final TableField<TempDsImportQueueRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    private TempDsImportQueue(Name alias, Table<TempDsImportQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private TempDsImportQueue(Name alias, Table<TempDsImportQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.temp_ds_import_queue</code> table reference
     */
    public TempDsImportQueue(String alias) {
        this(DSL.name(alias), TEMP_DS_IMPORT_QUEUE);
    }

    /**
     * Create an aliased <code>public.temp_ds_import_queue</code> table reference
     */
    public TempDsImportQueue(Name alias) {
        this(alias, TEMP_DS_IMPORT_QUEUE);
    }

    /**
     * Create a <code>public.temp_ds_import_queue</code> table reference
     */
    public TempDsImportQueue() {
        this(DSL.name("temp_ds_import_queue"), null);
    }

    public <O extends Record> TempDsImportQueue(Table<O> child, ForeignKey<O, TempDsImportQueueRecord> key) {
        super(child, key, TEMP_DS_IMPORT_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TempDsImportQueueRecord, Long> getIdentity() {
        return (Identity<TempDsImportQueueRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TempDsImportQueueRecord> getPrimaryKey() {
        return Keys.TEMP_DS_IMPORT_QUEUE_PKEY;
    }

    @Override
    public List<UniqueKey<TempDsImportQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<TempDsImportQueueRecord>>asList(Keys.TEMP_DS_IMPORT_QUEUE_PKEY);
    }

    @Override
    public TempDsImportQueue as(String alias) {
        return new TempDsImportQueue(DSL.name(alias), this);
    }

    @Override
    public TempDsImportQueue as(Name alias) {
        return new TempDsImportQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TempDsImportQueue rename(String name) {
        return new TempDsImportQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TempDsImportQueue rename(Name name) {
        return new TempDsImportQueue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Timestamp, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
