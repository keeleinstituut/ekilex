/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.arch.tables;


import eki.ekilex.data.db.arch.Keys;
import eki.ekilex.data.db.arch.Public;
import eki.ekilex.data.db.arch.tables.records.ActivityLogBulkRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivityLogBulk extends TableImpl<ActivityLogBulkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activity_log_bulk</code>
     */
    public static final ActivityLogBulk ACTIVITY_LOG_BULK = new ActivityLogBulk();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityLogBulkRecord> getRecordType() {
        return ActivityLogBulkRecord.class;
    }

    /**
     * The column <code>public.activity_log_bulk.id</code>.
     */
    public final TableField<ActivityLogBulkRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.activity_log_bulk.activity_log_id</code>.
     */
    public final TableField<ActivityLogBulkRecord, Long> ACTIVITY_LOG_ID = createField(DSL.name("activity_log_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.activity_log_bulk.owner_id</code>.
     */
    public final TableField<ActivityLogBulkRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.activity_log_bulk.owner_name</code>.
     */
    public final TableField<ActivityLogBulkRecord, String> OWNER_NAME = createField(DSL.name("owner_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.activity_log_bulk.entity_id</code>.
     */
    public final TableField<ActivityLogBulkRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.activity_log_bulk.entity_name</code>.
     */
    public final TableField<ActivityLogBulkRecord, String> ENTITY_NAME = createField(DSL.name("entity_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.activity_log_bulk.prev_data</code>.
     */
    public final TableField<ActivityLogBulkRecord, JSONB> PREV_DATA = createField(DSL.name("prev_data"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.activity_log_bulk.curr_data</code>.
     */
    public final TableField<ActivityLogBulkRecord, JSONB> CURR_DATA = createField(DSL.name("curr_data"), SQLDataType.JSONB.nullable(false), this, "");

    private ActivityLogBulk(Name alias, Table<ActivityLogBulkRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActivityLogBulk(Name alias, Table<ActivityLogBulkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.activity_log_bulk</code> table reference
     */
    public ActivityLogBulk(String alias) {
        this(DSL.name(alias), ACTIVITY_LOG_BULK);
    }

    /**
     * Create an aliased <code>public.activity_log_bulk</code> table reference
     */
    public ActivityLogBulk(Name alias) {
        this(alias, ACTIVITY_LOG_BULK);
    }

    /**
     * Create a <code>public.activity_log_bulk</code> table reference
     */
    public ActivityLogBulk() {
        this(DSL.name("activity_log_bulk"), null);
    }

    public <O extends Record> ActivityLogBulk(Table<O> child, ForeignKey<O, ActivityLogBulkRecord> key) {
        super(child, key, ACTIVITY_LOG_BULK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ActivityLogBulkRecord, Long> getIdentity() {
        return (Identity<ActivityLogBulkRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ActivityLogBulkRecord> getPrimaryKey() {
        return Keys.ACTIVITY_LOG_BULK_PKEY;
    }

    @Override
    public List<UniqueKey<ActivityLogBulkRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivityLogBulkRecord>>asList(Keys.ACTIVITY_LOG_BULK_PKEY);
    }

    @Override
    public ActivityLogBulk as(String alias) {
        return new ActivityLogBulk(DSL.name(alias), this);
    }

    @Override
    public ActivityLogBulk as(Name alias) {
        return new ActivityLogBulk(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityLogBulk rename(String name) {
        return new ActivityLogBulk(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityLogBulk rename(Name name) {
        return new ActivityLogBulk(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, String, Long, String, JSONB, JSONB> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
