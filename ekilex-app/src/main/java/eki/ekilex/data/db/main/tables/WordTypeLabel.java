/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.WordTypeLabelRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordTypeLabel extends TableImpl<WordTypeLabelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.word_type_label</code>
     */
    public static final WordTypeLabel WORD_TYPE_LABEL = new WordTypeLabel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordTypeLabelRecord> getRecordType() {
        return WordTypeLabelRecord.class;
    }

    /**
     * The column <code>public.word_type_label.code</code>.
     */
    public final TableField<WordTypeLabelRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.word_type_label.value</code>.
     */
    public final TableField<WordTypeLabelRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.word_type_label.lang</code>.
     */
    public final TableField<WordTypeLabelRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.word_type_label.type</code>.
     */
    public final TableField<WordTypeLabelRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private WordTypeLabel(Name alias, Table<WordTypeLabelRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordTypeLabel(Name alias, Table<WordTypeLabelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.word_type_label</code> table reference
     */
    public WordTypeLabel(String alias) {
        this(DSL.name(alias), WORD_TYPE_LABEL);
    }

    /**
     * Create an aliased <code>public.word_type_label</code> table reference
     */
    public WordTypeLabel(Name alias) {
        this(alias, WORD_TYPE_LABEL);
    }

    /**
     * Create a <code>public.word_type_label</code> table reference
     */
    public WordTypeLabel() {
        this(DSL.name("word_type_label"), null);
    }

    public <O extends Record> WordTypeLabel(Table<O> child, ForeignKey<O, WordTypeLabelRecord> key) {
        super(child, key, WORD_TYPE_LABEL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<WordTypeLabelRecord>> getKeys() {
        return Arrays.<UniqueKey<WordTypeLabelRecord>>asList(Keys.WORD_TYPE_LABEL_CODE_LANG_TYPE_KEY);
    }

    @Override
    public List<ForeignKey<WordTypeLabelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordTypeLabelRecord, ?>>asList(Keys.WORD_TYPE_LABEL__WORD_TYPE_LABEL_CODE_FKEY, Keys.WORD_TYPE_LABEL__WORD_TYPE_LABEL_LANG_FKEY, Keys.WORD_TYPE_LABEL__WORD_TYPE_LABEL_TYPE_FKEY);
    }

    private transient WordType _wordType;
    private transient Language _language;
    private transient LabelType _labelType;

    public WordType wordType() {
        if (_wordType == null)
            _wordType = new WordType(this, Keys.WORD_TYPE_LABEL__WORD_TYPE_LABEL_CODE_FKEY);

        return _wordType;
    }

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.WORD_TYPE_LABEL__WORD_TYPE_LABEL_LANG_FKEY);

        return _language;
    }

    public LabelType labelType() {
        if (_labelType == null)
            _labelType = new LabelType(this, Keys.WORD_TYPE_LABEL__WORD_TYPE_LABEL_TYPE_FKEY);

        return _labelType;
    }

    @Override
    public WordTypeLabel as(String alias) {
        return new WordTypeLabel(DSL.name(alias), this);
    }

    @Override
    public WordTypeLabel as(Name alias) {
        return new WordTypeLabel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordTypeLabel rename(String name) {
        return new WordTypeLabel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordTypeLabel rename(Name name) {
        return new WordTypeLabel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
