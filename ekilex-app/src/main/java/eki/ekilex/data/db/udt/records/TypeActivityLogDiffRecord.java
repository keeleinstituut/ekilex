/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt.records;


import eki.ekilex.data.db.udt.TypeActivityLogDiff;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeActivityLogDiffRecord extends UDTRecordImpl<TypeActivityLogDiffRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.type_activity_log_diff.op</code>.
     */
    public void setOp(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.type_activity_log_diff.op</code>.
     */
    public String getOp() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.type_activity_log_diff.path</code>.
     */
    public void setPath(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.type_activity_log_diff.path</code>.
     */
    public String getPath() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.type_activity_log_diff.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.type_activity_log_diff.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TypeActivityLogDiff.OP;
    }

    @Override
    public Field<String> field2() {
        return TypeActivityLogDiff.PATH;
    }

    @Override
    public Field<String> field3() {
        return TypeActivityLogDiff.VALUE;
    }

    @Override
    public String component1() {
        return getOp();
    }

    @Override
    public String component2() {
        return getPath();
    }

    @Override
    public String component3() {
        return getValue();
    }

    @Override
    public String value1() {
        return getOp();
    }

    @Override
    public String value2() {
        return getPath();
    }

    @Override
    public String value3() {
        return getValue();
    }

    @Override
    public TypeActivityLogDiffRecord value1(String value) {
        setOp(value);
        return this;
    }

    @Override
    public TypeActivityLogDiffRecord value2(String value) {
        setPath(value);
        return this;
    }

    @Override
    public TypeActivityLogDiffRecord value3(String value) {
        setValue(value);
        return this;
    }

    @Override
    public TypeActivityLogDiffRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypeActivityLogDiffRecord
     */
    public TypeActivityLogDiffRecord() {
        super(TypeActivityLogDiff.TYPE_ACTIVITY_LOG_DIFF);
    }

    /**
     * Create a detached, initialised TypeActivityLogDiffRecord
     */
    public TypeActivityLogDiffRecord(String op, String path, String value) {
        super(TypeActivityLogDiff.TYPE_ACTIVITY_LOG_DIFF);

        setOp(op);
        setPath(path);
        setValue(value);
    }
}
