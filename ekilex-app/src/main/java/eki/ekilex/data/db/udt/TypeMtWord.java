/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeMtWordRecord;

import java.sql.Timestamp;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeMtWord extends UDTImpl<TypeMtWordRecord> {

    private static final long serialVersionUID = -673623512;

    /**
     * The reference instance of <code>public.type_mt_word</code>
     */
    public static final TypeMtWord TYPE_MT_WORD = new TypeMtWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeMtWordRecord> getRecordType() {
        return TypeMtWordRecord.class;
    }

    /**
     * The attribute <code>public.type_mt_word.lexeme_id</code>.
     */
    public static final UDTField<TypeMtWordRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), org.jooq.impl.SQLDataType.BIGINT, TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.word_id</code>.
     */
    public static final UDTField<TypeMtWordRecord, Long> WORD_ID = createField(DSL.name("word_id"), org.jooq.impl.SQLDataType.BIGINT, TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.value</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.CLOB, TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.value_prese</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), org.jooq.impl.SQLDataType.CLOB, TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.lang</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> LANG = createField(DSL.name("lang"), org.jooq.impl.SQLDataType.CHAR(3), TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.homonym_nr</code>.
     */
    public static final UDTField<TypeMtWordRecord, Integer> HOMONYM_NR = createField(DSL.name("homonym_nr"), org.jooq.impl.SQLDataType.INTEGER, TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.display_morph_code</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> DISPLAY_MORPH_CODE = createField(DSL.name("display_morph_code"), org.jooq.impl.SQLDataType.VARCHAR(100), TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.gender_code</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> GENDER_CODE = createField(DSL.name("gender_code"), org.jooq.impl.SQLDataType.VARCHAR(100), TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.aspect_code</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> ASPECT_CODE = createField(DSL.name("aspect_code"), org.jooq.impl.SQLDataType.VARCHAR(100), TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.vocal_form</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> VOCAL_FORM = createField(DSL.name("vocal_form"), org.jooq.impl.SQLDataType.CLOB, TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.morphophono_form</code>.
     */
    public static final UDTField<TypeMtWordRecord, String> MORPHOPHONO_FORM = createField(DSL.name("morphophono_form"), org.jooq.impl.SQLDataType.CLOB, TYPE_MT_WORD, "");

    /**
     * The attribute <code>public.type_mt_word.manual_event_on</code>.
     */
    public static final UDTField<TypeMtWordRecord, Timestamp> MANUAL_EVENT_ON = createField(DSL.name("manual_event_on"), org.jooq.impl.SQLDataType.TIMESTAMP, TYPE_MT_WORD, "");

    /**
     * No further instances allowed
     */
    private TypeMtWord() {
        super("type_mt_word", null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
