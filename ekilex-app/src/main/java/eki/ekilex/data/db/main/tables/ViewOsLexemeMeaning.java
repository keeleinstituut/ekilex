/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewOsLexemeMeaningRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOsLexemeMeaning extends TableImpl<ViewOsLexemeMeaningRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_os_lexeme_meaning</code>
     */
    public static final ViewOsLexemeMeaning VIEW_OS_LEXEME_MEANING = new ViewOsLexemeMeaning();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOsLexemeMeaningRecord> getRecordType() {
        return ViewOsLexemeMeaningRecord.class;
    }

    /**
     * The column <code>public.view_os_lexeme_meaning.word_id</code>.
     */
    public final TableField<ViewOsLexemeMeaningRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_lexeme_meaning.lexeme_meanings</code>.
     */
    public final TableField<ViewOsLexemeMeaningRecord, JSON> LEXEME_MEANINGS = createField(DSL.name("lexeme_meanings"), SQLDataType.JSON, this, "");

    private ViewOsLexemeMeaning(Name alias, Table<ViewOsLexemeMeaningRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewOsLexemeMeaning(Name alias, Table<ViewOsLexemeMeaningRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_os_lexeme_meaning\" as  SELECT word_id,\n    json_agg(json_build_object('lexemeId', id, 'wordId', word_id, 'meaningId', meaning_id, 'valueStateCode', value_state_code, 'registerCodes', ( SELECT array_agg(lr.register_code) AS array_agg\n           FROM lexeme_register lr\n          WHERE (lr.lexeme_id = l.id)), 'meaning', ( SELECT json_build_object('meaningId', m.id, 'definition', ( SELECT json_build_object('definitionId', d.definition_id, 'meaningId', d.meaning_id, 'value', d.value, 'valuePrese', d.value_prese) AS json_build_object\n                   FROM view_os_definition d\n                  WHERE (d.meaning_id = m.id)\n                 LIMIT 1), 'lexemeWords', ( SELECT json_agg(json_build_object('lexemeId', l2.id, 'wordId', l2.word_id, 'meaningId', l2.meaning_id, 'valueStateCode', l2.value_state_code, 'registerCodes', ( SELECT array_agg(lr.register_code) AS array_agg\n                           FROM lexeme_register lr\n                          WHERE (lr.lexeme_id = l2.id)), 'value', w2.value, 'valuePrese', w2.value_prese, 'homonymNr', w2.homonym_nr, 'displayMorphCode', w2.display_morph_code, 'wordTypeCodes', ( SELECT array_agg(wwt.word_type_code) AS array_agg\n                           FROM word_word_type wwt\n                          WHERE (wwt.word_id = w2.id))) ORDER BY l2.order_by) AS json_agg\n                   FROM lexeme l2,\n                    word w2\n                  WHERE ((l2.meaning_id = m.id) AND (l2.word_id = w2.id) AND (l2.id <> l.id) AND (l2.is_public = true) AND (l2.is_word = true) AND ((l2.dataset_code)::text = 'eki'::text) AND (w2.is_public = true) AND (w2.lang = 'est'::bpchar) AND (EXISTS ( SELECT 1\n                           FROM publishing p\n                          WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id))))))) AS json_build_object\n           FROM meaning m\n          WHERE (m.id = l.meaning_id))) ORDER BY level1, level2) AS lexeme_meanings\n   FROM lexeme l\n  WHERE ((is_public = true) AND (is_word = true) AND ((dataset_code)::text = 'eki'::text) AND (EXISTS ( SELECT 1\n           FROM word w\n          WHERE ((w.id = l.word_id) AND (w.lang = 'est'::bpchar)))) AND (EXISTS ( SELECT 1\n           FROM publishing p\n          WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))))\n  GROUP BY word_id\n  ORDER BY word_id;"));
    }

    /**
     * Create an aliased <code>public.view_os_lexeme_meaning</code> table reference
     */
    public ViewOsLexemeMeaning(String alias) {
        this(DSL.name(alias), VIEW_OS_LEXEME_MEANING);
    }

    /**
     * Create an aliased <code>public.view_os_lexeme_meaning</code> table reference
     */
    public ViewOsLexemeMeaning(Name alias) {
        this(alias, VIEW_OS_LEXEME_MEANING);
    }

    /**
     * Create a <code>public.view_os_lexeme_meaning</code> table reference
     */
    public ViewOsLexemeMeaning() {
        this(DSL.name("view_os_lexeme_meaning"), null);
    }

    public <O extends Record> ViewOsLexemeMeaning(Table<O> child, ForeignKey<O, ViewOsLexemeMeaningRecord> key) {
        super(child, key, VIEW_OS_LEXEME_MEANING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewOsLexemeMeaning as(String alias) {
        return new ViewOsLexemeMeaning(DSL.name(alias), this);
    }

    @Override
    public ViewOsLexemeMeaning as(Name alias) {
        return new ViewOsLexemeMeaning(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsLexemeMeaning rename(String name) {
        return new ViewOsLexemeMeaning(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsLexemeMeaning rename(Name name) {
        return new ViewOsLexemeMeaning(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
