/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewOsDefinitionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOsDefinition extends TableImpl<ViewOsDefinitionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_os_definition</code>
     */
    public static final ViewOsDefinition VIEW_OS_DEFINITION = new ViewOsDefinition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOsDefinitionRecord> getRecordType() {
        return ViewOsDefinitionRecord.class;
    }

    /**
     * The column <code>public.view_os_definition.meaning_id</code>.
     */
    public final TableField<ViewOsDefinitionRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_definition.definition_id</code>.
     */
    public final TableField<ViewOsDefinitionRecord, Long> DEFINITION_ID = createField(DSL.name("definition_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_definition.value</code>.
     */
    public final TableField<ViewOsDefinitionRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_os_definition.value_prese</code>.
     */
    public final TableField<ViewOsDefinitionRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB, this, "");

    private ViewOsDefinition(Name alias, Table<ViewOsDefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewOsDefinition(Name alias, Table<ViewOsDefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_os_definition\" as  SELECT meaning_id,\n    definition_id,\n    value,\n    value_prese\n   FROM ( SELECT d_1.meaning_id,\n            ((d_1.definition ->> 'definition_id'::text))::bigint AS definition_id,\n            (d_1.definition ->> 'value'::text) AS value,\n            (d_1.definition ->> 'value_prese'::text) AS value_prese,\n            (d_1.definition ->> 'lang'::text) AS lang\n           FROM ( SELECT d_2.meaning_id,\n                    (array_agg(json_build_object('definition_id', d_2.id, 'value', d_2.value, 'value_prese', d_2.value_prese, 'lang', d_2.lang) ORDER BY d_2.order_by))[1] AS definition\n                   FROM definition d_2\n                  WHERE ((d_2.is_public = true) AND (d_2.lang = 'est'::bpchar) AND (EXISTS ( SELECT 1\n                           FROM publishing p\n                          WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'definition'::text) AND (p.entity_id = d_2.id)))))\n                  GROUP BY d_2.meaning_id) d_1) d\n  ORDER BY meaning_id, definition_id;"));
    }

    /**
     * Create an aliased <code>public.view_os_definition</code> table reference
     */
    public ViewOsDefinition(String alias) {
        this(DSL.name(alias), VIEW_OS_DEFINITION);
    }

    /**
     * Create an aliased <code>public.view_os_definition</code> table reference
     */
    public ViewOsDefinition(Name alias) {
        this(alias, VIEW_OS_DEFINITION);
    }

    /**
     * Create a <code>public.view_os_definition</code> table reference
     */
    public ViewOsDefinition() {
        this(DSL.name("view_os_definition"), null);
    }

    public <O extends Record> ViewOsDefinition(Table<O> child, ForeignKey<O, ViewOsDefinitionRecord> key) {
        super(child, key, VIEW_OS_DEFINITION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewOsDefinition as(String alias) {
        return new ViewOsDefinition(DSL.name(alias), this);
    }

    @Override
    public ViewOsDefinition as(Name alias) {
        return new ViewOsDefinition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsDefinition rename(String name) {
        return new ViewOsDefinition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsDefinition rename(Name name) {
        return new ViewOsDefinition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
