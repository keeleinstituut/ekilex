/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.GovernmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Government extends TableImpl<GovernmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.government</code>
     */
    public static final Government GOVERNMENT = new Government();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GovernmentRecord> getRecordType() {
        return GovernmentRecord.class;
    }

    /**
     * The column <code>public.government.id</code>.
     */
    public final TableField<GovernmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.government.original_freeform_id</code>.
     */
    public final TableField<GovernmentRecord, Long> ORIGINAL_FREEFORM_ID = createField(DSL.name("original_freeform_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.government.lexeme_id</code>.
     */
    public final TableField<GovernmentRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.government.value</code>.
     */
    public final TableField<GovernmentRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.government.created_by</code>.
     */
    public final TableField<GovernmentRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.government.created_on</code>.
     */
    public final TableField<GovernmentRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.government.modified_by</code>.
     */
    public final TableField<GovernmentRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.government.modified_on</code>.
     */
    public final TableField<GovernmentRecord, LocalDateTime> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.government.order_by</code>.
     */
    public final TableField<GovernmentRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private Government(Name alias, Table<GovernmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Government(Name alias, Table<GovernmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.government</code> table reference
     */
    public Government(String alias) {
        this(DSL.name(alias), GOVERNMENT);
    }

    /**
     * Create an aliased <code>public.government</code> table reference
     */
    public Government(Name alias) {
        this(alias, GOVERNMENT);
    }

    /**
     * Create a <code>public.government</code> table reference
     */
    public Government() {
        this(DSL.name("government"), null);
    }

    public <O extends Record> Government(Table<O> child, ForeignKey<O, GovernmentRecord> key) {
        super(child, key, GOVERNMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<GovernmentRecord, Long> getIdentity() {
        return (Identity<GovernmentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<GovernmentRecord> getPrimaryKey() {
        return Keys.GOVERNMENT_PKEY;
    }

    @Override
    public List<UniqueKey<GovernmentRecord>> getKeys() {
        return Arrays.<UniqueKey<GovernmentRecord>>asList(Keys.GOVERNMENT_PKEY);
    }

    @Override
    public List<ForeignKey<GovernmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GovernmentRecord, ?>>asList(Keys.GOVERNMENT__GOVERNMENT_LEXEME_ID_FKEY);
    }

    private transient Lexeme _lexeme;

    public Lexeme lexeme() {
        if (_lexeme == null)
            _lexeme = new Lexeme(this, Keys.GOVERNMENT__GOVERNMENT_LEXEME_ID_FKEY);

        return _lexeme;
    }

    @Override
    public Government as(String alias) {
        return new Government(DSL.name(alias), this);
    }

    @Override
    public Government as(Name alias) {
        return new Government(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Government rename(String name) {
        return new Government(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Government rename(Name name) {
        return new Government(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, String, String, LocalDateTime, String, LocalDateTime, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
