/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.CollocationRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Collocation extends TableImpl<CollocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.collocation</code>
     */
    public static final Collocation COLLOCATION = new Collocation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollocationRecord> getRecordType() {
        return CollocationRecord.class;
    }

    /**
     * The column <code>public.collocation.id</code>.
     */
    public final TableField<CollocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.collocation.value</code>.
     */
    public final TableField<CollocationRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.collocation.definition</code>.
     */
    public final TableField<CollocationRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.collocation.frequency</code>.
     */
    public final TableField<CollocationRecord, BigDecimal> FREQUENCY = createField(DSL.name("frequency"), SQLDataType.NUMERIC(14, 4), this, "");

    /**
     * The column <code>public.collocation.score</code>.
     */
    public final TableField<CollocationRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC(14, 4), this, "");

    /**
     * The column <code>public.collocation.usages</code>.
     */
    public final TableField<CollocationRecord, String[]> USAGES = createField(DSL.name("usages"), SQLDataType.CLOB.getArrayDataType(), this, "");

    private Collocation(Name alias, Table<CollocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Collocation(Name alias, Table<CollocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.collocation</code> table reference
     */
    public Collocation(String alias) {
        this(DSL.name(alias), COLLOCATION);
    }

    /**
     * Create an aliased <code>public.collocation</code> table reference
     */
    public Collocation(Name alias) {
        this(alias, COLLOCATION);
    }

    /**
     * Create a <code>public.collocation</code> table reference
     */
    public Collocation() {
        this(DSL.name("collocation"), null);
    }

    public <O extends Record> Collocation(Table<O> child, ForeignKey<O, CollocationRecord> key) {
        super(child, key, COLLOCATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CollocationRecord, Long> getIdentity() {
        return (Identity<CollocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CollocationRecord> getPrimaryKey() {
        return Keys.COLLOCATION_PKEY;
    }

    @Override
    public List<UniqueKey<CollocationRecord>> getKeys() {
        return Arrays.<UniqueKey<CollocationRecord>>asList(Keys.COLLOCATION_PKEY);
    }

    @Override
    public Collocation as(String alias) {
        return new Collocation(DSL.name(alias), this);
    }

    @Override
    public Collocation as(Name alias) {
        return new Collocation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Collocation rename(String name) {
        return new Collocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Collocation rename(Name name) {
        return new Collocation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, BigDecimal, BigDecimal, String[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
