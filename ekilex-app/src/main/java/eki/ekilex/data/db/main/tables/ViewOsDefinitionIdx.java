/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewOsDefinitionIdxRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOsDefinitionIdx extends TableImpl<ViewOsDefinitionIdxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_os_definition_idx</code>
     */
    public static final ViewOsDefinitionIdx VIEW_OS_DEFINITION_IDX = new ViewOsDefinitionIdx();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOsDefinitionIdxRecord> getRecordType() {
        return ViewOsDefinitionIdxRecord.class;
    }

    /**
     * The column <code>public.view_os_definition_idx.word_id</code>.
     */
    public final TableField<ViewOsDefinitionIdxRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_definition_idx.meaning_id</code>.
     */
    public final TableField<ViewOsDefinitionIdxRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_definition_idx.definition_id</code>.
     */
    public final TableField<ViewOsDefinitionIdxRecord, Long> DEFINITION_ID = createField(DSL.name("definition_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_definition_idx.value</code>.
     */
    public final TableField<ViewOsDefinitionIdxRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private ViewOsDefinitionIdx(Name alias, Table<ViewOsDefinitionIdxRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewOsDefinitionIdx(Name alias, Table<ViewOsDefinitionIdxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_os_definition_idx\" as  SELECT l.word_id,\n    l.meaning_id,\n    d.definition_id,\n    d.value\n   FROM lexeme l,\n    view_os_definition d\n  WHERE ((l.meaning_id = d.meaning_id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text) AND (EXISTS ( SELECT 1\n           FROM word w\n          WHERE ((w.id = l.word_id) AND (w.lang = 'est'::bpchar)))) AND (EXISTS ( SELECT 1\n           FROM publishing p\n          WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))))\n  ORDER BY l.word_id, l.id, l.meaning_id;"));
    }

    /**
     * Create an aliased <code>public.view_os_definition_idx</code> table reference
     */
    public ViewOsDefinitionIdx(String alias) {
        this(DSL.name(alias), VIEW_OS_DEFINITION_IDX);
    }

    /**
     * Create an aliased <code>public.view_os_definition_idx</code> table reference
     */
    public ViewOsDefinitionIdx(Name alias) {
        this(alias, VIEW_OS_DEFINITION_IDX);
    }

    /**
     * Create a <code>public.view_os_definition_idx</code> table reference
     */
    public ViewOsDefinitionIdx() {
        this(DSL.name("view_os_definition_idx"), null);
    }

    public <O extends Record> ViewOsDefinitionIdx(Table<O> child, ForeignKey<O, ViewOsDefinitionIdxRecord> key) {
        super(child, key, VIEW_OS_DEFINITION_IDX);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewOsDefinitionIdx as(String alias) {
        return new ViewOsDefinitionIdx(DSL.name(alias), this);
    }

    @Override
    public ViewOsDefinitionIdx as(Name alias) {
        return new ViewOsDefinitionIdx(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsDefinitionIdx rename(String name) {
        return new ViewOsDefinitionIdx(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsDefinitionIdx rename(Name name) {
        return new ViewOsDefinitionIdx(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
