/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ViewWwWordEtymSourceLinkRecord;
import eki.ekilex.data.db.udt.records.TypeSourceLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwWordEtymSourceLink extends TableImpl<ViewWwWordEtymSourceLinkRecord> {

    private static final long serialVersionUID = 636619443;

    /**
     * The reference instance of <code>public.view_ww_word_etym_source_link</code>
     */
    public static final ViewWwWordEtymSourceLink VIEW_WW_WORD_ETYM_SOURCE_LINK = new ViewWwWordEtymSourceLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwWordEtymSourceLinkRecord> getRecordType() {
        return ViewWwWordEtymSourceLinkRecord.class;
    }

    /**
     * The column <code>public.view_ww_word_etym_source_link.word_id</code>.
     */
    public final TableField<ViewWwWordEtymSourceLinkRecord, Long> WORD_ID = createField(DSL.name("word_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_word_etym_source_link.source_links</code>.
     */
    public final TableField<ViewWwWordEtymSourceLinkRecord, TypeSourceLinkRecord[]> SOURCE_LINKS = createField(DSL.name("source_links"), eki.ekilex.data.db.udt.TypeSourceLink.TYPE_SOURCE_LINK.getDataType().getArrayDataType(), this, "");

    /**
     * Create a <code>public.view_ww_word_etym_source_link</code> table reference
     */
    public ViewWwWordEtymSourceLink() {
        this(DSL.name("view_ww_word_etym_source_link"), null);
    }

    /**
     * Create an aliased <code>public.view_ww_word_etym_source_link</code> table reference
     */
    public ViewWwWordEtymSourceLink(String alias) {
        this(DSL.name(alias), VIEW_WW_WORD_ETYM_SOURCE_LINK);
    }

    /**
     * Create an aliased <code>public.view_ww_word_etym_source_link</code> table reference
     */
    public ViewWwWordEtymSourceLink(Name alias) {
        this(alias, VIEW_WW_WORD_ETYM_SOURCE_LINK);
    }

    private ViewWwWordEtymSourceLink(Name alias, Table<ViewWwWordEtymSourceLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwWordEtymSourceLink(Name alias, Table<ViewWwWordEtymSourceLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_word_etym_source_link\" as  SELECT we.word_id,\n    array_agg(ROW('WORD_ETYM'::character varying(100), wesl.word_etym_id, wesl.id, wesl.type, wesl.name, wesl.value, wesl.order_by, s.source_id, s.source_props)::type_source_link ORDER BY we.id, wesl.order_by) AS source_links\n   FROM word_etymology we,\n    word_etymology_source_link wesl,\n    ( SELECT s_1.id AS source_id,\n            array_agg(encode_text(ff.value_prese) ORDER BY ff.order_by) AS source_props\n           FROM source s_1,\n            source_freeform sff,\n            freeform ff\n          WHERE ((sff.source_id = s_1.id) AND (sff.freeform_id = ff.id) AND ((ff.type)::text <> ALL ((ARRAY['SOURCE_FILE'::character varying, 'EXTERNAL_SOURCE_ID'::character varying])::text[])))\n          GROUP BY s_1.id) s\n  WHERE ((wesl.word_etym_id = we.id) AND (wesl.source_id = s.source_id) AND (EXISTS ( SELECT l.id\n           FROM lexeme l,\n            dataset ds\n          WHERE ((l.word_id = we.word_id) AND (l.is_public = true) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))))\n  GROUP BY we.word_id\n  ORDER BY we.word_id;"));
    }

    public <O extends Record> ViewWwWordEtymSourceLink(Table<O> child, ForeignKey<O, ViewWwWordEtymSourceLinkRecord> key) {
        super(child, key, VIEW_WW_WORD_ETYM_SOURCE_LINK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwWordEtymSourceLink as(String alias) {
        return new ViewWwWordEtymSourceLink(DSL.name(alias), this);
    }

    @Override
    public ViewWwWordEtymSourceLink as(Name alias) {
        return new ViewWwWordEtymSourceLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordEtymSourceLink rename(String name) {
        return new ViewWwWordEtymSourceLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordEtymSourceLink rename(Name name) {
        return new ViewWwWordEtymSourceLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, TypeSourceLinkRecord[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
