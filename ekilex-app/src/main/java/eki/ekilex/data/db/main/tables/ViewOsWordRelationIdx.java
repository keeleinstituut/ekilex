/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewOsWordRelationIdxRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOsWordRelationIdx extends TableImpl<ViewOsWordRelationIdxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_os_word_relation_idx</code>
     */
    public static final ViewOsWordRelationIdx VIEW_OS_WORD_RELATION_IDX = new ViewOsWordRelationIdx();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOsWordRelationIdxRecord> getRecordType() {
        return ViewOsWordRelationIdxRecord.class;
    }

    /**
     * The column <code>public.view_os_word_relation_idx.word_id</code>.
     */
    public final TableField<ViewOsWordRelationIdxRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_word_relation_idx.word_relation_id</code>.
     */
    public final TableField<ViewOsWordRelationIdxRecord, Long> WORD_RELATION_ID = createField(DSL.name("word_relation_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_word_relation_idx.word_rel_type_code</code>.
     */
    public final TableField<ViewOsWordRelationIdxRecord, String> WORD_REL_TYPE_CODE = createField(DSL.name("word_rel_type_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.view_os_word_relation_idx.order_by</code>.
     */
    public final TableField<ViewOsWordRelationIdxRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_word_relation_idx.related_word_id</code>.
     */
    public final TableField<ViewOsWordRelationIdxRecord, Long> RELATED_WORD_ID = createField(DSL.name("related_word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_os_word_relation_idx.value</code>.
     */
    public final TableField<ViewOsWordRelationIdxRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_os_word_relation_idx.value_as_word</code>.
     */
    public final TableField<ViewOsWordRelationIdxRecord, String> VALUE_AS_WORD = createField(DSL.name("value_as_word"), SQLDataType.CLOB, this, "");

    private ViewOsWordRelationIdx(Name alias, Table<ViewOsWordRelationIdxRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewOsWordRelationIdx(Name alias, Table<ViewOsWordRelationIdxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_os_word_relation_idx\" as  SELECT w1.id AS word_id,\n    wr.id AS word_relation_id,\n    wr.word_rel_type_code,\n    wr.order_by,\n    w2.id AS related_word_id,\n    w2.value,\n    w2.value_as_word\n   FROM word w1,\n    word w2,\n    word_relation wr\n  WHERE ((wr.word1_id = w1.id) AND (wr.word2_id = w2.id) AND (w1.lang = 'est'::bpchar) AND (w2.lang = 'est'::bpchar) AND (w1.is_public = true) AND (w2.is_public = true) AND ((wr.word_rel_type_code)::text = ANY ((ARRAY['ls-j√§relosaga'::character varying, 'ls-esiosaga'::character varying, 'deriv'::character varying, 'komp'::character varying, 'superl'::character varying, 'posit'::character varying])::text[])) AND (EXISTS ( SELECT 1\n           FROM lexeme l\n          WHERE ((l.word_id = w1.id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text) AND (EXISTS ( SELECT 1\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id))))))) AND (EXISTS ( SELECT 1\n           FROM publishing p\n          WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'word_relation'::text) AND (p.entity_id = wr.id)))))\n  ORDER BY w1.id, wr.id;"));
    }

    /**
     * Create an aliased <code>public.view_os_word_relation_idx</code> table reference
     */
    public ViewOsWordRelationIdx(String alias) {
        this(DSL.name(alias), VIEW_OS_WORD_RELATION_IDX);
    }

    /**
     * Create an aliased <code>public.view_os_word_relation_idx</code> table reference
     */
    public ViewOsWordRelationIdx(Name alias) {
        this(alias, VIEW_OS_WORD_RELATION_IDX);
    }

    /**
     * Create a <code>public.view_os_word_relation_idx</code> table reference
     */
    public ViewOsWordRelationIdx() {
        this(DSL.name("view_os_word_relation_idx"), null);
    }

    public <O extends Record> ViewOsWordRelationIdx(Table<O> child, ForeignKey<O, ViewOsWordRelationIdxRecord> key) {
        super(child, key, VIEW_OS_WORD_RELATION_IDX);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewOsWordRelationIdx as(String alias) {
        return new ViewOsWordRelationIdx(DSL.name(alias), this);
    }

    @Override
    public ViewOsWordRelationIdx as(Name alias) {
        return new ViewOsWordRelationIdx(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsWordRelationIdx rename(String name) {
        return new ViewOsWordRelationIdx(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOsWordRelationIdx rename(Name name) {
        return new ViewOsWordRelationIdx(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, Long, Long, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
