/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.WordFreeformRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordFreeform extends TableImpl<WordFreeformRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.word_freeform</code>
     */
    public static final WordFreeform WORD_FREEFORM = new WordFreeform();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordFreeformRecord> getRecordType() {
        return WordFreeformRecord.class;
    }

    /**
     * The column <code>public.word_freeform.id</code>.
     */
    public final TableField<WordFreeformRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.word_freeform.word_id</code>.
     */
    public final TableField<WordFreeformRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_freeform.freeform_id</code>.
     */
    public final TableField<WordFreeformRecord, Long> FREEFORM_ID = createField(DSL.name("freeform_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_freeform.order_by</code>.
     */
    public final TableField<WordFreeformRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private WordFreeform(Name alias, Table<WordFreeformRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordFreeform(Name alias, Table<WordFreeformRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.word_freeform</code> table reference
     */
    public WordFreeform(String alias) {
        this(DSL.name(alias), WORD_FREEFORM);
    }

    /**
     * Create an aliased <code>public.word_freeform</code> table reference
     */
    public WordFreeform(Name alias) {
        this(alias, WORD_FREEFORM);
    }

    /**
     * Create a <code>public.word_freeform</code> table reference
     */
    public WordFreeform() {
        this(DSL.name("word_freeform"), null);
    }

    public <O extends Record> WordFreeform(Table<O> child, ForeignKey<O, WordFreeformRecord> key) {
        super(child, key, WORD_FREEFORM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<WordFreeformRecord, Long> getIdentity() {
        return (Identity<WordFreeformRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WordFreeformRecord> getPrimaryKey() {
        return Keys.WORD_FREEFORM_PKEY;
    }

    @Override
    public List<UniqueKey<WordFreeformRecord>> getKeys() {
        return Arrays.<UniqueKey<WordFreeformRecord>>asList(Keys.WORD_FREEFORM_PKEY, Keys.WORD_FREEFORM_WORD_ID_FREEFORM_ID_KEY);
    }

    @Override
    public List<ForeignKey<WordFreeformRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordFreeformRecord, ?>>asList(Keys.WORD_FREEFORM__WORD_FREEFORM_WORD_ID_FKEY, Keys.WORD_FREEFORM__WORD_FREEFORM_FREEFORM_ID_FKEY);
    }

    private transient Word _word;
    private transient Freeform _freeform;

    public Word word() {
        if (_word == null)
            _word = new Word(this, Keys.WORD_FREEFORM__WORD_FREEFORM_WORD_ID_FKEY);

        return _word;
    }

    public Freeform freeform() {
        if (_freeform == null)
            _freeform = new Freeform(this, Keys.WORD_FREEFORM__WORD_FREEFORM_FREEFORM_ID_FKEY);

        return _freeform;
    }

    @Override
    public WordFreeform as(String alias) {
        return new WordFreeform(DSL.name(alias), this);
    }

    @Override
    public WordFreeform as(Name alias) {
        return new WordFreeform(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordFreeform rename(String name) {
        return new WordFreeform(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordFreeform rename(Name name) {
        return new WordFreeform(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
