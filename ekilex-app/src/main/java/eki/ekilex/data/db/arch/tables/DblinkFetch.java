/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.arch.tables;


import eki.ekilex.data.db.arch.Public;
import eki.ekilex.data.db.arch.tables.records.DblinkFetchRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DblinkFetch extends TableImpl<DblinkFetchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dblink_fetch</code>
     */
    public static final DblinkFetch DBLINK_FETCH = new DblinkFetch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DblinkFetchRecord> getRecordType() {
        return DblinkFetchRecord.class;
    }

    /**
     * The column <code>public.dblink_fetch.dblink_fetch</code>.
     */
    public final TableField<DblinkFetchRecord, Record> DBLINK_FETCH_ = createField(DSL.name("dblink_fetch"), SQLDataType.RECORD, this, "");

    private DblinkFetch(Name alias, Table<DblinkFetchRecord> aliased) {
        this(alias, aliased, new Field[3]);
    }

    private DblinkFetch(Name alias, Table<DblinkFetchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.dblink_fetch</code> table reference
     */
    public DblinkFetch(String alias) {
        this(DSL.name(alias), DBLINK_FETCH);
    }

    /**
     * Create an aliased <code>public.dblink_fetch</code> table reference
     */
    public DblinkFetch(Name alias) {
        this(alias, DBLINK_FETCH);
    }

    /**
     * Create a <code>public.dblink_fetch</code> table reference
     */
    public DblinkFetch() {
        this(DSL.name("dblink_fetch"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public DblinkFetch as(String alias) {
        return new DblinkFetch(DSL.name(alias), this, parameters);
    }

    @Override
    public DblinkFetch as(Name alias) {
        return new DblinkFetch(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public DblinkFetch rename(String name) {
        return new DblinkFetch(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public DblinkFetch rename(Name name) {
        return new DblinkFetch(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Record> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public DblinkFetch call(
          String __1
        , Integer __2
        , Boolean __3
    ) {
        DblinkFetch result = new DblinkFetch(DSL.name("dblink_fetch"), null, new Field[] {
              DSL.val(__1, SQLDataType.CLOB)
            , DSL.val(__2, SQLDataType.INTEGER)
            , DSL.val(__3, SQLDataType.BOOLEAN)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public DblinkFetch call(
          Field<String> __1
        , Field<Integer> __2
        , Field<Boolean> __3
    ) {
        DblinkFetch result = new DblinkFetch(DSL.name("dblink_fetch"), null, new Field[] {
              __1
            , __2
            , __3
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
