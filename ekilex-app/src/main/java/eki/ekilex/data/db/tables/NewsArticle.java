/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.NewsArticleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewsArticle extends TableImpl<NewsArticleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.news_article</code>
     */
    public static final NewsArticle NEWS_ARTICLE = new NewsArticle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewsArticleRecord> getRecordType() {
        return NewsArticleRecord.class;
    }

    /**
     * The column <code>public.news_article.id</code>.
     */
    public final TableField<NewsArticleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.news_article.created</code>.
     */
    public final TableField<NewsArticleRecord, Timestamp> CREATED = createField(DSL.name("created"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.news_article.type</code>.
     */
    public final TableField<NewsArticleRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.news_article.title</code>.
     */
    public final TableField<NewsArticleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.news_article.content</code>.
     */
    public final TableField<NewsArticleRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.news_article.lang</code>.
     */
    public final TableField<NewsArticleRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3), this, "");

    private NewsArticle(Name alias, Table<NewsArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewsArticle(Name alias, Table<NewsArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.news_article</code> table reference
     */
    public NewsArticle(String alias) {
        this(DSL.name(alias), NEWS_ARTICLE);
    }

    /**
     * Create an aliased <code>public.news_article</code> table reference
     */
    public NewsArticle(Name alias) {
        this(alias, NEWS_ARTICLE);
    }

    /**
     * Create a <code>public.news_article</code> table reference
     */
    public NewsArticle() {
        this(DSL.name("news_article"), null);
    }

    public <O extends Record> NewsArticle(Table<O> child, ForeignKey<O, NewsArticleRecord> key) {
        super(child, key, NEWS_ARTICLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<NewsArticleRecord, Long> getIdentity() {
        return (Identity<NewsArticleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewsArticleRecord> getPrimaryKey() {
        return Keys.NEWS_ARTICLE_PKEY;
    }

    @Override
    public List<UniqueKey<NewsArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<NewsArticleRecord>>asList(Keys.NEWS_ARTICLE_PKEY);
    }

    @Override
    public List<ForeignKey<NewsArticleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NewsArticleRecord, ?>>asList(Keys.NEWS_ARTICLE__NEWS_ARTICLE_LANG_FKEY);
    }

    private transient Language _language;

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.NEWS_ARTICLE__NEWS_ARTICLE_LANG_FKEY);

        return _language;
    }

    @Override
    public NewsArticle as(String alias) {
        return new NewsArticle(DSL.name(alias), this);
    }

    @Override
    public NewsArticle as(Name alias) {
        return new NewsArticle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsArticle rename(String name) {
        return new NewsArticle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewsArticle rename(Name name) {
        return new NewsArticle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Timestamp, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
