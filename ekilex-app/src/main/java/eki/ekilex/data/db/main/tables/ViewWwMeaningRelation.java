/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewWwMeaningRelationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwMeaningRelation extends TableImpl<ViewWwMeaningRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_ww_meaning_relation</code>
     */
    public static final ViewWwMeaningRelation VIEW_WW_MEANING_RELATION = new ViewWwMeaningRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwMeaningRelationRecord> getRecordType() {
        return ViewWwMeaningRelationRecord.class;
    }

    /**
     * The column <code>public.view_ww_meaning_relation.meaning_id</code>.
     */
    public final TableField<ViewWwMeaningRelationRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_meaning_relation.related_meanings</code>.
     */
    public final TableField<ViewWwMeaningRelationRecord, JSON> RELATED_MEANINGS = createField(DSL.name("related_meanings"), SQLDataType.JSON, this, "");

    private ViewWwMeaningRelation(Name alias, Table<ViewWwMeaningRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwMeaningRelation(Name alias, Table<ViewWwMeaningRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_meaning_relation\" as  SELECT m1_id AS meaning_id,\n    json_agg(json_build_object('meaningId', m2_id, 'weight', weight, 'nearSynDefinitionValue', near_syn_definition_value, 'lexValueStateCode', value_state_code, 'lexRegisterCodes', lex_register_codes, 'lexGovernmentValues', lex_government_values, 'meaningRelTypeCode', meaning_rel_type_code, 'wordId', word_id, 'value', word_value, 'valuePrese', word_value_prese, 'homonymNr', homonym_nr, 'lang', word_lang, 'aspectCode', aspect_code, 'wordTypeCodes', word_type_codes, 'wwUnif', is_ww_unif, 'wwLite', is_ww_lite, 'wwOs', is_ww_os) ORDER BY order_by, lex_order_by) AS related_meanings\n   FROM ( SELECT mr_1.meaning1_id AS m1_id,\n            mr_1.meaning2_id AS m2_id,\n            mr_1.weight,\n            mr_1.meaning_rel_type_code,\n            mr_1.order_by,\n            l2.value_state_code,\n            l2.order_by AS lex_order_by,\n            w2.id AS word_id,\n            w2.value AS word_value,\n            w2.value_prese AS word_value_prese,\n            w2.homonym_nr,\n            w2.lang AS word_lang,\n            w2.aspect_code,\n            ( SELECT (array_agg(d.value))[1] AS array_agg\n                   FROM definition d\n                  WHERE ((d.meaning_id = m2.id) AND ((d.definition_type_code)::text = 'kitsam/laiem t√§hendus teises keeles'::text))\n                  GROUP BY m2.id) AS near_syn_definition_value,\n            ( SELECT array_agg(wt.word_type_code) AS array_agg\n                   FROM word_word_type wt\n                  WHERE ((wt.word_id = w2.id) AND ((wt.word_type_code)::text <> ALL ((ARRAY['vv'::character varying, 'yv'::character varying, 'vvar'::character varying])::text[])))\n                  GROUP BY w2.id) AS word_type_codes,\n            ( SELECT array_agg(lr.register_code) AS array_agg\n                   FROM lexeme_register lr\n                  WHERE (lr.lexeme_id = l2.id)) AS lex_register_codes,\n            ( SELECT array_agg(g.value) AS array_agg\n                   FROM government g\n                  WHERE (g.lexeme_id = l2.id)) AS lex_government_values,\n            ((EXISTS ( SELECT p.id\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_unif'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id)))) OR ((l2.dataset_code)::text <> 'eki'::text)) AS is_ww_unif,\n            (EXISTS ( SELECT p.id\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_lite'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id)))) AS is_ww_lite,\n            (EXISTS ( SELECT p.id\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id)))) AS is_ww_os\n           FROM meaning_relation mr_1,\n            meaning m2,\n            lexeme l2,\n            word w2,\n            dataset ds2\n          WHERE ((mr_1.meaning2_id = m2.id) AND (l2.meaning_id = m2.id) AND (l2.word_id = w2.id) AND ((l2.dataset_code)::text = (ds2.code)::text) AND ((mr_1.meaning_rel_type_code)::text <> 'duplikaadikandidaat'::text) AND (w2.is_public = true) AND (l2.is_public = true) AND (l2.is_word = true) AND (ds2.is_public = true) AND ((l2.dataset_code)::text <> 'ety'::text) AND (EXISTS ( SELECT 1\n                   FROM lexeme l1,\n                    dataset ds1\n                  WHERE ((l1.meaning_id = mr_1.meaning1_id) AND ((l1.dataset_code)::text = (ds1.code)::text) AND (l1.is_public = true) AND (ds1.is_public = true) AND ((l1.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n                           FROM publishing p\n                          WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l1.id)))) OR ((l1.dataset_code)::text <> 'eki'::text))))) AND ((EXISTS ( SELECT 1\n                   FROM publishing p\n                  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id)))) OR ((l2.dataset_code)::text <> 'eki'::text)))) mr\n  GROUP BY m1_id\n  ORDER BY m1_id;"));
    }

    /**
     * Create an aliased <code>public.view_ww_meaning_relation</code> table reference
     */
    public ViewWwMeaningRelation(String alias) {
        this(DSL.name(alias), VIEW_WW_MEANING_RELATION);
    }

    /**
     * Create an aliased <code>public.view_ww_meaning_relation</code> table reference
     */
    public ViewWwMeaningRelation(Name alias) {
        this(alias, VIEW_WW_MEANING_RELATION);
    }

    /**
     * Create a <code>public.view_ww_meaning_relation</code> table reference
     */
    public ViewWwMeaningRelation() {
        this(DSL.name("view_ww_meaning_relation"), null);
    }

    public <O extends Record> ViewWwMeaningRelation(Table<O> child, ForeignKey<O, ViewWwMeaningRelationRecord> key) {
        super(child, key, VIEW_WW_MEANING_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwMeaningRelation as(String alias) {
        return new ViewWwMeaningRelation(DSL.name(alias), this);
    }

    @Override
    public ViewWwMeaningRelation as(Name alias) {
        return new ViewWwMeaningRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwMeaningRelation rename(String name) {
        return new ViewWwMeaningRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwMeaningRelation rename(Name name) {
        return new ViewWwMeaningRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
