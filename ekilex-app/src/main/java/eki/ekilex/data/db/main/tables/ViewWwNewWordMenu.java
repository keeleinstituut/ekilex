/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewWwNewWordMenuRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwNewWordMenu extends TableImpl<ViewWwNewWordMenuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_ww_new_word_menu</code>
     */
    public static final ViewWwNewWordMenu VIEW_WW_NEW_WORD_MENU = new ViewWwNewWordMenu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwNewWordMenuRecord> getRecordType() {
        return ViewWwNewWordMenuRecord.class;
    }

    /**
     * The column <code>public.view_ww_new_word_menu.word_id</code>.
     */
    public final TableField<ViewWwNewWordMenuRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_new_word_menu.word</code>.
     */
    public final TableField<ViewWwNewWordMenuRecord, String> WORD = createField(DSL.name("word"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_new_word_menu.word_prese</code>.
     */
    public final TableField<ViewWwNewWordMenuRecord, String> WORD_PRESE = createField(DSL.name("word_prese"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_new_word_menu.homonym_nr</code>.
     */
    public final TableField<ViewWwNewWordMenuRecord, Integer> HOMONYM_NR = createField(DSL.name("homonym_nr"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.view_ww_new_word_menu.reg_year</code>.
     */
    public final TableField<ViewWwNewWordMenuRecord, Integer> REG_YEAR = createField(DSL.name("reg_year"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.view_ww_new_word_menu.word_type_codes</code>.
     */
    public final TableField<ViewWwNewWordMenuRecord, String[]> WORD_TYPE_CODES = createField(DSL.name("word_type_codes"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

    private ViewWwNewWordMenu(Name alias, Table<ViewWwNewWordMenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwNewWordMenu(Name alias, Table<ViewWwNewWordMenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_new_word_menu\" as  SELECT id AS word_id,\n    value AS word,\n    value_prese AS word_prese,\n    homonym_nr,\n    reg_year,\n    ( SELECT array_agg(wt.word_type_code ORDER BY wt.order_by) AS array_agg\n           FROM word_word_type wt\n          WHERE ((wt.word_id = w.id) AND ((wt.word_type_code)::text <> ALL ((ARRAY['vv'::character varying, 'yv'::character varying, 'vvar'::character varying])::text[])))) AS word_type_codes\n   FROM word w\n  WHERE ((reg_year IS NOT NULL) AND (is_public = true) AND (lang = 'est'::bpchar) AND (EXISTS ( SELECT 1\n           FROM lexeme l,\n            lexeme_register lr\n          WHERE ((l.word_id = w.id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text) AND (lr.lexeme_id = l.id) AND ((lr.register_code)::text = 'uus'::text)))))\n  ORDER BY reg_year DESC, id DESC;"));
    }

    /**
     * Create an aliased <code>public.view_ww_new_word_menu</code> table reference
     */
    public ViewWwNewWordMenu(String alias) {
        this(DSL.name(alias), VIEW_WW_NEW_WORD_MENU);
    }

    /**
     * Create an aliased <code>public.view_ww_new_word_menu</code> table reference
     */
    public ViewWwNewWordMenu(Name alias) {
        this(alias, VIEW_WW_NEW_WORD_MENU);
    }

    /**
     * Create a <code>public.view_ww_new_word_menu</code> table reference
     */
    public ViewWwNewWordMenu() {
        this(DSL.name("view_ww_new_word_menu"), null);
    }

    public <O extends Record> ViewWwNewWordMenu(Table<O> child, ForeignKey<O, ViewWwNewWordMenuRecord> key) {
        super(child, key, VIEW_WW_NEW_WORD_MENU);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwNewWordMenu as(String alias) {
        return new ViewWwNewWordMenu(DSL.name(alias), this);
    }

    @Override
    public ViewWwNewWordMenu as(Name alias) {
        return new ViewWwNewWordMenu(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwNewWordMenu rename(String name) {
        return new ViewWwNewWordMenu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwNewWordMenu rename(Name name) {
        return new ViewWwNewWordMenu(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, Integer, Integer, String[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
