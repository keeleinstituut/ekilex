/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.LexRelationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexRelation extends TableImpl<LexRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lex_relation</code>
     */
    public static final LexRelation LEX_RELATION = new LexRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexRelationRecord> getRecordType() {
        return LexRelationRecord.class;
    }

    /**
     * The column <code>public.lex_relation.id</code>.
     */
    public final TableField<LexRelationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lex_relation.lexeme1_id</code>.
     */
    public final TableField<LexRelationRecord, Long> LEXEME1_ID = createField(DSL.name("lexeme1_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lex_relation.lexeme2_id</code>.
     */
    public final TableField<LexRelationRecord, Long> LEXEME2_ID = createField(DSL.name("lexeme2_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lex_relation.lex_rel_type_code</code>.
     */
    public final TableField<LexRelationRecord, String> LEX_REL_TYPE_CODE = createField(DSL.name("lex_rel_type_code"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.lex_relation.order_by</code>.
     */
    public final TableField<LexRelationRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private LexRelation(Name alias, Table<LexRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexRelation(Name alias, Table<LexRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lex_relation</code> table reference
     */
    public LexRelation(String alias) {
        this(DSL.name(alias), LEX_RELATION);
    }

    /**
     * Create an aliased <code>public.lex_relation</code> table reference
     */
    public LexRelation(Name alias) {
        this(alias, LEX_RELATION);
    }

    /**
     * Create a <code>public.lex_relation</code> table reference
     */
    public LexRelation() {
        this(DSL.name("lex_relation"), null);
    }

    public <O extends Record> LexRelation(Table<O> child, ForeignKey<O, LexRelationRecord> key) {
        super(child, key, LEX_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LexRelationRecord, Long> getIdentity() {
        return (Identity<LexRelationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LexRelationRecord> getPrimaryKey() {
        return Keys.LEX_RELATION_PKEY;
    }

    @Override
    public List<UniqueKey<LexRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<LexRelationRecord>>asList(Keys.LEX_RELATION_PKEY, Keys.LEX_RELATION_LEXEME1_ID_LEXEME2_ID_LEX_REL_TYPE_CODE_KEY);
    }

    @Override
    public List<ForeignKey<LexRelationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexRelationRecord, ?>>asList(Keys.LEX_RELATION__LEX_RELATION_LEXEME1_ID_FKEY, Keys.LEX_RELATION__LEX_RELATION_LEXEME2_ID_FKEY, Keys.LEX_RELATION__LEX_RELATION_LEX_REL_TYPE_CODE_FKEY);
    }

    private transient Lexeme _lexRelationLexeme1IdFkey;
    private transient Lexeme _lexRelationLexeme2IdFkey;
    private transient LexRelType _lexRelType;

    public Lexeme lexRelationLexeme1IdFkey() {
        if (_lexRelationLexeme1IdFkey == null)
            _lexRelationLexeme1IdFkey = new Lexeme(this, Keys.LEX_RELATION__LEX_RELATION_LEXEME1_ID_FKEY);

        return _lexRelationLexeme1IdFkey;
    }

    public Lexeme lexRelationLexeme2IdFkey() {
        if (_lexRelationLexeme2IdFkey == null)
            _lexRelationLexeme2IdFkey = new Lexeme(this, Keys.LEX_RELATION__LEX_RELATION_LEXEME2_ID_FKEY);

        return _lexRelationLexeme2IdFkey;
    }

    public LexRelType lexRelType() {
        if (_lexRelType == null)
            _lexRelType = new LexRelType(this, Keys.LEX_RELATION__LEX_RELATION_LEX_REL_TYPE_CODE_FKEY);

        return _lexRelType;
    }

    @Override
    public LexRelation as(String alias) {
        return new LexRelation(DSL.name(alias), this);
    }

    @Override
    public LexRelation as(Name alias) {
        return new LexRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexRelation rename(String name) {
        return new LexRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LexRelation rename(Name name) {
        return new LexRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
