/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.MeaningTagRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeaningTag extends TableImpl<MeaningTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.meaning_tag</code>
     */
    public static final MeaningTag MEANING_TAG = new MeaningTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeaningTagRecord> getRecordType() {
        return MeaningTagRecord.class;
    }

    /**
     * The column <code>public.meaning_tag.id</code>.
     */
    public final TableField<MeaningTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.meaning_tag.meaning_id</code>.
     */
    public final TableField<MeaningTagRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.meaning_tag.tag_name</code>.
     */
    public final TableField<MeaningTagRecord, String> TAG_NAME = createField(DSL.name("tag_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.meaning_tag.created_on</code>.
     */
    public final TableField<MeaningTagRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.TIMESTAMP)), this, "");

    private MeaningTag(Name alias, Table<MeaningTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private MeaningTag(Name alias, Table<MeaningTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.meaning_tag</code> table reference
     */
    public MeaningTag(String alias) {
        this(DSL.name(alias), MEANING_TAG);
    }

    /**
     * Create an aliased <code>public.meaning_tag</code> table reference
     */
    public MeaningTag(Name alias) {
        this(alias, MEANING_TAG);
    }

    /**
     * Create a <code>public.meaning_tag</code> table reference
     */
    public MeaningTag() {
        this(DSL.name("meaning_tag"), null);
    }

    public <O extends Record> MeaningTag(Table<O> child, ForeignKey<O, MeaningTagRecord> key) {
        super(child, key, MEANING_TAG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MeaningTagRecord, Long> getIdentity() {
        return (Identity<MeaningTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeaningTagRecord> getPrimaryKey() {
        return Keys.MEANING_TAG_PKEY;
    }

    @Override
    public List<UniqueKey<MeaningTagRecord>> getKeys() {
        return Arrays.<UniqueKey<MeaningTagRecord>>asList(Keys.MEANING_TAG_PKEY, Keys.MEANING_TAG_MEANING_ID_TAG_NAME_KEY);
    }

    @Override
    public List<ForeignKey<MeaningTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MeaningTagRecord, ?>>asList(Keys.MEANING_TAG__MEANING_TAG_MEANING_ID_FKEY, Keys.MEANING_TAG__MEANING_TAG_TAG_NAME_FKEY);
    }

    private transient Meaning _meaning;
    private transient Tag _tag;

    public Meaning meaning() {
        if (_meaning == null)
            _meaning = new Meaning(this, Keys.MEANING_TAG__MEANING_TAG_MEANING_ID_FKEY);

        return _meaning;
    }

    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.MEANING_TAG__MEANING_TAG_TAG_NAME_FKEY);

        return _tag;
    }

    @Override
    public MeaningTag as(String alias) {
        return new MeaningTag(DSL.name(alias), this);
    }

    @Override
    public MeaningTag as(Name alias) {
        return new MeaningTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MeaningTag rename(String name) {
        return new MeaningTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MeaningTag rename(Name name) {
        return new MeaningTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
