/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.WordTagRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordTag extends TableImpl<WordTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.word_tag</code>
     */
    public static final WordTag WORD_TAG = new WordTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordTagRecord> getRecordType() {
        return WordTagRecord.class;
    }

    /**
     * The column <code>public.word_tag.id</code>.
     */
    public final TableField<WordTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.word_tag.word_id</code>.
     */
    public final TableField<WordTagRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_tag.tag_name</code>.
     */
    public final TableField<WordTagRecord, String> TAG_NAME = createField(DSL.name("tag_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.word_tag.created_on</code>.
     */
    public final TableField<WordTagRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.TIMESTAMP)), this, "");

    private WordTag(Name alias, Table<WordTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordTag(Name alias, Table<WordTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.word_tag</code> table reference
     */
    public WordTag(String alias) {
        this(DSL.name(alias), WORD_TAG);
    }

    /**
     * Create an aliased <code>public.word_tag</code> table reference
     */
    public WordTag(Name alias) {
        this(alias, WORD_TAG);
    }

    /**
     * Create a <code>public.word_tag</code> table reference
     */
    public WordTag() {
        this(DSL.name("word_tag"), null);
    }

    public <O extends Record> WordTag(Table<O> child, ForeignKey<O, WordTagRecord> key) {
        super(child, key, WORD_TAG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<WordTagRecord, Long> getIdentity() {
        return (Identity<WordTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WordTagRecord> getPrimaryKey() {
        return Keys.WORD_TAG_PKEY;
    }

    @Override
    public List<UniqueKey<WordTagRecord>> getKeys() {
        return Arrays.<UniqueKey<WordTagRecord>>asList(Keys.WORD_TAG_PKEY, Keys.WORD_TAG_WORD_ID_TAG_NAME_KEY);
    }

    @Override
    public List<ForeignKey<WordTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordTagRecord, ?>>asList(Keys.WORD_TAG__WORD_TAG_WORD_ID_FKEY, Keys.WORD_TAG__WORD_TAG_TAG_NAME_FKEY);
    }

    private transient Word _word;
    private transient Tag _tag;

    public Word word() {
        if (_word == null)
            _word = new Word(this, Keys.WORD_TAG__WORD_TAG_WORD_ID_FKEY);

        return _word;
    }

    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.WORD_TAG__WORD_TAG_TAG_NAME_FKEY);

        return _tag;
    }

    @Override
    public WordTag as(String alias) {
        return new WordTag(DSL.name(alias), this);
    }

    @Override
    public WordTag as(Name alias) {
        return new WordTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordTag rename(String name) {
        return new WordTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordTag rename(Name name) {
        return new WordTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
