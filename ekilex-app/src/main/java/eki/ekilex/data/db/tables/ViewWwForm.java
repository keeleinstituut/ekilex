/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ViewWwFormRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwForm extends TableImpl<ViewWwFormRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_ww_form</code>
     */
    public static final ViewWwForm VIEW_WW_FORM = new ViewWwForm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwFormRecord> getRecordType() {
        return ViewWwFormRecord.class;
    }

    /**
     * The column <code>public.view_ww_form.word_id</code>.
     */
    public final TableField<ViewWwFormRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_form.word_class</code>.
     */
    public final TableField<ViewWwFormRecord, String> WORD_CLASS = createField(DSL.name("word_class"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.view_ww_form.word</code>.
     */
    public final TableField<ViewWwFormRecord, String> WORD = createField(DSL.name("word"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_form.lang</code>.
     */
    public final TableField<ViewWwFormRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3), this, "");

    /**
     * The column <code>public.view_ww_form.paradigm_id</code>.
     */
    public final TableField<ViewWwFormRecord, Long> PARADIGM_ID = createField(DSL.name("paradigm_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_form.paradigm_comment</code>.
     */
    public final TableField<ViewWwFormRecord, String> PARADIGM_COMMENT = createField(DSL.name("paradigm_comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_form.inflection_type</code>.
     */
    public final TableField<ViewWwFormRecord, String> INFLECTION_TYPE = createField(DSL.name("inflection_type"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.view_ww_form.inflection_type_nr</code>.
     */
    public final TableField<ViewWwFormRecord, String> INFLECTION_TYPE_NR = createField(DSL.name("inflection_type_nr"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.view_ww_form.form_id</code>.
     */
    public final TableField<ViewWwFormRecord, Long> FORM_ID = createField(DSL.name("form_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_form.value</code>.
     */
    public final TableField<ViewWwFormRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_form.value_prese</code>.
     */
    public final TableField<ViewWwFormRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_form.morph_code</code>.
     */
    public final TableField<ViewWwFormRecord, String> MORPH_CODE = createField(DSL.name("morph_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.view_ww_form.morph_group1</code>.
     */
    public final TableField<ViewWwFormRecord, String> MORPH_GROUP1 = createField(DSL.name("morph_group1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_form.morph_group2</code>.
     */
    public final TableField<ViewWwFormRecord, String> MORPH_GROUP2 = createField(DSL.name("morph_group2"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_form.morph_group3</code>.
     */
    public final TableField<ViewWwFormRecord, String> MORPH_GROUP3 = createField(DSL.name("morph_group3"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_form.display_level</code>.
     */
    public final TableField<ViewWwFormRecord, Integer> DISPLAY_LEVEL = createField(DSL.name("display_level"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.view_ww_form.display_form</code>.
     */
    public final TableField<ViewWwFormRecord, String> DISPLAY_FORM = createField(DSL.name("display_form"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.view_ww_form.audio_file</code>.
     */
    public final TableField<ViewWwFormRecord, String> AUDIO_FILE = createField(DSL.name("audio_file"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.view_ww_form.morph_exists</code>.
     */
    public final TableField<ViewWwFormRecord, Boolean> MORPH_EXISTS = createField(DSL.name("morph_exists"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.view_ww_form.is_questionable</code>.
     */
    public final TableField<ViewWwFormRecord, Boolean> IS_QUESTIONABLE = createField(DSL.name("is_questionable"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.view_ww_form.order_by</code>.
     */
    public final TableField<ViewWwFormRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_form.form_freq_value</code>.
     */
    public final TableField<ViewWwFormRecord, BigDecimal> FORM_FREQ_VALUE = createField(DSL.name("form_freq_value"), SQLDataType.NUMERIC(12, 7), this, "");

    /**
     * The column <code>public.view_ww_form.form_freq_rank</code>.
     */
    public final TableField<ViewWwFormRecord, Long> FORM_FREQ_RANK = createField(DSL.name("form_freq_rank"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_form.form_freq_rank_max</code>.
     */
    public final TableField<ViewWwFormRecord, Long> FORM_FREQ_RANK_MAX = createField(DSL.name("form_freq_rank_max"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_form.morph_freq_value</code>.
     */
    public final TableField<ViewWwFormRecord, BigDecimal> MORPH_FREQ_VALUE = createField(DSL.name("morph_freq_value"), SQLDataType.NUMERIC(12, 7), this, "");

    /**
     * The column <code>public.view_ww_form.morph_freq_rank</code>.
     */
    public final TableField<ViewWwFormRecord, Long> MORPH_FREQ_RANK = createField(DSL.name("morph_freq_rank"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_form.morph_freq_rank_max</code>.
     */
    public final TableField<ViewWwFormRecord, Long> MORPH_FREQ_RANK_MAX = createField(DSL.name("morph_freq_rank_max"), SQLDataType.BIGINT, this, "");

    private ViewWwForm(Name alias, Table<ViewWwFormRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwForm(Name alias, Table<ViewWwFormRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_form\" as  SELECT w.id AS word_id,\n    p.word_class,\n    w.value AS word,\n    w.lang,\n    p.id AS paradigm_id,\n    p.comment AS paradigm_comment,\n    p.inflection_type,\n    p.inflection_type_nr,\n    f.id AS form_id,\n    f.value,\n    f.value_prese,\n    f.morph_code,\n    pf.morph_group1,\n    pf.morph_group2,\n    pf.morph_group3,\n    pf.display_level,\n    pf.display_form,\n    pf.audio_file,\n    pf.morph_exists,\n    pf.is_questionable,\n    pf.order_by,\n    ff.form_freq_value,\n    ff.form_freq_rank,\n    ff.form_freq_rank_max,\n    mf.morph_freq_value,\n    mf.morph_freq_rank,\n    mf.morph_freq_rank_max\n   FROM (((((word w\n     JOIN paradigm p ON ((p.word_id = w.id)))\n     JOIN paradigm_form pf ON ((pf.paradigm_id = p.id)))\n     JOIN form f ON ((f.id = pf.form_id)))\n     LEFT JOIN ( SELECT ff_1.form_id,\n            ff_1.value AS form_freq_value,\n            ff_1.rank AS form_freq_rank,\n            fc.corp_date,\n            ( SELECT max(fff.rank) AS max\n                   FROM form_freq fff\n                  WHERE (fff.freq_corp_id = fc.id)) AS form_freq_rank_max\n           FROM form_freq ff_1,\n            freq_corp fc\n          WHERE ((ff_1.freq_corp_id = fc.id) AND (fc.is_public = true))) ff ON (((ff.form_id = f.id) AND (ff.corp_date = ( SELECT max(fcc.corp_date) AS max\n           FROM form_freq fff,\n            freq_corp fcc\n          WHERE ((fff.freq_corp_id = fcc.id) AND (fcc.is_public = true) AND (fff.form_id = f.id)))))))\n     LEFT JOIN ( SELECT mf_1.morph_code,\n            mf_1.value AS morph_freq_value,\n            mf_1.rank AS morph_freq_rank,\n            fc.corp_date,\n            ( SELECT max(mff.rank) AS max\n                   FROM morph_freq mff\n                  WHERE (mff.freq_corp_id = fc.id)) AS morph_freq_rank_max\n           FROM morph_freq mf_1,\n            freq_corp fc\n          WHERE ((mf_1.freq_corp_id = fc.id) AND (fc.is_public = true))) mf ON ((((mf.morph_code)::text = (f.morph_code)::text) AND (mf.corp_date = ( SELECT max(fcc.corp_date) AS max\n           FROM morph_freq mff,\n            freq_corp fcc\n          WHERE ((mff.freq_corp_id = fcc.id) AND (fcc.is_public = true) AND ((mff.morph_code)::text = (f.morph_code)::text)))))))\n  WHERE ((w.is_public = true) AND (w.is_word = true) AND (EXISTS ( SELECT l.id\n           FROM lexeme l,\n            dataset ds\n          WHERE ((l.word_id = w.id) AND (l.is_public = true) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))))\n  ORDER BY w.id, p.id, f.id;"));
    }

    /**
     * Create an aliased <code>public.view_ww_form</code> table reference
     */
    public ViewWwForm(String alias) {
        this(DSL.name(alias), VIEW_WW_FORM);
    }

    /**
     * Create an aliased <code>public.view_ww_form</code> table reference
     */
    public ViewWwForm(Name alias) {
        this(alias, VIEW_WW_FORM);
    }

    /**
     * Create a <code>public.view_ww_form</code> table reference
     */
    public ViewWwForm() {
        this(DSL.name("view_ww_form"), null);
    }

    public <O extends Record> ViewWwForm(Table<O> child, ForeignKey<O, ViewWwFormRecord> key) {
        super(child, key, VIEW_WW_FORM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwForm as(String alias) {
        return new ViewWwForm(DSL.name(alias), this);
    }

    @Override
    public ViewWwForm as(Name alias) {
        return new ViewWwForm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwForm rename(String name) {
        return new ViewWwForm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwForm rename(Name name) {
        return new ViewWwForm(name, null);
    }
}
