/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables.records;


import eki.ekilex.data.db.tables.MeaningRelMapping;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeaningRelMappingRecord extends TableRecordImpl<MeaningRelMappingRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.meaning_rel_mapping.code1</code>.
     */
    public void setCode1(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.meaning_rel_mapping.code1</code>.
     */
    public String getCode1() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.meaning_rel_mapping.code2</code>.
     */
    public void setCode2(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.meaning_rel_mapping.code2</code>.
     */
    public String getCode2() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return MeaningRelMapping.MEANING_REL_MAPPING.CODE1;
    }

    @Override
    public Field<String> field2() {
        return MeaningRelMapping.MEANING_REL_MAPPING.CODE2;
    }

    @Override
    public String component1() {
        return getCode1();
    }

    @Override
    public String component2() {
        return getCode2();
    }

    @Override
    public String value1() {
        return getCode1();
    }

    @Override
    public String value2() {
        return getCode2();
    }

    @Override
    public MeaningRelMappingRecord value1(String value) {
        setCode1(value);
        return this;
    }

    @Override
    public MeaningRelMappingRecord value2(String value) {
        setCode2(value);
        return this;
    }

    @Override
    public MeaningRelMappingRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeaningRelMappingRecord
     */
    public MeaningRelMappingRecord() {
        super(MeaningRelMapping.MEANING_REL_MAPPING);
    }

    /**
     * Create a detached, initialised MeaningRelMappingRecord
     */
    public MeaningRelMappingRecord(String code1, String code2) {
        super(MeaningRelMapping.MEANING_REL_MAPPING);

        setCode1(code1);
        setCode2(code2);
    }
}
