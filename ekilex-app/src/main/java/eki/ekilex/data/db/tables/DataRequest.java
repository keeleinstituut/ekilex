/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.DataRequestRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataRequest extends TableImpl<DataRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_request</code>
     */
    public static final DataRequest DATA_REQUEST = new DataRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataRequestRecord> getRecordType() {
        return DataRequestRecord.class;
    }

    /**
     * The column <code>public.data_request.id</code>.
     */
    public final TableField<DataRequestRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.data_request.user_id</code>.
     */
    public final TableField<DataRequestRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.data_request.request_key</code>.
     */
    public final TableField<DataRequestRecord, String> REQUEST_KEY = createField(DSL.name("request_key"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.data_request.content</code>.
     */
    public final TableField<DataRequestRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.data_request.accessed</code>.
     */
    public final TableField<DataRequestRecord, Timestamp> ACCESSED = createField(DSL.name("accessed"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.data_request.created</code>.
     */
    public final TableField<DataRequestRecord, Timestamp> CREATED = createField(DSL.name("created"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.TIMESTAMP)), this, "");

    private DataRequest(Name alias, Table<DataRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataRequest(Name alias, Table<DataRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.data_request</code> table reference
     */
    public DataRequest(String alias) {
        this(DSL.name(alias), DATA_REQUEST);
    }

    /**
     * Create an aliased <code>public.data_request</code> table reference
     */
    public DataRequest(Name alias) {
        this(alias, DATA_REQUEST);
    }

    /**
     * Create a <code>public.data_request</code> table reference
     */
    public DataRequest() {
        this(DSL.name("data_request"), null);
    }

    public <O extends Record> DataRequest(Table<O> child, ForeignKey<O, DataRequestRecord> key) {
        super(child, key, DATA_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DataRequestRecord, Long> getIdentity() {
        return (Identity<DataRequestRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DataRequestRecord> getPrimaryKey() {
        return Keys.DATA_REQUEST_PKEY;
    }

    @Override
    public List<UniqueKey<DataRequestRecord>> getKeys() {
        return Arrays.<UniqueKey<DataRequestRecord>>asList(Keys.DATA_REQUEST_PKEY);
    }

    @Override
    public List<ForeignKey<DataRequestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DataRequestRecord, ?>>asList(Keys.DATA_REQUEST__DATA_REQUEST_USER_ID_FKEY);
    }

    private transient EkiUser _ekiUser;

    public EkiUser ekiUser() {
        if (_ekiUser == null)
            _ekiUser = new EkiUser(this, Keys.DATA_REQUEST__DATA_REQUEST_USER_ID_FKEY);

        return _ekiUser;
    }

    @Override
    public DataRequest as(String alias) {
        return new DataRequest(DSL.name(alias), this);
    }

    @Override
    public DataRequest as(Name alias) {
        return new DataRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataRequest rename(String name) {
        return new DataRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataRequest rename(Name name) {
        return new DataRequest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
