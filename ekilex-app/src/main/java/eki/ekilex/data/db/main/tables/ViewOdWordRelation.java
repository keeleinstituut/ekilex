/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewOdWordRelationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewOdWordRelation extends TableImpl<ViewOdWordRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_od_word_relation</code>
     */
    public static final ViewOdWordRelation VIEW_OD_WORD_RELATION = new ViewOdWordRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewOdWordRelationRecord> getRecordType() {
        return ViewOdWordRelationRecord.class;
    }

    /**
     * The column <code>public.view_od_word_relation.word_id</code>.
     */
    public final TableField<ViewOdWordRelationRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_od_word_relation.word_relation_groups</code>.
     */
    public final TableField<ViewOdWordRelationRecord, JSON> WORD_RELATION_GROUPS = createField(DSL.name("word_relation_groups"), SQLDataType.JSON, this, "");

    private ViewOdWordRelation(Name alias, Table<ViewOdWordRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewOdWordRelation(Name alias, Table<ViewOdWordRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_od_word_relation\" as  SELECT w.id AS word_id,\n    json_agg(json_build_object('wordRelTypeCode', wrt.code, 'relatedWords', ( SELECT json_agg(json_build_object('wordRelationId', wr.id, 'relatedWordId', w2.id, 'wordRelTypeCode', wr.word_rel_type_code, 'value', w2.value, 'valuePrese', w2.value_prese, 'homonymNr', w2.homonym_nr, 'displayMorphCode', w2.display_morph_code, 'wordTypeCodes', ( SELECT array_agg(wwt.word_type_code) AS array_agg\n                   FROM word_word_type wwt\n                  WHERE (wwt.word_id = w2.id))) ORDER BY wr.order_by) AS json_agg\n           FROM word_relation wr,\n            word w2\n          WHERE ((wr.word1_id = w.id) AND (wr.word2_id = w2.id) AND ((wr.word_rel_type_code)::text = (wrt.code)::text) AND (w2.is_public = true) AND (w2.lang = 'est'::bpchar) AND (EXISTS ( SELECT 1\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_od'::text) AND ((p.entity_name)::text = 'word_relation'::text) AND (p.entity_id = wr.id)))) AND (EXISTS ( SELECT 1\n                   FROM lexeme l\n                  WHERE ((l.word_id = w2.id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text))))))) ORDER BY wrt.order_by) AS word_relation_groups\n   FROM word_rel_type wrt,\n    word w\n  WHERE ((w.is_public = true) AND (w.lang = 'est'::bpchar) AND ((wrt.code)::text = ANY ((ARRAY['ls-j√§relosaga'::character varying, 'ls-esiosaga'::character varying, 'deriv'::character varying, 'komp'::character varying, 'superl'::character varying, 'posit'::character varying])::text[])) AND (EXISTS ( SELECT 1\n           FROM word_relation wr,\n            word w2\n          WHERE ((wr.word1_id = w.id) AND (wr.word2_id = w2.id) AND ((wr.word_rel_type_code)::text = (wrt.code)::text) AND (w2.is_public = true) AND (w2.lang = 'est'::bpchar) AND (EXISTS ( SELECT 1\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_od'::text) AND ((p.entity_name)::text = 'word_relation'::text) AND (p.entity_id = wr.id)))) AND (EXISTS ( SELECT 1\n                   FROM lexeme l\n                  WHERE ((l.word_id = w2.id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text))))))) AND (EXISTS ( SELECT 1\n           FROM lexeme l\n          WHERE ((l.word_id = w.id) AND (l.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text = 'eki'::text) AND (EXISTS ( SELECT 1\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_od'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id))))))))\n  GROUP BY w.id\n  ORDER BY w.id;"));
    }

    /**
     * Create an aliased <code>public.view_od_word_relation</code> table reference
     */
    public ViewOdWordRelation(String alias) {
        this(DSL.name(alias), VIEW_OD_WORD_RELATION);
    }

    /**
     * Create an aliased <code>public.view_od_word_relation</code> table reference
     */
    public ViewOdWordRelation(Name alias) {
        this(alias, VIEW_OD_WORD_RELATION);
    }

    /**
     * Create a <code>public.view_od_word_relation</code> table reference
     */
    public ViewOdWordRelation() {
        this(DSL.name("view_od_word_relation"), null);
    }

    public <O extends Record> ViewOdWordRelation(Table<O> child, ForeignKey<O, ViewOdWordRelationRecord> key) {
        super(child, key, VIEW_OD_WORD_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewOdWordRelation as(String alias) {
        return new ViewOdWordRelation(DSL.name(alias), this);
    }

    @Override
    public ViewOdWordRelation as(Name alias) {
        return new ViewOdWordRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOdWordRelation rename(String name) {
        return new ViewOdWordRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewOdWordRelation rename(Name name) {
        return new ViewOdWordRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
