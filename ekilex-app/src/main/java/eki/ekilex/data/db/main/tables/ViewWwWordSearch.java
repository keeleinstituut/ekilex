/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewWwWordSearchRecord;
import eki.ekilex.data.db.main.udt.records.TypeLangDatasetPublishingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwWordSearch extends TableImpl<ViewWwWordSearchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_ww_word_search</code>
     */
    public static final ViewWwWordSearch VIEW_WW_WORD_SEARCH = new ViewWwWordSearch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwWordSearchRecord> getRecordType() {
        return ViewWwWordSearchRecord.class;
    }

    /**
     * The column <code>public.view_ww_word_search.sgroup</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String> SGROUP = createField(DSL.name("sgroup"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_word_search.word_value</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String> WORD_VALUE = createField(DSL.name("word_value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_word_search.crit</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String> CRIT = createField(DSL.name("crit"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_word_search.filt_langs</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String[]> FILT_LANGS = createField(DSL.name("filt_langs"), SQLDataType.CHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.view_ww_word_search.lang_order_by</code>.
     */
    public final TableField<ViewWwWordSearchRecord, Long> LANG_ORDER_BY = createField(DSL.name("lang_order_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_word_search.lang_ds_pubs</code>.
     */
    public final TableField<ViewWwWordSearchRecord, TypeLangDatasetPublishingRecord[]> LANG_DS_PUBS = createField(DSL.name("lang_ds_pubs"), eki.ekilex.data.db.main.udt.TypeLangDatasetPublishing.TYPE_LANG_DATASET_PUBLISHING.getDataType().getArrayDataType(), this, "");

    private ViewWwWordSearch(Name alias, Table<ViewWwWordSearchRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwWordSearch(Name alias, Table<ViewWwWordSearchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_word_search\" as  SELECT ws.sgroup,\n    ws.word_value,\n    ws.crit,\n    ws.filt_langs,\n    ws.lang_order_by,\n    wldp.lang_ds_pubs\n   FROM ( SELECT 'word'::text AS sgroup,\n            w.value AS word_value,\n            lower(w.value) AS crit,\n            array_agg(\n                CASE\n                    WHEN (w.lang = ANY (ARRAY['est'::bpchar, 'eng'::bpchar, 'deu'::bpchar, 'fra'::bpchar, 'rus'::bpchar, 'ukr'::bpchar, 'mul'::bpchar])) THEN w.lang\n                    ELSE 'other'::bpchar\n                END) AS filt_langs,\n            (array_agg(wl.order_by ORDER BY wl.order_by))[1] AS lang_order_by\n           FROM word w,\n            language wl\n          WHERE ((w.lang = wl.code) AND (w.is_public = true) AND (NOT (EXISTS ( SELECT wwt.id\n                   FROM word_word_type wwt\n                  WHERE ((wwt.word_id = w.id) AND ((wwt.word_type_code)::text = 'viga'::text))))) AND (EXISTS ( SELECT w.id\n                   FROM lexeme l,\n                    dataset ds\n                  WHERE ((l.word_id = w.id) AND (l.is_public = true) AND (l.is_word = true) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))))\n          GROUP BY w.value\n        UNION ALL\n         SELECT 'as_word'::text AS sgroup,\n            w.value AS word_value,\n            lower(w.value_as_word) AS crit,\n            array_agg(\n                CASE\n                    WHEN (w.lang = ANY (ARRAY['est'::bpchar, 'eng'::bpchar, 'deu'::bpchar, 'fra'::bpchar, 'rus'::bpchar, 'ukr'::bpchar, 'mul'::bpchar])) THEN w.lang\n                    ELSE 'other'::bpchar\n                END) AS langs_filt,\n            (array_agg(wl.order_by ORDER BY wl.order_by))[1] AS lang_order_by\n           FROM word w,\n            language wl\n          WHERE ((w.lang = wl.code) AND (w.value_as_word IS NOT NULL) AND (w.is_public = true) AND (NOT (EXISTS ( SELECT wwt.id\n                   FROM word_word_type wwt\n                  WHERE ((wwt.word_id = w.id) AND ((wwt.word_type_code)::text = 'viga'::text))))) AND (EXISTS ( SELECT w.id\n                   FROM lexeme l,\n                    dataset ds\n                  WHERE ((l.word_id = w.id) AND (l.is_public = true) AND (l.is_word = true) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))))\n          GROUP BY w.value, w.value_as_word\n        UNION ALL\n         SELECT 'form'::text AS sgroup,\n            w.value AS word_value,\n            lower(f.value) AS crit,\n            array_agg(\n                CASE\n                    WHEN (w.lang = ANY (ARRAY['est'::bpchar, 'eng'::bpchar, 'deu'::bpchar, 'fra'::bpchar, 'rus'::bpchar, 'ukr'::bpchar, 'mul'::bpchar])) THEN w.lang\n                    ELSE 'other'::bpchar\n                END) AS langs_filt,\n            (array_agg(wl.order_by ORDER BY wl.order_by))[1] AS lang_order_by\n           FROM form f,\n            paradigm_form pf,\n            paradigm p,\n            word w,\n            language wl\n          WHERE ((f.id = pf.form_id) AND (p.id = pf.paradigm_id) AND (p.word_id = w.id) AND (w.lang = wl.code) AND (w.is_public = true) AND ((f.morph_code)::text <> '??'::text) AND (f.value <> w.value) AND (f.value <> '-'::text) AND (pf.morph_exists = true) AND (EXISTS ( SELECT w.id\n                   FROM lexeme l,\n                    dataset ds\n                  WHERE ((l.word_id = w.id) AND (l.is_public = true) AND (l.is_word = true) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))))\n          GROUP BY w.value, f.value) ws,\n    ( SELECT w.value AS word_value,\n            array_agg(DISTINCT ROW((\n                CASE\n                    WHEN (w.lang = ANY (ARRAY['est'::bpchar, 'eng'::bpchar, 'deu'::bpchar, 'fra'::bpchar, 'rus'::bpchar, 'ukr'::bpchar, 'mul'::bpchar])) THEN w.lang\n                    ELSE 'other'::bpchar\n                END)::character varying(10), l.dataset_code, ((EXISTS ( SELECT p.id\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_unif'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text)), (EXISTS ( SELECT p.id\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_lite'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))), (EXISTS ( SELECT p.id\n                   FROM publishing p\n                  WHERE (((p.target_name)::text = 'ww_os'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))))::type_lang_dataset_publishing) AS lang_ds_pubs\n           FROM word w,\n            lexeme l,\n            dataset ds\n          WHERE ((l.word_id = w.id) AND ((ds.code)::text = (l.dataset_code)::text) AND (w.is_public = true) AND (l.is_public = true) AND (ds.is_public = true) AND (l.is_word = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT p.id\n                   FROM publishing p\n                  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text)))\n          GROUP BY w.value) wldp\n  WHERE (ws.word_value = wldp.word_value)\n  ORDER BY ws.sgroup, ws.word_value, ws.crit;"));
    }

    /**
     * Create an aliased <code>public.view_ww_word_search</code> table reference
     */
    public ViewWwWordSearch(String alias) {
        this(DSL.name(alias), VIEW_WW_WORD_SEARCH);
    }

    /**
     * Create an aliased <code>public.view_ww_word_search</code> table reference
     */
    public ViewWwWordSearch(Name alias) {
        this(alias, VIEW_WW_WORD_SEARCH);
    }

    /**
     * Create a <code>public.view_ww_word_search</code> table reference
     */
    public ViewWwWordSearch() {
        this(DSL.name("view_ww_word_search"), null);
    }

    public <O extends Record> ViewWwWordSearch(Table<O> child, ForeignKey<O, ViewWwWordSearchRecord> key) {
        super(child, key, VIEW_WW_WORD_SEARCH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwWordSearch as(String alias) {
        return new ViewWwWordSearch(DSL.name(alias), this);
    }

    @Override
    public ViewWwWordSearch as(Name alias) {
        return new ViewWwWordSearch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordSearch rename(String name) {
        return new ViewWwWordSearch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordSearch rename(Name name) {
        return new ViewWwWordSearch(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String[], Long, TypeLangDatasetPublishingRecord[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
