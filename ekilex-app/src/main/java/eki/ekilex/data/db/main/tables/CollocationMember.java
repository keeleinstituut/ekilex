/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.CollocationMemberRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CollocationMember extends TableImpl<CollocationMemberRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.collocation_member</code>
     */
    public static final CollocationMember COLLOCATION_MEMBER = new CollocationMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollocationMemberRecord> getRecordType() {
        return CollocationMemberRecord.class;
    }

    /**
     * The column <code>public.collocation_member.id</code>.
     */
    public final TableField<CollocationMemberRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.collocation_member.colloc_lexeme_id</code>.
     */
    public final TableField<CollocationMemberRecord, Long> COLLOC_LEXEME_ID = createField(DSL.name("colloc_lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.collocation_member.member_lexeme_id</code>.
     */
    public final TableField<CollocationMemberRecord, Long> MEMBER_LEXEME_ID = createField(DSL.name("member_lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.collocation_member.member_form_id</code>.
     */
    public final TableField<CollocationMemberRecord, Long> MEMBER_FORM_ID = createField(DSL.name("member_form_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.collocation_member.pos_group_code</code>.
     */
    public final TableField<CollocationMemberRecord, String> POS_GROUP_CODE = createField(DSL.name("pos_group_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.collocation_member.rel_group_code</code>.
     */
    public final TableField<CollocationMemberRecord, String> REL_GROUP_CODE = createField(DSL.name("rel_group_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.collocation_member.weight</code>.
     */
    public final TableField<CollocationMemberRecord, BigDecimal> WEIGHT = createField(DSL.name("weight"), SQLDataType.NUMERIC(14, 4), this, "");

    /**
     * The column <code>public.collocation_member.member_order</code>.
     */
    public final TableField<CollocationMemberRecord, Integer> MEMBER_ORDER = createField(DSL.name("member_order"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.collocation_member.group_order</code>.
     */
    public final TableField<CollocationMemberRecord, Integer> GROUP_ORDER = createField(DSL.name("group_order"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.collocation_member.conjunct_lexeme_id</code>.
     */
    public final TableField<CollocationMemberRecord, Long> CONJUNCT_LEXEME_ID = createField(DSL.name("conjunct_lexeme_id"), SQLDataType.BIGINT, this, "");

    private CollocationMember(Name alias, Table<CollocationMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private CollocationMember(Name alias, Table<CollocationMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.collocation_member</code> table reference
     */
    public CollocationMember(String alias) {
        this(DSL.name(alias), COLLOCATION_MEMBER);
    }

    /**
     * Create an aliased <code>public.collocation_member</code> table reference
     */
    public CollocationMember(Name alias) {
        this(alias, COLLOCATION_MEMBER);
    }

    /**
     * Create a <code>public.collocation_member</code> table reference
     */
    public CollocationMember() {
        this(DSL.name("collocation_member"), null);
    }

    public <O extends Record> CollocationMember(Table<O> child, ForeignKey<O, CollocationMemberRecord> key) {
        super(child, key, COLLOCATION_MEMBER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CollocationMemberRecord, Long> getIdentity() {
        return (Identity<CollocationMemberRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CollocationMemberRecord> getPrimaryKey() {
        return Keys.COLLOCATION_MEMBER_PKEY;
    }

    @Override
    public List<UniqueKey<CollocationMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<CollocationMemberRecord>>asList(Keys.COLLOCATION_MEMBER_PKEY, Keys.COLLOCATION_MEMBER_COLLOC_LEXEME_ID_MEMBER_LEXEME_ID_KEY);
    }

    @Override
    public List<ForeignKey<CollocationMemberRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CollocationMemberRecord, ?>>asList(Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_COLLOC_LEXEME_ID_FKEY, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_MEMBER_LEXEME_ID_FKEY, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_MEMBER_FORM_ID_FKEY, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_POS_GROUP_CODE_FKEY, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_REL_GROUP_CODE_FKEY, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_CONJUNCT_LEXEME_ID_FKEY);
    }

    private transient Lexeme _collocationMemberCollocLexemeIdFkey;
    private transient Lexeme _collocationMemberMemberLexemeIdFkey;
    private transient Form _form;
    private transient PosGroup _posGroup;
    private transient RelGroup _relGroup;
    private transient Lexeme _collocationMemberConjunctLexemeIdFkey;

    public Lexeme collocationMemberCollocLexemeIdFkey() {
        if (_collocationMemberCollocLexemeIdFkey == null)
            _collocationMemberCollocLexemeIdFkey = new Lexeme(this, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_COLLOC_LEXEME_ID_FKEY);

        return _collocationMemberCollocLexemeIdFkey;
    }

    public Lexeme collocationMemberMemberLexemeIdFkey() {
        if (_collocationMemberMemberLexemeIdFkey == null)
            _collocationMemberMemberLexemeIdFkey = new Lexeme(this, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_MEMBER_LEXEME_ID_FKEY);

        return _collocationMemberMemberLexemeIdFkey;
    }

    public Form form() {
        if (_form == null)
            _form = new Form(this, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_MEMBER_FORM_ID_FKEY);

        return _form;
    }

    public PosGroup posGroup() {
        if (_posGroup == null)
            _posGroup = new PosGroup(this, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_POS_GROUP_CODE_FKEY);

        return _posGroup;
    }

    public RelGroup relGroup() {
        if (_relGroup == null)
            _relGroup = new RelGroup(this, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_REL_GROUP_CODE_FKEY);

        return _relGroup;
    }

    public Lexeme collocationMemberConjunctLexemeIdFkey() {
        if (_collocationMemberConjunctLexemeIdFkey == null)
            _collocationMemberConjunctLexemeIdFkey = new Lexeme(this, Keys.COLLOCATION_MEMBER__COLLOCATION_MEMBER_CONJUNCT_LEXEME_ID_FKEY);

        return _collocationMemberConjunctLexemeIdFkey;
    }

    @Override
    public CollocationMember as(String alias) {
        return new CollocationMember(DSL.name(alias), this);
    }

    @Override
    public CollocationMember as(Name alias) {
        return new CollocationMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CollocationMember rename(String name) {
        return new CollocationMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollocationMember rename(Name name) {
        return new CollocationMember(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, String, String, BigDecimal, Integer, Integer, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
