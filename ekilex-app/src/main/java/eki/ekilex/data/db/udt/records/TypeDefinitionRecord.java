/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt.records;


import eki.ekilex.data.db.udt.TypeDefinition;

import org.jooq.Field;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeDefinitionRecord extends UDTRecordImpl<TypeDefinitionRecord> implements Record8<Long, Long, Long, String, String, String, String, String[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.type_definition.lexeme_id</code>.
     */
    public void setLexemeId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.type_definition.lexeme_id</code>.
     */
    public Long getLexemeId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.type_definition.meaning_id</code>.
     */
    public void setMeaningId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.type_definition.meaning_id</code>.
     */
    public Long getMeaningId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.type_definition.definition_id</code>.
     */
    public void setDefinitionId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.type_definition.definition_id</code>.
     */
    public Long getDefinitionId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.type_definition.value</code>.
     */
    public void setValue(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.type_definition.value</code>.
     */
    public String getValue() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.type_definition.value_prese</code>.
     */
    public void setValuePrese(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.type_definition.value_prese</code>.
     */
    public String getValuePrese() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.type_definition.lang</code>.
     */
    public void setLang(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.type_definition.lang</code>.
     */
    public String getLang() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.type_definition.complexity</code>.
     */
    public void setComplexity(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.type_definition.complexity</code>.
     */
    public String getComplexity() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.type_definition.notes</code>.
     */
    public void setNotes(String[] value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.type_definition.notes</code>.
     */
    public String[] getNotes() {
        return (String[]) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, String, String, String, String, String[]> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, Long, String, String, String, String, String[]> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TypeDefinition.LEXEME_ID;
    }

    @Override
    public Field<Long> field2() {
        return TypeDefinition.MEANING_ID;
    }

    @Override
    public Field<Long> field3() {
        return TypeDefinition.DEFINITION_ID;
    }

    @Override
    public Field<String> field4() {
        return TypeDefinition.VALUE;
    }

    @Override
    public Field<String> field5() {
        return TypeDefinition.VALUE_PRESE;
    }

    @Override
    public Field<String> field6() {
        return TypeDefinition.LANG;
    }

    @Override
    public Field<String> field7() {
        return TypeDefinition.COMPLEXITY;
    }

    @Override
    public Field<String[]> field8() {
        return TypeDefinition.NOTES;
    }

    @Override
    public Long component1() {
        return getLexemeId();
    }

    @Override
    public Long component2() {
        return getMeaningId();
    }

    @Override
    public Long component3() {
        return getDefinitionId();
    }

    @Override
    public String component4() {
        return getValue();
    }

    @Override
    public String component5() {
        return getValuePrese();
    }

    @Override
    public String component6() {
        return getLang();
    }

    @Override
    public String component7() {
        return getComplexity();
    }

    @Override
    public String[] component8() {
        return getNotes();
    }

    @Override
    public Long value1() {
        return getLexemeId();
    }

    @Override
    public Long value2() {
        return getMeaningId();
    }

    @Override
    public Long value3() {
        return getDefinitionId();
    }

    @Override
    public String value4() {
        return getValue();
    }

    @Override
    public String value5() {
        return getValuePrese();
    }

    @Override
    public String value6() {
        return getLang();
    }

    @Override
    public String value7() {
        return getComplexity();
    }

    @Override
    public String[] value8() {
        return getNotes();
    }

    @Override
    public TypeDefinitionRecord value1(Long value) {
        setLexemeId(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord value2(Long value) {
        setMeaningId(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord value3(Long value) {
        setDefinitionId(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord value4(String value) {
        setValue(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord value5(String value) {
        setValuePrese(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord value6(String value) {
        setLang(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord value7(String value) {
        setComplexity(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord value8(String[] value) {
        setNotes(value);
        return this;
    }

    @Override
    public TypeDefinitionRecord values(Long value1, Long value2, Long value3, String value4, String value5, String value6, String value7, String[] value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypeDefinitionRecord
     */
    public TypeDefinitionRecord() {
        super(TypeDefinition.TYPE_DEFINITION);
    }

    /**
     * Create a detached, initialised TypeDefinitionRecord
     */
    public TypeDefinitionRecord(Long lexemeId, Long meaningId, Long definitionId, String value, String valuePrese, String lang, String complexity, String[] notes) {
        super(TypeDefinition.TYPE_DEFINITION);

        setLexemeId(lexemeId);
        setMeaningId(meaningId);
        setDefinitionId(definitionId);
        setValue(value);
        setValuePrese(valuePrese);
        setLang(lang);
        setComplexity(complexity);
        setNotes(notes);
    }
}
