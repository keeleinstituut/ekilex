/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.LexemeTagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeTag extends TableImpl<LexemeTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lexeme_tag</code>
     */
    public static final LexemeTag LEXEME_TAG = new LexemeTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemeTagRecord> getRecordType() {
        return LexemeTagRecord.class;
    }

    /**
     * The column <code>public.lexeme_tag.id</code>.
     */
    public final TableField<LexemeTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lexeme_tag.lexeme_id</code>.
     */
    public final TableField<LexemeTagRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_tag.tag_name</code>.
     */
    public final TableField<LexemeTagRecord, String> TAG_NAME = createField(DSL.name("tag_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.lexeme_tag.created_on</code>.
     */
    public final TableField<LexemeTagRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("statement_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private LexemeTag(Name alias, Table<LexemeTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexemeTag(Name alias, Table<LexemeTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lexeme_tag</code> table reference
     */
    public LexemeTag(String alias) {
        this(DSL.name(alias), LEXEME_TAG);
    }

    /**
     * Create an aliased <code>public.lexeme_tag</code> table reference
     */
    public LexemeTag(Name alias) {
        this(alias, LEXEME_TAG);
    }

    /**
     * Create a <code>public.lexeme_tag</code> table reference
     */
    public LexemeTag() {
        this(DSL.name("lexeme_tag"), null);
    }

    public <O extends Record> LexemeTag(Table<O> child, ForeignKey<O, LexemeTagRecord> key) {
        super(child, key, LEXEME_TAG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LexemeTagRecord, Long> getIdentity() {
        return (Identity<LexemeTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LexemeTagRecord> getPrimaryKey() {
        return Keys.LEXEME_TAG_PKEY;
    }

    @Override
    public List<UniqueKey<LexemeTagRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemeTagRecord>>asList(Keys.LEXEME_TAG_PKEY, Keys.LEXEME_TAG_LEXEME_ID_TAG_NAME_KEY);
    }

    @Override
    public List<ForeignKey<LexemeTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemeTagRecord, ?>>asList(Keys.LEXEME_TAG__LEXEME_TAG_LEXEME_ID_FKEY, Keys.LEXEME_TAG__LEXEME_TAG_TAG_NAME_FKEY);
    }

    private transient Lexeme _lexeme;
    private transient Tag _tag;

    public Lexeme lexeme() {
        if (_lexeme == null)
            _lexeme = new Lexeme(this, Keys.LEXEME_TAG__LEXEME_TAG_LEXEME_ID_FKEY);

        return _lexeme;
    }

    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.LEXEME_TAG__LEXEME_TAG_TAG_NAME_FKEY);

        return _tag;
    }

    @Override
    public LexemeTag as(String alias) {
        return new LexemeTag(DSL.name(alias), this);
    }

    @Override
    public LexemeTag as(Name alias) {
        return new LexemeTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeTag rename(String name) {
        return new LexemeTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeTag rename(Name name) {
        return new LexemeTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
