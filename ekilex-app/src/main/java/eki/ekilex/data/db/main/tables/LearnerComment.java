/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.LearnerCommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LearnerComment extends TableImpl<LearnerCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.learner_comment</code>
     */
    public static final LearnerComment LEARNER_COMMENT = new LearnerComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LearnerCommentRecord> getRecordType() {
        return LearnerCommentRecord.class;
    }

    /**
     * The column <code>public.learner_comment.id</code>.
     */
    public final TableField<LearnerCommentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.learner_comment.original_freeform_id</code>.
     */
    public final TableField<LearnerCommentRecord, Long> ORIGINAL_FREEFORM_ID = createField(DSL.name("original_freeform_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.learner_comment.meaning_id</code>.
     */
    public final TableField<LearnerCommentRecord, Long> MEANING_ID = createField(DSL.name("meaning_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.learner_comment.value</code>.
     */
    public final TableField<LearnerCommentRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.learner_comment.value_prese</code>.
     */
    public final TableField<LearnerCommentRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.learner_comment.created_by</code>.
     */
    public final TableField<LearnerCommentRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.learner_comment.created_on</code>.
     */
    public final TableField<LearnerCommentRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.learner_comment.modified_by</code>.
     */
    public final TableField<LearnerCommentRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.learner_comment.modified_on</code>.
     */
    public final TableField<LearnerCommentRecord, LocalDateTime> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.learner_comment.order_by</code>.
     */
    public final TableField<LearnerCommentRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private LearnerComment(Name alias, Table<LearnerCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private LearnerComment(Name alias, Table<LearnerCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.learner_comment</code> table reference
     */
    public LearnerComment(String alias) {
        this(DSL.name(alias), LEARNER_COMMENT);
    }

    /**
     * Create an aliased <code>public.learner_comment</code> table reference
     */
    public LearnerComment(Name alias) {
        this(alias, LEARNER_COMMENT);
    }

    /**
     * Create a <code>public.learner_comment</code> table reference
     */
    public LearnerComment() {
        this(DSL.name("learner_comment"), null);
    }

    public <O extends Record> LearnerComment(Table<O> child, ForeignKey<O, LearnerCommentRecord> key) {
        super(child, key, LEARNER_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LearnerCommentRecord, Long> getIdentity() {
        return (Identity<LearnerCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LearnerCommentRecord> getPrimaryKey() {
        return Keys.LEARNER_COMMENT_PKEY;
    }

    @Override
    public List<UniqueKey<LearnerCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<LearnerCommentRecord>>asList(Keys.LEARNER_COMMENT_PKEY);
    }

    @Override
    public List<ForeignKey<LearnerCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LearnerCommentRecord, ?>>asList(Keys.LEARNER_COMMENT__LEARNER_COMMENT_MEANING_ID_FKEY);
    }

    private transient Meaning _meaning;

    public Meaning meaning() {
        if (_meaning == null)
            _meaning = new Meaning(this, Keys.LEARNER_COMMENT__LEARNER_COMMENT_MEANING_ID_FKEY);

        return _meaning;
    }

    @Override
    public LearnerComment as(String alias) {
        return new LearnerComment(DSL.name(alias), this);
    }

    @Override
    public LearnerComment as(Name alias) {
        return new LearnerComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LearnerComment rename(String name) {
        return new LearnerComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LearnerComment rename(Name name) {
        return new LearnerComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, String, String, String, LocalDateTime, String, LocalDateTime, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
