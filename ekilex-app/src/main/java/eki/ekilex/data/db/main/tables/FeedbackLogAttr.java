/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.FeedbackLogAttrRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeedbackLogAttr extends TableImpl<FeedbackLogAttrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.feedback_log_attr</code>
     */
    public static final FeedbackLogAttr FEEDBACK_LOG_ATTR = new FeedbackLogAttr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedbackLogAttrRecord> getRecordType() {
        return FeedbackLogAttrRecord.class;
    }

    /**
     * The column <code>public.feedback_log_attr.id</code>.
     */
    public final TableField<FeedbackLogAttrRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.feedback_log_attr.feedback_log_id</code>.
     */
    public final TableField<FeedbackLogAttrRecord, Long> FEEDBACK_LOG_ID = createField(DSL.name("feedback_log_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.feedback_log_attr.name</code>.
     */
    public final TableField<FeedbackLogAttrRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.feedback_log_attr.value</code>.
     */
    public final TableField<FeedbackLogAttrRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    private FeedbackLogAttr(Name alias, Table<FeedbackLogAttrRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedbackLogAttr(Name alias, Table<FeedbackLogAttrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.feedback_log_attr</code> table reference
     */
    public FeedbackLogAttr(String alias) {
        this(DSL.name(alias), FEEDBACK_LOG_ATTR);
    }

    /**
     * Create an aliased <code>public.feedback_log_attr</code> table reference
     */
    public FeedbackLogAttr(Name alias) {
        this(alias, FEEDBACK_LOG_ATTR);
    }

    /**
     * Create a <code>public.feedback_log_attr</code> table reference
     */
    public FeedbackLogAttr() {
        this(DSL.name("feedback_log_attr"), null);
    }

    public <O extends Record> FeedbackLogAttr(Table<O> child, ForeignKey<O, FeedbackLogAttrRecord> key) {
        super(child, key, FEEDBACK_LOG_ATTR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<FeedbackLogAttrRecord, Long> getIdentity() {
        return (Identity<FeedbackLogAttrRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FeedbackLogAttrRecord> getPrimaryKey() {
        return Keys.FEEDBACK_LOG_ATTR_PKEY;
    }

    @Override
    public List<UniqueKey<FeedbackLogAttrRecord>> getKeys() {
        return Arrays.<UniqueKey<FeedbackLogAttrRecord>>asList(Keys.FEEDBACK_LOG_ATTR_PKEY, Keys.FEEDBACK_LOG_ATTR_FEEDBACK_LOG_ID_NAME_KEY);
    }

    @Override
    public List<ForeignKey<FeedbackLogAttrRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeedbackLogAttrRecord, ?>>asList(Keys.FEEDBACK_LOG_ATTR__FEEDBACK_LOG_ATTR_FEEDBACK_LOG_ID_FKEY);
    }

    private transient FeedbackLog _feedbackLog;

    public FeedbackLog feedbackLog() {
        if (_feedbackLog == null)
            _feedbackLog = new FeedbackLog(this, Keys.FEEDBACK_LOG_ATTR__FEEDBACK_LOG_ATTR_FEEDBACK_LOG_ID_FKEY);

        return _feedbackLog;
    }

    @Override
    public FeedbackLogAttr as(String alias) {
        return new FeedbackLogAttr(DSL.name(alias), this);
    }

    @Override
    public FeedbackLogAttr as(Name alias) {
        return new FeedbackLogAttr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedbackLogAttr rename(String name) {
        return new FeedbackLogAttr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedbackLogAttr rename(Name name) {
        return new FeedbackLogAttr(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
