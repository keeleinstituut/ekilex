/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables.records;


import eki.ekilex.data.db.tables.DatasetFreeformType;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetFreeformTypeRecord extends UpdatableRecordImpl<DatasetFreeformTypeRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.dataset_freeform_type.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.dataset_freeform_type.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.dataset_freeform_type.dataset_code</code>.
     */
    public void setDatasetCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.dataset_freeform_type.dataset_code</code>.
     */
    public String getDatasetCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.dataset_freeform_type.freeform_owner</code>.
     */
    public void setFreeformOwner(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.dataset_freeform_type.freeform_owner</code>.
     */
    public String getFreeformOwner() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.dataset_freeform_type.freeform_type_code</code>.
     */
    public void setFreeformTypeCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.dataset_freeform_type.freeform_type_code</code>.
     */
    public String getFreeformTypeCode() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return DatasetFreeformType.DATASET_FREEFORM_TYPE.ID;
    }

    @Override
    public Field<String> field2() {
        return DatasetFreeformType.DATASET_FREEFORM_TYPE.DATASET_CODE;
    }

    @Override
    public Field<String> field3() {
        return DatasetFreeformType.DATASET_FREEFORM_TYPE.FREEFORM_OWNER;
    }

    @Override
    public Field<String> field4() {
        return DatasetFreeformType.DATASET_FREEFORM_TYPE.FREEFORM_TYPE_CODE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDatasetCode();
    }

    @Override
    public String component3() {
        return getFreeformOwner();
    }

    @Override
    public String component4() {
        return getFreeformTypeCode();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDatasetCode();
    }

    @Override
    public String value3() {
        return getFreeformOwner();
    }

    @Override
    public String value4() {
        return getFreeformTypeCode();
    }

    @Override
    public DatasetFreeformTypeRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DatasetFreeformTypeRecord value2(String value) {
        setDatasetCode(value);
        return this;
    }

    @Override
    public DatasetFreeformTypeRecord value3(String value) {
        setFreeformOwner(value);
        return this;
    }

    @Override
    public DatasetFreeformTypeRecord value4(String value) {
        setFreeformTypeCode(value);
        return this;
    }

    @Override
    public DatasetFreeformTypeRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatasetFreeformTypeRecord
     */
    public DatasetFreeformTypeRecord() {
        super(DatasetFreeformType.DATASET_FREEFORM_TYPE);
    }

    /**
     * Create a detached, initialised DatasetFreeformTypeRecord
     */
    public DatasetFreeformTypeRecord(Long id, String datasetCode, String freeformOwner, String freeformTypeCode) {
        super(DatasetFreeformType.DATASET_FREEFORM_TYPE);

        setId(id);
        setDatasetCode(datasetCode);
        setFreeformOwner(freeformOwner);
        setFreeformTypeCode(freeformTypeCode);
    }
}
