/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.UsageDefinitionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsageDefinition extends TableImpl<UsageDefinitionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.usage_definition</code>
     */
    public static final UsageDefinition USAGE_DEFINITION = new UsageDefinition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsageDefinitionRecord> getRecordType() {
        return UsageDefinitionRecord.class;
    }

    /**
     * The column <code>public.usage_definition.id</code>.
     */
    public final TableField<UsageDefinitionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.usage_definition.original_freeform_id</code>.
     */
    public final TableField<UsageDefinitionRecord, Long> ORIGINAL_FREEFORM_ID = createField(DSL.name("original_freeform_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.usage_definition.usage_id</code>.
     */
    public final TableField<UsageDefinitionRecord, Long> USAGE_ID = createField(DSL.name("usage_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.usage_definition.value</code>.
     */
    public final TableField<UsageDefinitionRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.usage_definition.value_prese</code>.
     */
    public final TableField<UsageDefinitionRecord, String> VALUE_PRESE = createField(DSL.name("value_prese"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.usage_definition.lang</code>.
     */
    public final TableField<UsageDefinitionRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.usage_definition.created_by</code>.
     */
    public final TableField<UsageDefinitionRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.usage_definition.created_on</code>.
     */
    public final TableField<UsageDefinitionRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.usage_definition.modified_by</code>.
     */
    public final TableField<UsageDefinitionRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.usage_definition.modified_on</code>.
     */
    public final TableField<UsageDefinitionRecord, Timestamp> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>public.usage_definition.order_by</code>.
     */
    public final TableField<UsageDefinitionRecord, Long> ORDER_BY = createField(DSL.name("order_by"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private UsageDefinition(Name alias, Table<UsageDefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsageDefinition(Name alias, Table<UsageDefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.usage_definition</code> table reference
     */
    public UsageDefinition(String alias) {
        this(DSL.name(alias), USAGE_DEFINITION);
    }

    /**
     * Create an aliased <code>public.usage_definition</code> table reference
     */
    public UsageDefinition(Name alias) {
        this(alias, USAGE_DEFINITION);
    }

    /**
     * Create a <code>public.usage_definition</code> table reference
     */
    public UsageDefinition() {
        this(DSL.name("usage_definition"), null);
    }

    public <O extends Record> UsageDefinition(Table<O> child, ForeignKey<O, UsageDefinitionRecord> key) {
        super(child, key, USAGE_DEFINITION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UsageDefinitionRecord, Long> getIdentity() {
        return (Identity<UsageDefinitionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsageDefinitionRecord> getPrimaryKey() {
        return Keys.USAGE_DEFINITION_PKEY;
    }

    @Override
    public List<UniqueKey<UsageDefinitionRecord>> getKeys() {
        return Arrays.<UniqueKey<UsageDefinitionRecord>>asList(Keys.USAGE_DEFINITION_PKEY);
    }

    @Override
    public List<ForeignKey<UsageDefinitionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsageDefinitionRecord, ?>>asList(Keys.USAGE_DEFINITION__USAGE_DEFINITION_USAGE_ID_FKEY, Keys.USAGE_DEFINITION__USAGE_DEFINITION_LANG_FKEY);
    }

    private transient Usage _usage;
    private transient Language _language;

    public Usage usage() {
        if (_usage == null)
            _usage = new Usage(this, Keys.USAGE_DEFINITION__USAGE_DEFINITION_USAGE_ID_FKEY);

        return _usage;
    }

    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.USAGE_DEFINITION__USAGE_DEFINITION_LANG_FKEY);

        return _language;
    }

    @Override
    public UsageDefinition as(String alias) {
        return new UsageDefinition(DSL.name(alias), this);
    }

    @Override
    public UsageDefinition as(Name alias) {
        return new UsageDefinition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageDefinition rename(String name) {
        return new UsageDefinition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageDefinition rename(Name name) {
        return new UsageDefinition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, String, String, String, String, Timestamp, String, Timestamp, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
