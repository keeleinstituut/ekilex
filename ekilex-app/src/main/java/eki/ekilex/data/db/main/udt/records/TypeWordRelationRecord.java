/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.udt.records;


import eki.ekilex.data.db.main.udt.TypeWordRelation;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeWordRelationRecord extends UDTRecordImpl<TypeWordRelationRecord> implements Record13<Long, String, String, Long, Long, String, String, Integer, Boolean, String, String, String[], String[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.type_word_relation.word_group_id</code>.
     */
    public void setWordGroupId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.type_word_relation.word_group_id</code>.
     */
    public Long getWordGroupId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.type_word_relation.word_rel_type_code</code>.
     */
    public void setWordRelTypeCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.type_word_relation.word_rel_type_code</code>.
     */
    public String getWordRelTypeCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.type_word_relation.relation_status</code>.
     */
    public void setRelationStatus(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.type_word_relation.relation_status</code>.
     */
    public String getRelationStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.type_word_relation.order_by</code>.
     */
    public void setOrderBy(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.type_word_relation.order_by</code>.
     */
    public Long getOrderBy() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.type_word_relation.word_id</code>.
     */
    public void setWordId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.type_word_relation.word_id</code>.
     */
    public Long getWordId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.type_word_relation.word</code>.
     */
    public void setWord(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.type_word_relation.word</code>.
     */
    public String getWord() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.type_word_relation.word_prese</code>.
     */
    public void setWordPrese(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.type_word_relation.word_prese</code>.
     */
    public String getWordPrese() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.type_word_relation.homonym_nr</code>.
     */
    public void setHomonymNr(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.type_word_relation.homonym_nr</code>.
     */
    public Integer getHomonymNr() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>public.type_word_relation.homonyms_exist</code>.
     */
    public void setHomonymsExist(Boolean value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.type_word_relation.homonyms_exist</code>.
     */
    public Boolean getHomonymsExist() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>public.type_word_relation.lang</code>.
     */
    public void setLang(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.type_word_relation.lang</code>.
     */
    public String getLang() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.type_word_relation.aspect_code</code>.
     */
    public void setAspectCode(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.type_word_relation.aspect_code</code>.
     */
    public String getAspectCode() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.type_word_relation.word_type_codes</code>.
     */
    public void setWordTypeCodes(String[] value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.type_word_relation.word_type_codes</code>.
     */
    public String[] getWordTypeCodes() {
        return (String[]) get(11);
    }

    /**
     * Setter for <code>public.type_word_relation.lex_complexities</code>.
     */
    public void setLexComplexities(String[] value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.type_word_relation.lex_complexities</code>.
     */
    public String[] getLexComplexities() {
        return (String[]) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, Long, Long, String, String, Integer, Boolean, String, String, String[], String[]> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Long, String, String, Long, Long, String, String, Integer, Boolean, String, String, String[], String[]> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TypeWordRelation.WORD_GROUP_ID;
    }

    @Override
    public Field<String> field2() {
        return TypeWordRelation.WORD_REL_TYPE_CODE;
    }

    @Override
    public Field<String> field3() {
        return TypeWordRelation.RELATION_STATUS;
    }

    @Override
    public Field<Long> field4() {
        return TypeWordRelation.ORDER_BY;
    }

    @Override
    public Field<Long> field5() {
        return TypeWordRelation.WORD_ID;
    }

    @Override
    public Field<String> field6() {
        return TypeWordRelation.WORD;
    }

    @Override
    public Field<String> field7() {
        return TypeWordRelation.WORD_PRESE;
    }

    @Override
    public Field<Integer> field8() {
        return TypeWordRelation.HOMONYM_NR;
    }

    @Override
    public Field<Boolean> field9() {
        return TypeWordRelation.HOMONYMS_EXIST;
    }

    @Override
    public Field<String> field10() {
        return TypeWordRelation.LANG;
    }

    @Override
    public Field<String> field11() {
        return TypeWordRelation.ASPECT_CODE;
    }

    @Override
    public Field<String[]> field12() {
        return TypeWordRelation.WORD_TYPE_CODES;
    }

    @Override
    public Field<String[]> field13() {
        return TypeWordRelation.LEX_COMPLEXITIES;
    }

    @Override
    public Long component1() {
        return getWordGroupId();
    }

    @Override
    public String component2() {
        return getWordRelTypeCode();
    }

    @Override
    public String component3() {
        return getRelationStatus();
    }

    @Override
    public Long component4() {
        return getOrderBy();
    }

    @Override
    public Long component5() {
        return getWordId();
    }

    @Override
    public String component6() {
        return getWord();
    }

    @Override
    public String component7() {
        return getWordPrese();
    }

    @Override
    public Integer component8() {
        return getHomonymNr();
    }

    @Override
    public Boolean component9() {
        return getHomonymsExist();
    }

    @Override
    public String component10() {
        return getLang();
    }

    @Override
    public String component11() {
        return getAspectCode();
    }

    @Override
    public String[] component12() {
        return getWordTypeCodes();
    }

    @Override
    public String[] component13() {
        return getLexComplexities();
    }

    @Override
    public Long value1() {
        return getWordGroupId();
    }

    @Override
    public String value2() {
        return getWordRelTypeCode();
    }

    @Override
    public String value3() {
        return getRelationStatus();
    }

    @Override
    public Long value4() {
        return getOrderBy();
    }

    @Override
    public Long value5() {
        return getWordId();
    }

    @Override
    public String value6() {
        return getWord();
    }

    @Override
    public String value7() {
        return getWordPrese();
    }

    @Override
    public Integer value8() {
        return getHomonymNr();
    }

    @Override
    public Boolean value9() {
        return getHomonymsExist();
    }

    @Override
    public String value10() {
        return getLang();
    }

    @Override
    public String value11() {
        return getAspectCode();
    }

    @Override
    public String[] value12() {
        return getWordTypeCodes();
    }

    @Override
    public String[] value13() {
        return getLexComplexities();
    }

    @Override
    public TypeWordRelationRecord value1(Long value) {
        setWordGroupId(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value2(String value) {
        setWordRelTypeCode(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value3(String value) {
        setRelationStatus(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value4(Long value) {
        setOrderBy(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value5(Long value) {
        setWordId(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value6(String value) {
        setWord(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value7(String value) {
        setWordPrese(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value8(Integer value) {
        setHomonymNr(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value9(Boolean value) {
        setHomonymsExist(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value10(String value) {
        setLang(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value11(String value) {
        setAspectCode(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value12(String[] value) {
        setWordTypeCodes(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord value13(String[] value) {
        setLexComplexities(value);
        return this;
    }

    @Override
    public TypeWordRelationRecord values(Long value1, String value2, String value3, Long value4, Long value5, String value6, String value7, Integer value8, Boolean value9, String value10, String value11, String[] value12, String[] value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypeWordRelationRecord
     */
    public TypeWordRelationRecord() {
        super(TypeWordRelation.TYPE_WORD_RELATION);
    }

    /**
     * Create a detached, initialised TypeWordRelationRecord
     */
    public TypeWordRelationRecord(Long wordGroupId, String wordRelTypeCode, String relationStatus, Long orderBy, Long wordId, String word, String wordPrese, Integer homonymNr, Boolean homonymsExist, String lang, String aspectCode, String[] wordTypeCodes, String[] lexComplexities) {
        super(TypeWordRelation.TYPE_WORD_RELATION);

        setWordGroupId(wordGroupId);
        setWordRelTypeCode(wordRelTypeCode);
        setRelationStatus(relationStatus);
        setOrderBy(orderBy);
        setWordId(wordId);
        setWord(word);
        setWordPrese(wordPrese);
        setHomonymNr(homonymNr);
        setHomonymsExist(homonymsExist);
        setLang(lang);
        setAspectCode(aspectCode);
        setWordTypeCodes(wordTypeCodes);
        setLexComplexities(lexComplexities);
    }
}
