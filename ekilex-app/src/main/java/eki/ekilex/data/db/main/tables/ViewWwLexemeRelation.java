/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewWwLexemeRelationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwLexemeRelation extends TableImpl<ViewWwLexemeRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_ww_lexeme_relation</code>
     */
    public static final ViewWwLexemeRelation VIEW_WW_LEXEME_RELATION = new ViewWwLexemeRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwLexemeRelationRecord> getRecordType() {
        return ViewWwLexemeRelationRecord.class;
    }

    /**
     * The column <code>public.view_ww_lexeme_relation.lexeme_id</code>.
     */
    public final TableField<ViewWwLexemeRelationRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_lexeme_relation.related_lexemes</code>.
     */
    public final TableField<ViewWwLexemeRelationRecord, JSON> RELATED_LEXEMES = createField(DSL.name("related_lexemes"), SQLDataType.JSON, this, "");

    private ViewWwLexemeRelation(Name alias, Table<ViewWwLexemeRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwLexemeRelation(Name alias, Table<ViewWwLexemeRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_lexeme_relation\" as  SELECT l1.id AS lexeme_id,\n    json_agg(json_build_object('lexemeId', l2.id, 'lexRelTypeCode', lr.lex_rel_type_code, 'wordId', w2.id, 'value', w2.value, 'valuePrese', w2.value_prese, 'homonymNr', w2.homonym_nr, 'lang', w2.lang, 'aspectCode', w2.aspect_code, 'wordTypeCodes', ( SELECT array_agg(wwt.word_type_code ORDER BY wwt.order_by) AS array_agg\n           FROM word_word_type wwt\n          WHERE ((wwt.word_id = w2.id) AND ((wwt.word_type_code)::text <> ALL ((ARRAY['vv'::character varying, 'yv'::character varying, 'vvar'::character varying])::text[])))), 'wwUnif', ((EXISTS ( SELECT p.id\n           FROM publishing p\n          WHERE (((p.target_name)::text = 'ww_unif'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id)))) OR ((l2.dataset_code)::text <> 'eki'::text)), 'wwLite', (EXISTS ( SELECT p.id\n           FROM publishing p\n          WHERE (((p.target_name)::text = 'ww_lite'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id)))), 'wwOd', (EXISTS ( SELECT p.id\n           FROM publishing p\n          WHERE (((p.target_name)::text = 'ww_od'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id))))) ORDER BY lr.order_by) AS related_lexemes\n   FROM lexeme l1,\n    lexeme l2,\n    lex_relation lr,\n    word w2,\n    dataset ds1,\n    dataset ds2\n  WHERE ((lr.lexeme1_id = l1.id) AND (lr.lexeme2_id = l2.id) AND (l2.word_id = w2.id) AND ((l1.dataset_code)::text = (ds1.code)::text) AND ((l2.dataset_code)::text = (ds2.code)::text) AND (l1.is_public = true) AND (l2.is_public = true) AND (ds1.is_public = true) AND (ds2.is_public = true) AND ((l1.dataset_code)::text <> 'ety'::text) AND ((l2.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n           FROM publishing p\n          WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l1.id)))) OR ((l1.dataset_code)::text <> 'eki'::text)) AND ((EXISTS ( SELECT 1\n           FROM publishing p\n          WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l2.id)))) OR ((l2.dataset_code)::text <> 'eki'::text)))\n  GROUP BY l1.id\n  ORDER BY l1.id;"));
    }

    /**
     * Create an aliased <code>public.view_ww_lexeme_relation</code> table reference
     */
    public ViewWwLexemeRelation(String alias) {
        this(DSL.name(alias), VIEW_WW_LEXEME_RELATION);
    }

    /**
     * Create an aliased <code>public.view_ww_lexeme_relation</code> table reference
     */
    public ViewWwLexemeRelation(Name alias) {
        this(alias, VIEW_WW_LEXEME_RELATION);
    }

    /**
     * Create a <code>public.view_ww_lexeme_relation</code> table reference
     */
    public ViewWwLexemeRelation() {
        this(DSL.name("view_ww_lexeme_relation"), null);
    }

    public <O extends Record> ViewWwLexemeRelation(Table<O> child, ForeignKey<O, ViewWwLexemeRelationRecord> key) {
        super(child, key, VIEW_WW_LEXEME_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwLexemeRelation as(String alias) {
        return new ViewWwLexemeRelation(DSL.name(alias), this);
    }

    @Override
    public ViewWwLexemeRelation as(Name alias) {
        return new ViewWwLexemeRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwLexemeRelation rename(String name) {
        return new ViewWwLexemeRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwLexemeRelation rename(Name name) {
        return new ViewWwLexemeRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
