/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Keys;
import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.LexemeActivityLogRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeActivityLog extends TableImpl<LexemeActivityLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lexeme_activity_log</code>
     */
    public static final LexemeActivityLog LEXEME_ACTIVITY_LOG = new LexemeActivityLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemeActivityLogRecord> getRecordType() {
        return LexemeActivityLogRecord.class;
    }

    /**
     * The column <code>public.lexeme_activity_log.id</code>.
     */
    public final TableField<LexemeActivityLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lexeme_activity_log.lexeme_id</code>.
     */
    public final TableField<LexemeActivityLogRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_activity_log.activity_log_id</code>.
     */
    public final TableField<LexemeActivityLogRecord, Long> ACTIVITY_LOG_ID = createField(DSL.name("activity_log_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private LexemeActivityLog(Name alias, Table<LexemeActivityLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexemeActivityLog(Name alias, Table<LexemeActivityLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lexeme_activity_log</code> table reference
     */
    public LexemeActivityLog(String alias) {
        this(DSL.name(alias), LEXEME_ACTIVITY_LOG);
    }

    /**
     * Create an aliased <code>public.lexeme_activity_log</code> table reference
     */
    public LexemeActivityLog(Name alias) {
        this(alias, LEXEME_ACTIVITY_LOG);
    }

    /**
     * Create a <code>public.lexeme_activity_log</code> table reference
     */
    public LexemeActivityLog() {
        this(DSL.name("lexeme_activity_log"), null);
    }

    public <O extends Record> LexemeActivityLog(Table<O> child, ForeignKey<O, LexemeActivityLogRecord> key) {
        super(child, key, LEXEME_ACTIVITY_LOG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LexemeActivityLogRecord, Long> getIdentity() {
        return (Identity<LexemeActivityLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LexemeActivityLogRecord> getPrimaryKey() {
        return Keys.LEXEME_ACTIVITY_LOG_PKEY;
    }

    @Override
    public List<UniqueKey<LexemeActivityLogRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemeActivityLogRecord>>asList(Keys.LEXEME_ACTIVITY_LOG_PKEY, Keys.LEXEME_ACTIVITY_LOG_LEXEME_ID_ACTIVITY_LOG_ID_KEY);
    }

    @Override
    public List<ForeignKey<LexemeActivityLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemeActivityLogRecord, ?>>asList(Keys.LEXEME_ACTIVITY_LOG__LEXEME_ACTIVITY_LOG_LEXEME_ID_FKEY, Keys.LEXEME_ACTIVITY_LOG__LEXEME_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY);
    }

    private transient Lexeme _lexeme;
    private transient ActivityLog _activityLog;

    public Lexeme lexeme() {
        if (_lexeme == null)
            _lexeme = new Lexeme(this, Keys.LEXEME_ACTIVITY_LOG__LEXEME_ACTIVITY_LOG_LEXEME_ID_FKEY);

        return _lexeme;
    }

    public ActivityLog activityLog() {
        if (_activityLog == null)
            _activityLog = new ActivityLog(this, Keys.LEXEME_ACTIVITY_LOG__LEXEME_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY);

        return _activityLog;
    }

    @Override
    public LexemeActivityLog as(String alias) {
        return new LexemeActivityLog(DSL.name(alias), this);
    }

    @Override
    public LexemeActivityLog as(Name alias) {
        return new LexemeActivityLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeActivityLog rename(String name) {
        return new LexemeActivityLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeActivityLog rename(Name name) {
        return new LexemeActivityLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
