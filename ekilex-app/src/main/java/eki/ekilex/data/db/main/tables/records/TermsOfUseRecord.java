/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables.records;


import eki.ekilex.data.db.main.tables.TermsOfUse;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TermsOfUseRecord extends UpdatableRecordImpl<TermsOfUseRecord> implements Record4<Long, String, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.terms_of_use.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.terms_of_use.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.terms_of_use.version</code>.
     */
    public void setVersion(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.terms_of_use.version</code>.
     */
    public String getVersion() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.terms_of_use.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.terms_of_use.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.terms_of_use.is_active</code>.
     */
    public void setIsActive(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.terms_of_use.is_active</code>.
     */
    public Boolean getIsActive() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TermsOfUse.TERMS_OF_USE.ID;
    }

    @Override
    public Field<String> field2() {
        return TermsOfUse.TERMS_OF_USE.VERSION;
    }

    @Override
    public Field<String> field3() {
        return TermsOfUse.TERMS_OF_USE.VALUE;
    }

    @Override
    public Field<Boolean> field4() {
        return TermsOfUse.TERMS_OF_USE.IS_ACTIVE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getVersion();
    }

    @Override
    public String component3() {
        return getValue();
    }

    @Override
    public Boolean component4() {
        return getIsActive();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getVersion();
    }

    @Override
    public String value3() {
        return getValue();
    }

    @Override
    public Boolean value4() {
        return getIsActive();
    }

    @Override
    public TermsOfUseRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TermsOfUseRecord value2(String value) {
        setVersion(value);
        return this;
    }

    @Override
    public TermsOfUseRecord value3(String value) {
        setValue(value);
        return this;
    }

    @Override
    public TermsOfUseRecord value4(Boolean value) {
        setIsActive(value);
        return this;
    }

    @Override
    public TermsOfUseRecord values(Long value1, String value2, String value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TermsOfUseRecord
     */
    public TermsOfUseRecord() {
        super(TermsOfUse.TERMS_OF_USE);
    }

    /**
     * Create a detached, initialised TermsOfUseRecord
     */
    public TermsOfUseRecord(Long id, String version, String value, Boolean isActive) {
        super(TermsOfUse.TERMS_OF_USE);

        setId(id);
        setVersion(version);
        setValue(value);
        setIsActive(isActive);
    }
}
