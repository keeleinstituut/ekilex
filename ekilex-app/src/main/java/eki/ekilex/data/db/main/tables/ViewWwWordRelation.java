/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.main.tables;


import eki.ekilex.data.db.main.Public;
import eki.ekilex.data.db.main.tables.records.ViewWwWordRelationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwWordRelation extends TableImpl<ViewWwWordRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_ww_word_relation</code>
     */
    public static final ViewWwWordRelation VIEW_WW_WORD_RELATION = new ViewWwWordRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwWordRelationRecord> getRecordType() {
        return ViewWwWordRelationRecord.class;
    }

    /**
     * The column <code>public.view_ww_word_relation.word_id</code>.
     */
    public final TableField<ViewWwWordRelationRecord, Long> WORD_ID = createField(DSL.name("word_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_word_relation.related_words</code>.
     */
    public final TableField<ViewWwWordRelationRecord, JSON> RELATED_WORDS = createField(DSL.name("related_words"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.view_ww_word_relation.word_group_members</code>.
     */
    public final TableField<ViewWwWordRelationRecord, JSON> WORD_GROUP_MEMBERS = createField(DSL.name("word_group_members"), SQLDataType.JSON, this, "");

    private ViewWwWordRelation(Name alias, Table<ViewWwWordRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwWordRelation(Name alias, Table<ViewWwWordRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_word_relation\" as  SELECT w.id AS word_id,\n    wr.related_words,\n    wg.word_group_members\n   FROM ((word w\n     LEFT JOIN ( SELECT wr_1.word1_id AS word_id,\n            json_agg(json_build_object('wordRelTypeCode', wr_1.word_rel_type_code, 'relationStatus', wr_1.relation_status, 'orderBy', wr_1.word_rel_order_by, 'wordId', wr_1.related_word_id, 'value', wr_1.related_word_value, 'valuePrese', wr_1.related_word_value_prese, 'homonymNr', wr_1.related_word_homonym_nr, 'homonymsExist', wr_1.related_word_homonyms_exist, 'lang', wr_1.related_word_lang, 'aspectCode', wr_1.related_word_aspect_code, 'wordTypeCodes', wr_1.related_word_type_codes, 'wwUnif', wr_1.is_ww_unif, 'wwLite', wr_1.is_ww_lite, 'wwOd', wr_1.is_ww_od) ORDER BY wr_1.word_rel_order_by) AS related_words\n           FROM ( SELECT wr_2.word1_id,\n                    wr_2.word2_id AS related_word_id,\n                    wr_2.word_rel_type_code,\n                    COALESCE(wr_2.relation_status, 'UNDEFINED'::character varying) AS relation_status,\n                    wr_2.order_by AS word_rel_order_by,\n                    w2.value AS related_word_value,\n                    w2.value_prese AS related_word_value_prese,\n                    w2.homonym_nr AS related_word_homonym_nr,\n                    (EXISTS ( SELECT 1\n                           FROM word wh\n                          WHERE ((wh.lang = w2.lang) AND (wh.value = w2.value) AND (wh.id <> w2.id) AND (EXISTS ( SELECT 1\n                                   FROM lexeme l,\n                                    dataset ds\n                                  WHERE ((l.word_id = wh.id) AND ((l.dataset_code)::text = (ds.code)::text) AND (l.is_public = true) AND (ds.is_public = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n   FROM publishing p\n  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text)))))))) AS related_word_homonyms_exist,\n                    w2.lang AS related_word_lang,\n                    w2.aspect_code AS related_word_aspect_code,\n                    ( SELECT array_agg(wwt.word_type_code ORDER BY wwt.order_by) AS array_agg\n                           FROM word_word_type wwt\n                          WHERE ((wwt.word_id = w2.id) AND ((wwt.word_type_code)::text <> ALL ((ARRAY['vv'::character varying, 'yv'::character varying, 'vvar'::character varying])::text[])))) AS related_word_type_codes,\n                    (EXISTS ( SELECT p.id\n                           FROM publishing p\n                          WHERE (((p.target_name)::text = 'ww_unif'::text) AND ((p.entity_name)::text = 'word_relation'::text) AND (p.entity_id = wr_2.id)))) AS is_ww_unif,\n                    (EXISTS ( SELECT p.id\n                           FROM publishing p\n                          WHERE (((p.target_name)::text = 'ww_lite'::text) AND ((p.entity_name)::text = 'word_relation'::text) AND (p.entity_id = wr_2.id)))) AS is_ww_lite,\n                    (EXISTS ( SELECT p.id\n                           FROM publishing p\n                          WHERE (((p.target_name)::text = 'ww_od'::text) AND ((p.entity_name)::text = 'word_relation'::text) AND (p.entity_id = wr_2.id)))) AS is_ww_od\n                   FROM word w1,\n                    word_relation wr_2,\n                    word w2\n                  WHERE ((wr_2.word1_id = w1.id) AND (wr_2.word2_id = w2.id) AND (EXISTS ( SELECT 1\n                           FROM lexeme l,\n                            dataset ds\n                          WHERE ((l.word_id = w1.id) AND ((l.dataset_code)::text = (ds.code)::text) AND (l.is_public = true) AND (ds.is_public = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n                                   FROM publishing p\n                                  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text))))) AND (EXISTS ( SELECT 1\n                           FROM lexeme l,\n                            dataset ds\n                          WHERE ((l.word_id = w2.id) AND ((l.dataset_code)::text = (ds.code)::text) AND (l.is_public = true) AND (ds.is_public = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n                                   FROM publishing p\n                                  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text))))) AND (EXISTS ( SELECT 1\n                           FROM publishing p\n                          WHERE (((p.entity_name)::text = 'word_relation'::text) AND (p.entity_id = wr_2.id)))))) wr_1\n          GROUP BY wr_1.word1_id) wr ON ((wr.word_id = w.id)))\n     LEFT JOIN ( SELECT wg_1.word_id,\n            json_agg(json_build_object('wordGroupId', wg_1.word_group_id, 'wordRelTypeCode', wg_1.word_rel_type_code, 'orderBy', wg_1.group_member_order_by, 'wordId', wg_1.group_member_word_id, 'value', wg_1.group_member_word_value, 'valuePrese', wg_1.group_member_word_value_prese, 'homonymNr', wg_1.group_member_homonym_nr, 'homonymsExist', wg_1.group_member_homonyms_exist, 'lang', wg_1.group_member_word_lang, 'aspectCode', wg_1.group_member_aspect_code, 'wordTypeCodes', wg_1.group_member_word_type_codes, 'wwUnif', wg_1.is_ww_unif, 'wwLite', wg_1.is_ww_lite, 'wwOd', wg_1.is_ww_od) ORDER BY wg_1.word_group_id, wg_1.group_member_order_by) AS word_group_members\n           FROM ( SELECT w1.id AS word_id,\n                    wg_2.id AS word_group_id,\n                    wg_2.word_rel_type_code,\n                    w2.id AS group_member_word_id,\n                    w2.value AS group_member_word_value,\n                    w2.value_prese AS group_member_word_value_prese,\n                    w2.homonym_nr AS group_member_homonym_nr,\n                    (EXISTS ( SELECT 1\n                           FROM word wh\n                          WHERE ((wh.lang = w2.lang) AND (wh.value = w2.value) AND (wh.id <> w2.id) AND (EXISTS ( SELECT 1\n                                   FROM lexeme l,\n                                    dataset ds\n                                  WHERE ((l.word_id = wh.id) AND ((l.dataset_code)::text = (ds.code)::text) AND (l.is_public = true) AND (ds.is_public = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n   FROM publishing p\n  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text)))))))) AS group_member_homonyms_exist,\n                    w2.lang AS group_member_word_lang,\n                    w2.aspect_code AS group_member_aspect_code,\n                    wgm2.order_by AS group_member_order_by,\n                    ( SELECT array_agg(wwt.word_type_code ORDER BY wwt.order_by) AS array_agg\n                           FROM word_word_type wwt\n                          WHERE ((wwt.word_id = w2.id) AND ((wwt.word_type_code)::text <> ALL ((ARRAY['vv'::character varying, 'yv'::character varying, 'vvar'::character varying])::text[])))) AS group_member_word_type_codes,\n                    ((EXISTS ( SELECT p.id\n                           FROM lexeme l,\n                            publishing p\n                          WHERE ((l.word_id = w2.id) AND ((p.target_name)::text = 'ww_unif'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR (EXISTS ( SELECT 1\n                           FROM lexeme l\n                          WHERE ((l.word_id = w2.id) AND ((l.dataset_code)::text <> ALL ((ARRAY['eki'::character varying, 'ety'::character varying])::text[])))))) AS is_ww_unif,\n                    (EXISTS ( SELECT p.id\n                           FROM lexeme l,\n                            publishing p\n                          WHERE ((l.word_id = w2.id) AND ((p.target_name)::text = 'ww_lite'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) AS is_ww_lite,\n                    (EXISTS ( SELECT p.id\n                           FROM lexeme l,\n                            publishing p\n                          WHERE ((l.word_id = w2.id) AND ((p.target_name)::text = 'ww_od'::text) AND ((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) AS is_ww_od\n                   FROM word w1,\n                    word w2,\n                    word_group wg_2,\n                    word_group_member wgm1,\n                    word_group_member wgm2\n                  WHERE ((wgm1.word_group_id = wg_2.id) AND (wgm2.word_group_id = wg_2.id) AND (wgm1.word_id = w1.id) AND (wgm2.word_id = w2.id) AND (EXISTS ( SELECT 1\n                           FROM lexeme l,\n                            dataset ds\n                          WHERE ((l.word_id = w1.id) AND ((l.dataset_code)::text = (ds.code)::text) AND (l.is_public = true) AND (ds.is_public = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n                                   FROM publishing p\n                                  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text))))) AND (EXISTS ( SELECT 1\n                           FROM lexeme l,\n                            dataset ds\n                          WHERE ((l.word_id = w2.id) AND ((l.dataset_code)::text = (ds.code)::text) AND (l.is_public = true) AND (ds.is_public = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n                                   FROM publishing p\n                                  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text))))))) wg_1\n          GROUP BY wg_1.word_id) wg ON ((wg.word_id = w.id)))\n  WHERE ((w.is_public = true) AND ((wr.related_words IS NOT NULL) OR (wg.word_group_members IS NOT NULL)) AND (EXISTS ( SELECT l.id\n           FROM lexeme l,\n            dataset ds\n          WHERE ((l.word_id = w.id) AND (l.is_public = true) AND (l.is_word = true) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true) AND ((l.dataset_code)::text <> 'ety'::text) AND ((EXISTS ( SELECT 1\n                   FROM publishing p\n                  WHERE (((p.entity_name)::text = 'lexeme'::text) AND (p.entity_id = l.id)))) OR ((l.dataset_code)::text <> 'eki'::text))))))\n  ORDER BY w.id;"));
    }

    /**
     * Create an aliased <code>public.view_ww_word_relation</code> table reference
     */
    public ViewWwWordRelation(String alias) {
        this(DSL.name(alias), VIEW_WW_WORD_RELATION);
    }

    /**
     * Create an aliased <code>public.view_ww_word_relation</code> table reference
     */
    public ViewWwWordRelation(Name alias) {
        this(alias, VIEW_WW_WORD_RELATION);
    }

    /**
     * Create a <code>public.view_ww_word_relation</code> table reference
     */
    public ViewWwWordRelation() {
        this(DSL.name("view_ww_word_relation"), null);
    }

    public <O extends Record> ViewWwWordRelation(Table<O> child, ForeignKey<O, ViewWwWordRelationRecord> key) {
        super(child, key, VIEW_WW_WORD_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwWordRelation as(String alias) {
        return new ViewWwWordRelation(DSL.name(alias), this);
    }

    @Override
    public ViewWwWordRelation as(Name alias) {
        return new ViewWwWordRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordRelation rename(String name) {
        return new ViewWwWordRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordRelation rename(Name name) {
        return new ViewWwWordRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, JSON, JSON> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
